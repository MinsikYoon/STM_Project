
second.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000114c  080089e8  080089e8  000189e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b34  08009b34  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009b34  08009b34  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b34  08009b34  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b38  08009b38  00019b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009b3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200001e4  08009d20  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08009d20  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145cc  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003519  00000000  00000000  0003481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  00037d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001079  00000000  00000000  00039258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad03  00000000  00000000  0003a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d70  00000000  00000000  00054fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916f9  00000000  00000000  0006ed44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a10  00000000  00000000  00100440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00106e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080089cc 	.word	0x080089cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080089cc 	.word	0x080089cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <checkButton>:
#include "buttonController.h"
#include "heaterController.h"
#include "oledController.h"
int count = 0;
void checkButton(){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	  if(g_f_sw_up){
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <checkButton+0x50>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d004      	beq.n	8000e6e <checkButton+0x16>
		  g_f_sw_up = 0;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <checkButton+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		  temper_up();
 8000e6a:	f001 fafd 	bl	8002468 <temper_up>
	  }
	  if(g_f_sw_down){
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <checkButton+0x54>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <checkButton+0x28>
		  g_f_sw_down = 0;
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <checkButton+0x54>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
		  temper_down();
 8000e7c:	f001 fb0c 	bl	8002498 <temper_down>
	  	  }
	  if(g_f_sw_fix){
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <checkButton+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <checkButton+0x3e>
		  g_f_sw_fix = 0;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <checkButton+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		  startToggle();
 8000e8e:	f000 fb59 	bl	8001544 <startToggle>
		  setFixedTemper();
 8000e92:	f001 fb19 	bl	80024c8 <setFixedTemper>
	  	  }
	  if(g_f_sw_on){
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <checkButton+0x5c>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d002      	beq.n	8000ea4 <checkButton+0x4c>
		  g_f_sw_on = 0;
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <checkButton+0x5c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	  }
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000065a 	.word	0x2000065a
 8000eac:	2000065b 	.word	0x2000065b
 8000eb0:	2000065c 	.word	0x2000065c
 8000eb4:	2000065d 	.word	0x2000065d

08000eb8 <getSwState>:


ON_OFF_t getSwState(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(PB12_START_SW_PIN_GPIO_Port, PB12_START_SW_PIN_Pin)){
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <getSwState+0x20>)
 8000ec2:	f002 fc01 	bl	80036c8 <HAL_GPIO_ReadPin>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <getSwState+0x18>
		return OFF_t;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e000      	b.n	8000ed2 <getSwState+0x1a>

	}else{
		return ON_t;
 8000ed0:	2301      	movs	r3, #1

	}
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <isTemperSensorInit>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else

uint8_t isTemperSensorInit(){
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
	return m_init;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <isTemperSensorInit+0x10>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	20000224 	.word	0x20000224

08000ef0 <isBusy>:

uint8_t isBusy(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000ef4:	f000 fc28 	bl	8001748 <isBusyLine>
 8000ef8:	4603      	mov	r3, r0
	//return m_busy;
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <isConverting>:

uint8_t isConverting(){
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

	return m_isConverting;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <isConverting+0x10>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000226 	.word	0x20000226

08000f14 <Ds18b20_Init_Simple>:

bool    Ds18b20_Init_Simple(){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
		m_init = 0;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <Ds18b20_Init_Simple+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000f1e:	2208      	movs	r2, #8
 8000f20:	491b      	ldr	r1, [pc, #108]	; (8000f90 <Ds18b20_Init_Simple+0x7c>)
 8000f22:	481c      	ldr	r0, [pc, #112]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f24:	f000 fc82 	bl	800182c <OneWire_Init>
		//OneWire_First(&OneWire);

		OneWire.ROM_NO[0] = 0x28;
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f2a:	2228      	movs	r2, #40	; 0x28
 8000f2c:	725a      	strb	r2, [r3, #9]
		OneWire.ROM_NO[1] = 0x90;
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f30:	2290      	movs	r2, #144	; 0x90
 8000f32:	729a      	strb	r2, [r3, #10]
		OneWire.ROM_NO[2] = 0x7;
 8000f34:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	72da      	strb	r2, [r3, #11]
		OneWire.ROM_NO[3] = 0x94;
 8000f3a:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f3c:	2294      	movs	r2, #148	; 0x94
 8000f3e:	731a      	strb	r2, [r3, #12]
		OneWire.ROM_NO[4] = 0x97;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f42:	2297      	movs	r2, #151	; 0x97
 8000f44:	735a      	strb	r2, [r3, #13]
		OneWire.ROM_NO[5] = 0x13;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f48:	2213      	movs	r2, #19
 8000f4a:	739a      	strb	r2, [r3, #14]
		OneWire.ROM_NO[6] = 0x3;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	73da      	strb	r2, [r3, #15]
		OneWire.ROM_NO[7] = 0x18;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f54:	2218      	movs	r2, #24
 8000f56:	741a      	strb	r2, [r3, #16]
		OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000f58:	490f      	ldr	r1, [pc, #60]	; (8000f98 <Ds18b20_Init_Simple+0x84>)
 8000f5a:	480e      	ldr	r0, [pc, #56]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f5c:	f000 fdba 	bl	8001ad4 <OneWire_GetFullROM>

		Ds18b20Delay(50);
 8000f60:	2032      	movs	r0, #50	; 0x32
 8000f62:	f002 f8fb 	bl	800315c <HAL_Delay>
		DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000f66:	220c      	movs	r2, #12
 8000f68:	490b      	ldr	r1, [pc, #44]	; (8000f98 <Ds18b20_Init_Simple+0x84>)
 8000f6a:	480a      	ldr	r0, [pc, #40]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f6c:	f000 f96e 	bl	800124c <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8000f70:	2032      	movs	r0, #50	; 0x32
 8000f72:	f002 f8f3 	bl	800315c <HAL_Delay>
		DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <Ds18b20_Init_Simple+0x84>)
 8000f78:	4806      	ldr	r0, [pc, #24]	; (8000f94 <Ds18b20_Init_Simple+0x80>)
 8000f7a:	f000 f9ff 	bl	800137c <DS18B20_DisableAlarmTemperature>
		m_init = 1;
 8000f7e:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <Ds18b20_Init_Simple+0x78>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
		return true;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000224 	.word	0x20000224
 8000f90:	40010800 	.word	0x40010800
 8000f94:	20000210 	.word	0x20000210
 8000f98:	20000200 	.word	0x20000200

08000f9c <StartConverting>:
	return true;
}
#endif
//###########################################################################################

void StartConverting(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0

	m_busy = 1;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <StartConverting+0x20>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <StartConverting+0x24>)
 8000fa8:	f000 f84a 	bl	8001040 <DS18B20_StartAll>
	m_isConverting = 1;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <StartConverting+0x28>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000fb2:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <StartConverting+0x20>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000225 	.word	0x20000225
 8000fc0:	20000210 	.word	0x20000210
 8000fc4:	20000226 	.word	0x20000226

08000fc8 <checkConverting>:

void checkConverting(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	m_busy = 1;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <checkConverting+0x2c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire); //완료 1,비완료 0
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <checkConverting+0x30>)
 8000fd4:	f000 fa2d 	bl	8001432 <DS18B20_AllDone>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	bf0c      	ite	eq
 8000fde:	2301      	moveq	r3, #1
 8000fe0:	2300      	movne	r3, #0
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <checkConverting+0x34>)
 8000fe8:	701a      	strb	r2, [r3, #0]
	m_busy = 0;
 8000fea:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <checkConverting+0x2c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000225 	.word	0x20000225
 8000ff8:	20000210 	.word	0x20000210
 8000ffc:	20000226 	.word	0x20000226

08001000 <getTemper>:

float getTemper(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 8001004:	2064      	movs	r0, #100	; 0x64
 8001006:	f002 f8a9 	bl	800315c <HAL_Delay>
	m_busy = 1;
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <getTemper+0x30>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 8001010:	4a08      	ldr	r2, [pc, #32]	; (8001034 <getTemper+0x34>)
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <getTemper+0x38>)
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <getTemper+0x3c>)
 8001016:	f000 f827 	bl	8001068 <DS18B20_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <getTemper+0x38>)
 8001020:	731a      	strb	r2, [r3, #12]
	m_busy = 0;
 8001022:	4b03      	ldr	r3, [pc, #12]	; (8001030 <getTemper+0x30>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <getTemper+0x38>)
 800102a:	689b      	ldr	r3, [r3, #8]
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000225 	.word	0x20000225
 8001034:	20000208 	.word	0x20000208
 8001038:	20000200 	.word	0x20000200
 800103c:	20000210 	.word	0x20000210

08001040 <DS18B20_StartAll>:
}



void DS18B20_StartAll(OneWire_t* OneWire)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fc23 	bl	8001894 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800104e:	21cc      	movs	r1, #204	; 0xcc
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 fce1 	bl	8001a18 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001056:	2144      	movs	r1, #68	; 0x44
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 fcdd 	bl	8001a18 <OneWire_WriteByte>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08b      	sub	sp, #44	; 0x2c
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f000 f96c 	bl	800135c <DS18B20_Is>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <DS18B20_Read+0x26>
		return false;
 800108a:	2300      	movs	r3, #0
 800108c:	e0d8      	b.n	8001240 <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 fc84 	bl	800199c <OneWire_ReadBit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 800109a:	2300      	movs	r3, #0
 800109c:	e0d0      	b.n	8001240 <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f000 fbf8 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f000 fcf5 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80010ac:	21be      	movs	r1, #190	; 0xbe
 80010ae:	68f8      	ldr	r0, [r7, #12]
 80010b0:	f000 fcb2 	bl	8001a18 <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 80010b4:	2300      	movs	r3, #0
 80010b6:	77fb      	strb	r3, [r7, #31]
 80010b8:	e00d      	b.n	80010d6 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80010ba:	7ffc      	ldrb	r4, [r7, #31]
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fcc9 	bl	8001a54 <OneWire_ReadByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80010ca:	443b      	add	r3, r7
 80010cc:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	3301      	adds	r3, #1
 80010d4:	77fb      	strb	r3, [r7, #31]
 80010d6:	7ffb      	ldrb	r3, [r7, #31]
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d9ee      	bls.n	80010ba <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2108      	movs	r1, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd12 	bl	8001b0c <OneWire_CRC8>
 80010e8:	4603      	mov	r3, r0
 80010ea:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80010ec:	7f3b      	ldrb	r3, [r7, #28]
 80010ee:	7fba      	ldrb	r2, [r7, #30]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <DS18B20_Read+0x90>
		/* CRC invalid */
		return false;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e0a3      	b.n	8001240 <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80010f8:	7d3b      	ldrb	r3, [r7, #20]
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	7d7b      	ldrb	r3, [r7, #21]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 fbc3 	bl	8001894 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 800110e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001112:	2b00      	cmp	r3, #0
 8001114:	da05      	bge.n	8001122 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8001116:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001118:	425b      	negs	r3, r3
 800111a:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8001122:	7e3b      	ldrb	r3, [r7, #24]
 8001124:	115b      	asrs	r3, r3, #5
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	3309      	adds	r3, #9
 8001130:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8001132:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	b29b      	uxth	r3, r3
 8001138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	0a1b      	lsrs	r3, r3, #8
 8001140:	b29b      	uxth	r3, r3
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	b25b      	sxtb	r3, r3
 8001146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800114a:	b25a      	sxtb	r2, r3
 800114c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001150:	4313      	orrs	r3, r2
 8001152:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8001156:	7f7b      	ldrb	r3, [r7, #29]
 8001158:	3b09      	subs	r3, #9
 800115a:	2b03      	cmp	r3, #3
 800115c:	d850      	bhi.n	8001200 <DS18B20_Read+0x198>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <DS18B20_Read+0xfc>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001175 	.word	0x08001175
 8001168:	08001199 	.word	0x08001199
 800116c:	080011bd 	.word	0x080011bd
 8001170:	080011e1 	.word	0x080011e1
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8001174:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001176:	08db      	lsrs	r3, r3, #3
 8001178:	b29b      	uxth	r3, r3
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fdf0 	bl	8000d64 <__aeabi_i2f>
 8001184:	4603      	mov	r3, r0
 8001186:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001188:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800118c:	6a38      	ldr	r0, [r7, #32]
 800118e:	f7fe ffe7 	bl	8000160 <__aeabi_fmul>
 8001192:	4603      	mov	r3, r0
 8001194:	623b      	str	r3, [r7, #32]
		break;
 8001196:	e038      	b.n	800120a <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	b29b      	uxth	r3, r3
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fdde 	bl	8000d64 <__aeabi_i2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80011ac:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80011b0:	6a38      	ldr	r0, [r7, #32]
 80011b2:	f7fe ffd5 	bl	8000160 <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	623b      	str	r3, [r7, #32]
		 break;
 80011ba:	e026      	b.n	800120a <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 80011bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fdcc 	bl	8000d64 <__aeabi_i2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80011d0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80011d4:	6a38      	ldr	r0, [r7, #32]
 80011d6:	f7fe ffc3 	bl	8000160 <__aeabi_fmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	623b      	str	r3, [r7, #32]
		break;
 80011de:	e014      	b.n	800120a <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 80011e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fdbc 	bl	8000d64 <__aeabi_i2f>
 80011ec:	4603      	mov	r3, r0
 80011ee:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80011f0:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f7fe ffb3 	bl	8000160 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	623b      	str	r3, [r7, #32]
		 break;
 80011fe:	e004      	b.n	800120a <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <DS18B20_Read+0x1e0>)
 8001202:	623b      	str	r3, [r7, #32]
			digit = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 800120a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fda8 	bl	8000d64 <__aeabi_i2f>
 8001214:	4603      	mov	r3, r0
 8001216:	4619      	mov	r1, r3
 8001218:	6a38      	ldr	r0, [r7, #32]
 800121a:	f7ff fcef 	bl	8000bfc <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	623b      	str	r3, [r7, #32]
	if (minus) 
 8001222:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 800122a:	6a39      	ldr	r1, [r7, #32]
 800122c:	f04f 0000 	mov.w	r0, #0
 8001230:	f7ff fce2 	bl	8000bf8 <__aeabi_fsub>
 8001234:	4603      	mov	r3, r0
 8001236:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a3a      	ldr	r2, [r7, #32]
 800123c:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	372c      	adds	r7, #44	; 0x2c
 8001244:	46bd      	mov	sp, r7
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	437f0000 	.word	0x437f0000

0800124c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	4613      	mov	r3, r2
 8001258:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f000 f87e 	bl	800135c <DS18B20_Is>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <DS18B20_SetResolution+0x1e>
		return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e074      	b.n	8001354 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 fb12 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 fc0f 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001278:	21be      	movs	r1, #190	; 0xbe
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fbcc 	bl	8001a18 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f000 fbe7 	bl	8001a54 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 fbe4 	bl	8001a54 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fbe1 	bl	8001a54 <OneWire_ReadByte>
 8001292:	4603      	mov	r3, r0
 8001294:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 fbdc 	bl	8001a54 <OneWire_ReadByte>
 800129c:	4603      	mov	r3, r0
 800129e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 fbd7 	bl	8001a54 <OneWire_ReadByte>
 80012a6:	4603      	mov	r3, r0
 80012a8:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d108      	bne.n	80012c2 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	f023 0320 	bic.w	r3, r3, #32
 80012be:	75fb      	strb	r3, [r7, #23]
 80012c0:	e022      	b.n	8001308 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b0a      	cmp	r3, #10
 80012c6:	d108      	bne.n	80012da <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012ce:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	f043 0320 	orr.w	r3, r3, #32
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e016      	b.n	8001308 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b0b      	cmp	r3, #11
 80012de:	d108      	bne.n	80012f2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	f023 0320 	bic.w	r3, r3, #32
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	e00a      	b.n	8001308 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d107      	bne.n	8001308 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fe:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 fac3 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f000 fbc0 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8001316:	214e      	movs	r1, #78	; 0x4e
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 fb7d 	bl	8001a18 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 800131e:	7dbb      	ldrb	r3, [r7, #22]
 8001320:	4619      	mov	r1, r3
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 fb78 	bl	8001a18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8001328:	7d7b      	ldrb	r3, [r7, #21]
 800132a:	4619      	mov	r1, r3
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 fb73 	bl	8001a18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	4619      	mov	r1, r3
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fb6e 	bl	8001a18 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 faa9 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f000 fba6 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800134a:	2148      	movs	r1, #72	; 0x48
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 fb63 	bl	8001a18 <OneWire_WriteByte>
	
	return 1;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b28      	cmp	r3, #40	; 0x28
 800136a:	d101      	bne.n	8001370 <DS18B20_Is+0x14>
		return 1;
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <DS18B20_Is+0x16>
	
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f7ff ffe8 	bl	800135c <DS18B20_Is>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8001392:	2300      	movs	r3, #0
 8001394:	e049      	b.n	800142a <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fa7c 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800139c:	6839      	ldr	r1, [r7, #0]
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 fb79 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80013a4:	21be      	movs	r1, #190	; 0xbe
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fb36 	bl	8001a18 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fb51 	bl	8001a54 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fb4e 	bl	8001a54 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f000 fb4b 	bl	8001a54 <OneWire_ReadByte>
 80013be:	4603      	mov	r3, r0
 80013c0:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fb46 	bl	8001a54 <OneWire_ReadByte>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fb41 	bl	8001a54 <OneWire_ReadByte>
 80013d2:	4603      	mov	r3, r0
 80013d4:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 80013d6:	237d      	movs	r3, #125	; 0x7d
 80013d8:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 80013da:	23c9      	movs	r3, #201	; 0xc9
 80013dc:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fa58 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fb55 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80013ec:	214e      	movs	r1, #78	; 0x4e
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fb12 	bl	8001a18 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fb0d 	bl	8001a18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4619      	mov	r1, r3
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 fb08 	bl	8001a18 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8001408:	7b7b      	ldrb	r3, [r7, #13]
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fb03 	bl	8001a18 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fa3e 	bl	8001894 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001418:	6839      	ldr	r1, [r7, #0]
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fb3b 	bl	8001a96 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001420:	2148      	movs	r1, #72	; 0x48
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 faf8 	bl	8001a18 <OneWire_WriteByte>
	
	return 1;
 8001428:	2301      	movs	r3, #1
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 faae 	bl	800199c <OneWire_ReadBit>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <getCurrentTemper>:

float getCurrentTemper(){
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 8001450:	4b02      	ldr	r3, [pc, #8]	; (800145c <getCurrentTemper+0x10>)
 8001452:	689b      	ldr	r3, [r3, #8]

}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000200 	.word	0x20000200

08001460 <led1OnOff>:
#include <ledcontroller.h>

void led1OnOff(ON_OFF_t on_off){
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]


	if(on_off ==ON_t){
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d105      	bne.n	800147c <led1OnOff+0x1c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4807      	ldr	r0, [pc, #28]	; (8001494 <led1OnOff+0x34>)
 8001476:	f002 f93e 	bl	80036f6 <HAL_GPIO_WritePin>

	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
	}
}
 800147a:	e007      	b.n	800148c <led1OnOff+0x2c>
	}else if(on_off == OFF_t){
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d104      	bne.n	800148c <led1OnOff+0x2c>
		HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 8001482:	2201      	movs	r2, #1
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <led1OnOff+0x34>)
 8001488:	f002 f935 	bl	80036f6 <HAL_GPIO_WritePin>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40010c00 	.word	0x40010c00

08001498 <led2OnOff>:

void led2OnOff(ON_OFF_t on_off){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]


	if(on_off ==ON_t){
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <led2OnOff+0x1c>
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <led2OnOff+0x34>)
 80014ae:	f002 f922 	bl	80036f6 <HAL_GPIO_WritePin>

	}else if(on_off == OFF_t){
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 1);
	}
}
 80014b2:	e007      	b.n	80014c4 <led2OnOff+0x2c>
	}else if(on_off == OFF_t){
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d104      	bne.n	80014c4 <led2OnOff+0x2c>
		HAL_GPIO_WritePin(PB7_LED2_GPIO_Port, PB7_LED2_Pin, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <led2OnOff+0x34>)
 80014c0:	f002 f919 	bl	80036f6 <HAL_GPIO_WritePin>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010c00 	.word	0x40010c00

080014d0 <opening>:
#include "stdio.h"
#include "heaterController.h"
static uint8_t m_toggle =0;
static uint8_t m_toggle_count = 0;
void printTemperNoUpdate(int temper);
void opening(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

	  SSD1306_InvertDisplay(1);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f000 fb50 	bl	8001b7a <SSD1306_InvertDisplay>
	  SSD1306_Clear();
	  SSD1306_DrawBitmap(0,0,ojtubelog3,128,64,1);
	  SSD1306_UpdateScreen();
	  HAL_Delay(5000);
	  */
	  printDefault();
 80014da:	f000 f843 	bl	8001564 <printDefault>
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <toggleScreen>:

void toggleScreen() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	if (m_toggle_count > 0) {
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <toggleScreen+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d019      	beq.n	8001524 <toggleScreen+0x40>
		if (!m_toggle) {
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <toggleScreen+0x5c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d107      	bne.n	8001508 <toggleScreen+0x24>
			SSD1306_Clear();
 80014f8:	f000 fd79 	bl	8001fee <SSD1306_Clear>
			SSD1306_UpdateScreen();
 80014fc:	f000 fc18 	bl	8001d30 <SSD1306_UpdateScreen>
			m_toggle = 1;
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <toggleScreen+0x5c>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
 8001506:	e00d      	b.n	8001524 <toggleScreen+0x40>
		} else {
			printBackground();
 8001508:	f000 f886 	bl	8001618 <printBackground>
			printTemperNoUpdate(getFixedTemper());
 800150c:	f000 ffea 	bl	80024e4 <getFixedTemper>
 8001510:	4603      	mov	r3, r0
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f8a2 	bl	800165c <printTemperNoUpdate>
			printHeaterState(OFF_t);
 8001518:	2000      	movs	r0, #0
 800151a:	f000 f8f1 	bl	8001700 <printHeaterState>
			m_toggle = 0;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <toggleScreen+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
		}
	}
	if(m_toggle_count > 0){
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <toggleScreen+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <toggleScreen+0x54>
		m_toggle_count--;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <toggleScreen+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b01      	ldr	r3, [pc, #4]	; (800153c <toggleScreen+0x58>)
 8001536:	701a      	strb	r2, [r3, #0]
	}
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000228 	.word	0x20000228
 8001540:	20000227 	.word	0x20000227

08001544 <startToggle>:

void startToggle(){
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	if(m_toggle_count == 0){
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <startToggle+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <startToggle+0x12>
		m_toggle_count = 4;	}
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <startToggle+0x1c>)
 8001552:	2204      	movs	r2, #4
 8001554:	701a      	strb	r2, [r3, #0]

}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000228 	.word	0x20000228

08001564 <printDefault>:
void printDefault(){
 8001564:	b580      	push	{r7, lr}
 8001566:	b09a      	sub	sp, #104	; 0x68
 8001568:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 fb05 	bl	8001b7a <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8001570:	f000 fd3d 	bl	8001fee <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8001574:	2100      	movs	r1, #0
 8001576:	2001      	movs	r0, #1
 8001578:	f000 fc7e 	bl	8001e78 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	4921      	ldr	r1, [pc, #132]	; (8001604 <printDefault+0xa0>)
 8001580:	4821      	ldr	r0, [pc, #132]	; (8001608 <printDefault+0xa4>)
 8001582:	f000 fd0f 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8001586:	210f      	movs	r1, #15
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fc75 	bl	8001e78 <SSD1306_GotoXY>
	SSD1306_Puts("----------", &Font_11x18, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	491c      	ldr	r1, [pc, #112]	; (8001604 <printDefault+0xa0>)
 8001592:	481e      	ldr	r0, [pc, #120]	; (800160c <printDefault+0xa8>)
 8001594:	f000 fd06 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 8001598:	2126      	movs	r1, #38	; 0x26
 800159a:	200e      	movs	r0, #14
 800159c:	f000 fc6c 	bl	8001e78 <SSD1306_GotoXY>

	char temper_str[100] = "";
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	2260      	movs	r2, #96	; 0x60
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 f924 	bl	80067fa <memset>
	itoa(DEFAULT_TEMPER, temper_str,10);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	220a      	movs	r2, #10
 80015b6:	4619      	mov	r1, r3
 80015b8:	2019      	movs	r0, #25
 80015ba:	f004 fb57 	bl	8005c6c <itoa>
	strcat(temper_str,".0");
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe fdc5 	bl	8000150 <strlen>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4413      	add	r3, r2
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <printDefault+0xac>)
 80015d0:	8811      	ldrh	r1, [r2, #0]
 80015d2:	7892      	ldrb	r2, [r2, #2]
 80015d4:	8019      	strh	r1, [r3, #0]
 80015d6:	709a      	strb	r2, [r3, #2]
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2201      	movs	r2, #1
 80015dc:	4909      	ldr	r1, [pc, #36]	; (8001604 <printDefault+0xa0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fce0 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 80015e4:	2126      	movs	r1, #38	; 0x26
 80015e6:	2051      	movs	r0, #81	; 0x51
 80015e8:	f000 fc46 	bl	8001e78 <SSD1306_GotoXY>
	SSD1306_Puts("off", &Font_11x18, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	4905      	ldr	r1, [pc, #20]	; (8001604 <printDefault+0xa0>)
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <printDefault+0xb0>)
 80015f2:	f000 fcd7 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80015f6:	f000 fb9b 	bl	8001d30 <SSD1306_UpdateScreen>
}
 80015fa:	bf00      	nop
 80015fc:	3768      	adds	r7, #104	; 0x68
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000000 	.word	0x20000000
 8001608:	080089e8 	.word	0x080089e8
 800160c:	080089f4 	.word	0x080089f4
 8001610:	08008a00 	.word	0x08008a00
 8001614:	08008a04 	.word	0x08008a04

08001618 <printBackground>:

void printBackground(){
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0

	SSD1306_InvertDisplay(0);
 800161c:	2000      	movs	r0, #0
 800161e:	f000 faac 	bl	8001b7a <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8001622:	f000 fce4 	bl	8001fee <SSD1306_Clear>
	SSD1306_GotoXY(1, 0);
 8001626:	2100      	movs	r1, #0
 8001628:	2001      	movs	r0, #1
 800162a:	f000 fc25 	bl	8001e78 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <printBackground+0x38>)
 8001632:	4808      	ldr	r0, [pc, #32]	; (8001654 <printBackground+0x3c>)
 8001634:	f000 fcb6 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8001638:	210f      	movs	r1, #15
 800163a:	2000      	movs	r0, #0
 800163c:	f000 fc1c 	bl	8001e78 <SSD1306_GotoXY>
	SSD1306_Puts("----------", &Font_11x18, 1);
 8001640:	2201      	movs	r2, #1
 8001642:	4903      	ldr	r1, [pc, #12]	; (8001650 <printBackground+0x38>)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <printBackground+0x40>)
 8001646:	f000 fcad 	bl	8001fa4 <SSD1306_Puts>

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000000 	.word	0x20000000
 8001654:	080089e8 	.word	0x080089e8
 8001658:	080089f4 	.word	0x080089f4

0800165c <printTemperNoUpdate>:


void printTemperNoUpdate(int temper){
 800165c:	b580      	push	{r7, lr}
 800165e:	b09c      	sub	sp, #112	; 0x70
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 8001664:	2126      	movs	r1, #38	; 0x26
 8001666:	200e      	movs	r0, #14
 8001668:	f000 fc06 	bl	8001e78 <SSD1306_GotoXY>

	char temper_str[100] = "";
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	f107 0310 	add.w	r3, r7, #16
 8001674:	2260      	movs	r2, #96	; 0x60
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 f8be 	bl	80067fa <memset>
	sprintf(temper_str,"%2d.0",temper);
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <printTemperNoUpdate+0x48>)
 8001686:	4618      	mov	r0, r3
 8001688:	f005 f854 	bl	8006734 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2201      	movs	r2, #1
 8001692:	4905      	ldr	r1, [pc, #20]	; (80016a8 <printTemperNoUpdate+0x4c>)
 8001694:	4618      	mov	r0, r3
 8001696:	f000 fc85 	bl	8001fa4 <SSD1306_Puts>
}
 800169a:	bf00      	nop
 800169c:	3770      	adds	r7, #112	; 0x70
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	08008a08 	.word	0x08008a08
 80016a8:	20000000 	.word	0x20000000

080016ac <printTemper>:

void printTemper(int temper){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b09c      	sub	sp, #112	; 0x70
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 80016b4:	2126      	movs	r1, #38	; 0x26
 80016b6:	200e      	movs	r0, #14
 80016b8:	f000 fbde 	bl	8001e78 <SSD1306_GotoXY>

	char temper_str[100] = "";
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	2260      	movs	r2, #96	; 0x60
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f005 f896 	bl	80067fa <memset>
	sprintf(temper_str,"%2d.0",temper);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <printTemper+0x4c>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 f82c 	bl	8006734 <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2201      	movs	r2, #1
 80016e2:	4906      	ldr	r1, [pc, #24]	; (80016fc <printTemper+0x50>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fc5d 	bl	8001fa4 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80016ea:	f000 fb21 	bl	8001d30 <SSD1306_UpdateScreen>
}
 80016ee:	bf00      	nop
 80016f0:	3770      	adds	r7, #112	; 0x70
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08008a08 	.word	0x08008a08
 80016fc:	20000000 	.word	0x20000000

08001700 <printHeaterState>:

void printHeaterState(ON_OFF_t onOff){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	71fb      	strb	r3, [r7, #7]
	SSD1306_GotoXY(81, 38);
 800170a:	2126      	movs	r1, #38	; 0x26
 800170c:	2051      	movs	r0, #81	; 0x51
 800170e:	f000 fbb3 	bl	8001e78 <SSD1306_GotoXY>
	if(onOff ==ON_t){
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <printHeaterState+0x24>
		SSD1306_Puts("On ", &Font_11x18, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	4908      	ldr	r1, [pc, #32]	; (800173c <printHeaterState+0x3c>)
 800171c:	4808      	ldr	r0, [pc, #32]	; (8001740 <printHeaterState+0x40>)
 800171e:	f000 fc41 	bl	8001fa4 <SSD1306_Puts>
 8001722:	e004      	b.n	800172e <printHeaterState+0x2e>
	}else{
		SSD1306_Puts("off", &Font_11x18, 1);
 8001724:	2201      	movs	r2, #1
 8001726:	4905      	ldr	r1, [pc, #20]	; (800173c <printHeaterState+0x3c>)
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <printHeaterState+0x44>)
 800172a:	f000 fc3b 	bl	8001fa4 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 800172e:	f000 faff 	bl	8001d30 <SSD1306_UpdateScreen>

}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000000 	.word	0x20000000
 8001740:	08008a10 	.word	0x08008a10
 8001744:	08008a04 	.word	0x08008a04

08001748 <isBusyLine>:
 */
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t m_busy_line =0;
uint8_t isBusyLine(){
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

	return m_busy_line;
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <isBusyLine+0x10>)
 800174e:	781b      	ldrb	r3, [r3, #0]

}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	20000229 	.word	0x20000229

0800175c <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <ONEWIRE_DELAY+0x2c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 800176e:	bf00      	nop
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <ONEWIRE_DELAY+0x2c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	429a      	cmp	r2, r3
 800177a:	d9f9      	bls.n	8001770 <ONEWIRE_DELAY+0x14>
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	2000070c 	.word	0x2000070c

0800178c <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	889b      	ldrh	r3, [r3, #4]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	611a      	str	r2, [r3, #16]
}	
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	889a      	ldrh	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	611a      	str	r2, [r3, #16]
}	
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f107 0208 	add.w	r2, r7, #8
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f001 fde8 	bl	80033c0 <HAL_GPIO_Init>
}	
 80017f0:	bf00      	nop
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8001800:	2311      	movs	r3, #17
 8001802:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8001808:	2303      	movs	r3, #3
 800180a:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	889b      	ldrh	r3, [r3, #4]
 8001810:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f107 0208 	add.w	r2, r7, #8
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fdcf 	bl	80033c0 <HAL_GPIO_Init>

}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	4613      	mov	r3, r2
 8001838:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <OneWire_Init+0x60>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8001840:	4813      	ldr	r0, [pc, #76]	; (8001890 <OneWire_Init+0x64>)
 8001842:	f003 fc2b 	bl	800509c <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	68ba      	ldr	r2, [r7, #8]
 800184a:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	88fa      	ldrh	r2, [r7, #6]
 8001850:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff ffd0 	bl	80017f8 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f7ff ffa6 	bl	80017aa <ONEWIRE_HIGH>
	OneWireDelay(1000);
 800185e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001862:	f001 fc7b 	bl	800315c <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f7ff ff90 	bl	800178c <ONEWIRE_LOW>
	OneWireDelay(1000);
 800186c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001870:	f001 fc74 	bl	800315c <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff ff98 	bl	80017aa <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800187a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800187e:	f001 fc6d 	bl	800315c <HAL_Delay>
}
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000229 	.word	0x20000229
 8001890:	2000070c 	.word	0x2000070c

08001894 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f7ff ff75 	bl	800178c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa8 	bl	80017f8 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 80018a8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80018ac:	f7ff ff56 	bl	800175c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 80018b0:	2014      	movs	r0, #20
 80018b2:	f7ff ff53 	bl	800175c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line = 1;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <OneWire_Reset+0x60>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff82 	bl	80017c6 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 80018c2:	2046      	movs	r0, #70	; 0x46
 80018c4:	f7ff ff4a 	bl	800175c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f001 fef8 	bl	80036c8 <HAL_GPIO_ReadPin>
 80018d8:	4603      	mov	r3, r0
 80018da:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <OneWire_Reset+0x60>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 80018e2:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80018e6:	f7ff ff39 	bl	800175c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000229 	.word	0x20000229

080018f8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]


	if (bit) 
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d024      	beq.n	8001954 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		m_busy_line = 1;
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <OneWire_WriteBit+0xa0>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff3b 	bl	800178c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff6e 	bl	80017f8 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f7ff ff1d 	bl	800175c <ONEWIRE_DELAY>
		m_busy_line = 0;
 8001922:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

		/* Bit high */
		m_busy_line = 1;
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <OneWire_WriteBit+0xa0>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff49 	bl	80017c6 <ONEWIRE_INPUT>
		m_busy_line = 0;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 800193a:	2037      	movs	r0, #55	; 0x37
 800193c:	f7ff ff0e 	bl	800175c <ONEWIRE_DELAY>

		m_busy_line = 1;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff3d 	bl	80017c6 <ONEWIRE_INPUT>
		m_busy_line = 0;
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <OneWire_WriteBit+0xa0>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 8001952:	e01d      	b.n	8001990 <OneWire_WriteBit+0x98>
		m_busy_line = 1;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff16 	bl	800178c <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff49 	bl	80017f8 <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 800196c:	2041      	movs	r0, #65	; 0x41
 800196e:	f7ff fef5 	bl	800175c <ONEWIRE_DELAY>
		m_busy_line = 1;
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <OneWire_WriteBit+0xa0>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff24 	bl	80017c6 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 800197e:	2005      	movs	r0, #5
 8001980:	f7ff feec 	bl	800175c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff ff1e 	bl	80017c6 <ONEWIRE_INPUT>
		m_busy_line = 0;
 800198a:	4b03      	ldr	r3, [pc, #12]	; (8001998 <OneWire_WriteBit+0xa0>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000229 	.word	0x20000229

0800199c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */

	m_busy_line = 1;
 80019a8:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <OneWire_ReadBit+0x78>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff feec 	bl	800178c <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff1f 	bl	80017f8 <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 80019ba:	2002      	movs	r0, #2
 80019bc:	f7ff fece 	bl	800175c <ONEWIRE_DELAY>
	m_busy_line = 0;
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <OneWire_ReadBit+0x78>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]

	/* Release line */
	m_busy_line = 1;
 80019c6:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <OneWire_ReadBit+0x78>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fefa 	bl	80017c6 <ONEWIRE_INPUT>

	ONEWIRE_DELAY(10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f7ff fec2 	bl	800175c <ONEWIRE_DELAY>
	m_busy_line = 0;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <OneWire_ReadBit+0x78>)
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
	

	/* Read line value */
	m_busy_line = 1;
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <OneWire_ReadBit+0x78>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f001 fe6a 	bl	80036c8 <HAL_GPIO_ReadPin>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <OneWire_ReadBit+0x78>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 8001a04:	2032      	movs	r0, #50	; 0x32
 8001a06:	f7ff fea9 	bl	800175c <ONEWIRE_DELAY>
	

	/* Return bit value */
	return bit;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000229 	.word	0x20000229

08001a18 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001a24:	2308      	movs	r3, #8
 8001a26:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8001a28:	e00a      	b.n	8001a40 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff5f 	bl	80018f8 <OneWire_WriteBit>
		byte >>= 1;
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	73fa      	strb	r2, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ef      	bne.n	8001a2a <OneWire_WriteByte+0x12>
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	2300      	movs	r3, #0
 8001a62:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001a64:	e00d      	b.n	8001a82 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff95 	bl	800199c <OneWire_ReadBit>
 8001a72:	4603      	mov	r3, r0
 8001a74:	01db      	lsls	r3, r3, #7
 8001a76:	b25a      	sxtb	r2, r3
 8001a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	73fa      	strb	r2, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ec      	bne.n	8001a66 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001aa0:	2155      	movs	r1, #85	; 0x55
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ffb8 	bl	8001a18 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e00a      	b.n	8001ac4 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ffad 	bl	8001a18 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	2b07      	cmp	r3, #7
 8001ac8:	d9f1      	bls.n	8001aae <OneWire_SelectWithPointer+0x18>
	}	
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	e00a      	b.n	8001afa <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001ae4:	7bfa      	ldrb	r2, [r7, #15]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	6839      	ldr	r1, [r7, #0]
 8001aea:	440b      	add	r3, r1
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	440a      	add	r2, r1
 8001af0:	7a52      	ldrb	r2, [r2, #9]
 8001af2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	3301      	adds	r3, #1
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	d9f1      	bls.n	8001ae4 <OneWire_GetFullROM+0x10>
	}
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 8001b1c:	e022      	b.n	8001b64 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	1c5a      	adds	r2, r3, #1
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001b28:	2308      	movs	r3, #8
 8001b2a:	737b      	strb	r3, [r7, #13]
 8001b2c:	e017      	b.n	8001b5e <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	7bbb      	ldrb	r3, [r7, #14]
 8001b32:	4053      	eors	r3, r2
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001b42:	7b3b      	ldrb	r3, [r7, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d004      	beq.n	8001b52 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001b52:	7bbb      	ldrb	r3, [r7, #14]
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	737b      	strb	r3, [r7, #13]
 8001b5e:	7b7b      	ldrb	r3, [r7, #13]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1e4      	bne.n	8001b2e <OneWire_CRC8+0x22>
	while (len--) {
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	1e5a      	subs	r2, r3, #1
 8001b68:	70fa      	strb	r2, [r7, #3]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1d7      	bne.n	8001b1e <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr

08001b7a <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <SSD1306_InvertDisplay+0x1a>
 8001b88:	22a7      	movs	r2, #167	; 0xa7
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2078      	movs	r0, #120	; 0x78
 8001b8e:	f000 fab1 	bl	80020f4 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001b92:	e004      	b.n	8001b9e <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001b94:	22a6      	movs	r2, #166	; 0xa6
 8001b96:	2100      	movs	r1, #0
 8001b98:	2078      	movs	r0, #120	; 0x78
 8001b9a:	f000 faab 	bl	80020f4 <ssd1306_I2C_Write>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001bae:	f000 fa27 	bl	8002000 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001bb2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2178      	movs	r1, #120	; 0x78
 8001bba:	485b      	ldr	r0, [pc, #364]	; (8001d28 <SSD1306_Init+0x180>)
 8001bbc:	f002 f818 	bl	8003bf0 <HAL_I2C_IsDeviceReady>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e0a9      	b.n	8001d1e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001bca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001bce:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bd0:	e002      	b.n	8001bd8 <SSD1306_Init+0x30>
		p--;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f9      	bne.n	8001bd2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bde:	22ae      	movs	r2, #174	; 0xae
 8001be0:	2100      	movs	r1, #0
 8001be2:	2078      	movs	r0, #120	; 0x78
 8001be4:	f000 fa86 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001be8:	2220      	movs	r2, #32
 8001bea:	2100      	movs	r1, #0
 8001bec:	2078      	movs	r0, #120	; 0x78
 8001bee:	f000 fa81 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	2078      	movs	r0, #120	; 0x78
 8001bf8:	f000 fa7c 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bfc:	22b0      	movs	r2, #176	; 0xb0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2078      	movs	r0, #120	; 0x78
 8001c02:	f000 fa77 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001c06:	22c8      	movs	r2, #200	; 0xc8
 8001c08:	2100      	movs	r1, #0
 8001c0a:	2078      	movs	r0, #120	; 0x78
 8001c0c:	f000 fa72 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	2078      	movs	r0, #120	; 0x78
 8001c16:	f000 fa6d 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2078      	movs	r0, #120	; 0x78
 8001c20:	f000 fa68 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c24:	2240      	movs	r2, #64	; 0x40
 8001c26:	2100      	movs	r1, #0
 8001c28:	2078      	movs	r0, #120	; 0x78
 8001c2a:	f000 fa63 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c2e:	2281      	movs	r2, #129	; 0x81
 8001c30:	2100      	movs	r1, #0
 8001c32:	2078      	movs	r0, #120	; 0x78
 8001c34:	f000 fa5e 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c38:	22ff      	movs	r2, #255	; 0xff
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2078      	movs	r0, #120	; 0x78
 8001c3e:	f000 fa59 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c42:	22a1      	movs	r2, #161	; 0xa1
 8001c44:	2100      	movs	r1, #0
 8001c46:	2078      	movs	r0, #120	; 0x78
 8001c48:	f000 fa54 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c4c:	22a6      	movs	r2, #166	; 0xa6
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2078      	movs	r0, #120	; 0x78
 8001c52:	f000 fa4f 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c56:	22a8      	movs	r2, #168	; 0xa8
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2078      	movs	r0, #120	; 0x78
 8001c5c:	f000 fa4a 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c60:	223f      	movs	r2, #63	; 0x3f
 8001c62:	2100      	movs	r1, #0
 8001c64:	2078      	movs	r0, #120	; 0x78
 8001c66:	f000 fa45 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c6a:	22a4      	movs	r2, #164	; 0xa4
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2078      	movs	r0, #120	; 0x78
 8001c70:	f000 fa40 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c74:	22d3      	movs	r2, #211	; 0xd3
 8001c76:	2100      	movs	r1, #0
 8001c78:	2078      	movs	r0, #120	; 0x78
 8001c7a:	f000 fa3b 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2078      	movs	r0, #120	; 0x78
 8001c84:	f000 fa36 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c88:	22d5      	movs	r2, #213	; 0xd5
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 fa31 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2078      	movs	r0, #120	; 0x78
 8001c98:	f000 fa2c 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c9c:	22d9      	movs	r2, #217	; 0xd9
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2078      	movs	r0, #120	; 0x78
 8001ca2:	f000 fa27 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001ca6:	2222      	movs	r2, #34	; 0x22
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	; 0x78
 8001cac:	f000 fa22 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001cb0:	22da      	movs	r2, #218	; 0xda
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2078      	movs	r0, #120	; 0x78
 8001cb6:	f000 fa1d 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001cba:	2212      	movs	r2, #18
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2078      	movs	r0, #120	; 0x78
 8001cc0:	f000 fa18 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001cc4:	22db      	movs	r2, #219	; 0xdb
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2078      	movs	r0, #120	; 0x78
 8001cca:	f000 fa13 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001cce:	2220      	movs	r2, #32
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2078      	movs	r0, #120	; 0x78
 8001cd4:	f000 fa0e 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cd8:	228d      	movs	r2, #141	; 0x8d
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2078      	movs	r0, #120	; 0x78
 8001cde:	f000 fa09 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001ce2:	2214      	movs	r2, #20
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2078      	movs	r0, #120	; 0x78
 8001ce8:	f000 fa04 	bl	80020f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cec:	22af      	movs	r2, #175	; 0xaf
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2078      	movs	r0, #120	; 0x78
 8001cf2:	f000 f9ff 	bl	80020f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cf6:	222e      	movs	r2, #46	; 0x2e
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2078      	movs	r0, #120	; 0x78
 8001cfc:	f000 f9fa 	bl	80020f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f000 f843 	bl	8001d8c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001d06:	f000 f813 	bl	8001d30 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <SSD1306_Init+0x184>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <SSD1306_Init+0x184>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SSD1306_Init+0x184>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000660 	.word	0x20000660
 8001d2c:	2000062c 	.word	0x2000062c

08001d30 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	71fb      	strb	r3, [r7, #7]
 8001d3a:	e01d      	b.n	8001d78 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	3b50      	subs	r3, #80	; 0x50
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	2078      	movs	r0, #120	; 0x78
 8001d48:	f000 f9d4 	bl	80020f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2078      	movs	r0, #120	; 0x78
 8001d52:	f000 f9cf 	bl	80020f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d56:	2210      	movs	r2, #16
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2078      	movs	r0, #120	; 0x78
 8001d5c:	f000 f9ca 	bl	80020f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	01db      	lsls	r3, r3, #7
 8001d64:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <SSD1306_UpdateScreen+0x58>)
 8001d66:	441a      	add	r2, r3
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	2078      	movs	r0, #120	; 0x78
 8001d6e:	f000 f95b 	bl	8002028 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	3301      	adds	r3, #1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b07      	cmp	r3, #7
 8001d7c:	d9de      	bls.n	8001d3c <SSD1306_UpdateScreen+0xc>
	}
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000022c 	.word	0x2000022c

08001d8c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <SSD1306_Fill+0x14>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <SSD1306_Fill+0x16>
 8001da0:	23ff      	movs	r3, #255	; 0xff
 8001da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001da6:	4619      	mov	r1, r3
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <SSD1306_Fill+0x2c>)
 8001daa:	f004 fd26 	bl	80067fa <memset>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000022c 	.word	0x2000022c

08001dbc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	80bb      	strh	r3, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	70fb      	strb	r3, [r7, #3]
	if (
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd2:	d848      	bhi.n	8001e66 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd8:	d845      	bhi.n	8001e66 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001dda:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <SSD1306_DrawPixel+0xb4>)
 8001ddc:	791b      	ldrb	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d006      	beq.n	8001df0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d11a      	bne.n	8001e2c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001df6:	88fa      	ldrh	r2, [r7, #6]
 8001df8:	88bb      	ldrh	r3, [r7, #4]
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	b298      	uxth	r0, r3
 8001dfe:	4603      	mov	r3, r0
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	4413      	add	r3, r2
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <SSD1306_DrawPixel+0xb8>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	b25b      	sxtb	r3, r3
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	b259      	sxtb	r1, r3
 8001e1c:	88fa      	ldrh	r2, [r7, #6]
 8001e1e:	4603      	mov	r3, r0
 8001e20:	01db      	lsls	r3, r3, #7
 8001e22:	4413      	add	r3, r2
 8001e24:	b2c9      	uxtb	r1, r1
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <SSD1306_DrawPixel+0xb8>)
 8001e28:	54d1      	strb	r1, [r2, r3]
 8001e2a:	e01d      	b.n	8001e68 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e2c:	88fa      	ldrh	r2, [r7, #6]
 8001e2e:	88bb      	ldrh	r3, [r7, #4]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	b298      	uxth	r0, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <SSD1306_DrawPixel+0xb8>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	b25a      	sxtb	r2, r3
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	b25b      	sxtb	r3, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	b25b      	sxtb	r3, r3
 8001e52:	4013      	ands	r3, r2
 8001e54:	b259      	sxtb	r1, r3
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	4603      	mov	r3, r0
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2c9      	uxtb	r1, r1
 8001e60:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <SSD1306_DrawPixel+0xb8>)
 8001e62:	54d1      	strb	r1, [r2, r3]
 8001e64:	e000      	b.n	8001e68 <SSD1306_DrawPixel+0xac>
		return;
 8001e66:	bf00      	nop
	}
}
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	2000062c 	.word	0x2000062c
 8001e74:	2000022c 	.word	0x2000022c

08001e78 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	80fb      	strh	r3, [r7, #6]
 8001e84:	4613      	mov	r3, r2
 8001e86:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <SSD1306_GotoXY+0x28>)
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <SSD1306_GotoXY+0x28>)
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	8053      	strh	r3, [r2, #2]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2000062c 	.word	0x2000062c

08001ea4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eb4:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
	if (
 8001ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8001ec2:	dc07      	bgt.n	8001ed4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001ed0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed2:	dd01      	ble.n	8001ed8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e05e      	b.n	8001f96 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e04b      	b.n	8001f76 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	3b20      	subs	r3, #32
 8001ee6:	6839      	ldr	r1, [r7, #0]
 8001ee8:	7849      	ldrb	r1, [r1, #1]
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4619      	mov	r1, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	440b      	add	r3, r1
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e030      	b.n	8001f64 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001f12:	4b23      	ldr	r3, [pc, #140]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b298      	uxth	r0, r3
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f20:	885a      	ldrh	r2, [r3, #2]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	79ba      	ldrb	r2, [r7, #6]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7ff ff45 	bl	8001dbc <SSD1306_DrawPixel>
 8001f32:	e014      	b.n	8001f5e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f34:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b298      	uxth	r0, r3
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f42:	885a      	ldrh	r2, [r3, #2]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b299      	uxth	r1, r3
 8001f4c:	79bb      	ldrb	r3, [r7, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf0c      	ite	eq
 8001f52:	2301      	moveq	r3, #1
 8001f54:	2300      	movne	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f7ff ff2f 	bl	8001dbc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d3c8      	bcc.n	8001f02 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	785b      	ldrb	r3, [r3, #1]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d3ad      	bcc.n	8001ede <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f84:	881a      	ldrh	r2, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <SSD1306_Putc+0xfc>)
 8001f92:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f94:	79fb      	ldrb	r3, [r7, #7]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000062c 	.word	0x2000062c

08001fa4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001fb2:	e012      	b.n	8001fda <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff71 	bl	8001ea4 <SSD1306_Putc>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d002      	beq.n	8001fd4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	e008      	b.n	8001fe6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e8      	bne.n	8001fb4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff feca 	bl	8001d8c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ff8:	f7ff fe9a 	bl	8001d30 <SSD1306_UpdateScreen>
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002006:	4b07      	ldr	r3, [pc, #28]	; (8002024 <ssd1306_I2C_Init+0x24>)
 8002008:	607b      	str	r3, [r7, #4]
	while(p>0)
 800200a:	e002      	b.n	8002012 <ssd1306_I2C_Init+0x12>
		p--;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f9      	bne.n	800200c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	0003d090 	.word	0x0003d090

08002028 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b0c7      	sub	sp, #284	; 0x11c
 800202c:	af02      	add	r7, sp, #8
 800202e:	4604      	mov	r4, r0
 8002030:	4608      	mov	r0, r1
 8002032:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002036:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800203a:	600a      	str	r2, [r1, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002042:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002046:	4622      	mov	r2, r4
 8002048:	701a      	strb	r2, [r3, #0]
 800204a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800204e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002052:	4602      	mov	r2, r0
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800205a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800205e:	460a      	mov	r2, r1
 8002060:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800206a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800206e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002072:	7812      	ldrb	r2, [r2, #0]
 8002074:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002076:	2300      	movs	r3, #0
 8002078:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800207c:	e015      	b.n	80020aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800207e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002082:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002086:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	441a      	add	r2, r3
 800208e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002092:	3301      	adds	r3, #1
 8002094:	7811      	ldrb	r1, [r2, #0]
 8002096:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800209a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800209e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80020a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020a4:	3301      	adds	r3, #1
 80020a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80020aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80020b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80020b8:	8812      	ldrh	r2, [r2, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d8df      	bhi.n	800207e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 80020be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b299      	uxth	r1, r3
 80020ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80020ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f107 020c 	add.w	r2, r7, #12
 80020dc:	200a      	movs	r0, #10
 80020de:	9000      	str	r0, [sp, #0]
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80020e2:	f001 fc87 	bl	80039f4 <HAL_I2C_Master_Transmit>
}
 80020e6:	bf00      	nop
 80020e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	20000660 	.word	0x20000660

080020f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	460b      	mov	r3, r1
 8002100:	71bb      	strb	r3, [r7, #6]
 8002102:	4613      	mov	r3, r2
 8002104:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	230a      	movs	r3, #10
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2302      	movs	r3, #2
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <ssd1306_I2C_Write+0x38>)
 800211e:	f001 fc69 	bl	80039f4 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000660 	.word	0x20000660

08002130 <_write>:
#include "utils.h"

int _write(int file, char * p, int len){
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)p, len, 10);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	b29a      	uxth	r2, r3
 8002140:	230a      	movs	r3, #10
 8002142:	68b9      	ldr	r1, [r7, #8]
 8002144:	4803      	ldr	r0, [pc, #12]	; (8002154 <_write+0x24>)
 8002146:	f003 fbf9 	bl	800593c <HAL_UART_Transmit>
	return len;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000079c 	.word	0x2000079c

08002158 <init_fnd>:


uint8_t _LED_0F[29];
static SPI_HandleTypeDef * m_hspi;

void init_fnd(SPI_HandleTypeDef * hspi){
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]


	_LED_0F[0] = 0xC0; //0
 8002160:	4b2f      	ldr	r3, [pc, #188]	; (8002220 <init_fnd+0xc8>)
 8002162:	22c0      	movs	r2, #192	; 0xc0
 8002164:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <init_fnd+0xc8>)
 8002168:	22f9      	movs	r2, #249	; 0xf9
 800216a:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <init_fnd+0xc8>)
 800216e:	22a4      	movs	r2, #164	; 0xa4
 8002170:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <init_fnd+0xc8>)
 8002174:	22b0      	movs	r2, #176	; 0xb0
 8002176:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8002178:	4b29      	ldr	r3, [pc, #164]	; (8002220 <init_fnd+0xc8>)
 800217a:	2299      	movs	r2, #153	; 0x99
 800217c:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 800217e:	4b28      	ldr	r3, [pc, #160]	; (8002220 <init_fnd+0xc8>)
 8002180:	2292      	movs	r2, #146	; 0x92
 8002182:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <init_fnd+0xc8>)
 8002186:	2282      	movs	r2, #130	; 0x82
 8002188:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 800218a:	4b25      	ldr	r3, [pc, #148]	; (8002220 <init_fnd+0xc8>)
 800218c:	22f8      	movs	r2, #248	; 0xf8
 800218e:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <init_fnd+0xc8>)
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <init_fnd+0xc8>)
 8002198:	2290      	movs	r2, #144	; 0x90
 800219a:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 800219c:	4b20      	ldr	r3, [pc, #128]	; (8002220 <init_fnd+0xc8>)
 800219e:	2288      	movs	r2, #136	; 0x88
 80021a0:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 80021a2:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <init_fnd+0xc8>)
 80021a4:	2283      	movs	r2, #131	; 0x83
 80021a6:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <init_fnd+0xc8>)
 80021aa:	22c6      	movs	r2, #198	; 0xc6
 80021ac:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <init_fnd+0xc8>)
 80021b0:	22a1      	movs	r2, #161	; 0xa1
 80021b2:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <init_fnd+0xc8>)
 80021b6:	2286      	movs	r2, #134	; 0x86
 80021b8:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <init_fnd+0xc8>)
 80021bc:	228e      	movs	r2, #142	; 0x8e
 80021be:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <init_fnd+0xc8>)
 80021c2:	22c2      	movs	r2, #194	; 0xc2
 80021c4:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <init_fnd+0xc8>)
 80021c8:	2289      	movs	r2, #137	; 0x89
 80021ca:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <init_fnd+0xc8>)
 80021ce:	22f9      	movs	r2, #249	; 0xf9
 80021d0:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <init_fnd+0xc8>)
 80021d4:	22f1      	movs	r2, #241	; 0xf1
 80021d6:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <init_fnd+0xc8>)
 80021da:	22c3      	movs	r2, #195	; 0xc3
 80021dc:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <init_fnd+0xc8>)
 80021e0:	22a9      	movs	r2, #169	; 0xa9
 80021e2:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 80021e4:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <init_fnd+0xc8>)
 80021e6:	22c0      	movs	r2, #192	; 0xc0
 80021e8:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <init_fnd+0xc8>)
 80021ec:	228c      	movs	r2, #140	; 0x8c
 80021ee:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <init_fnd+0xc8>)
 80021f2:	2298      	movs	r2, #152	; 0x98
 80021f4:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <init_fnd+0xc8>)
 80021f8:	2292      	movs	r2, #146	; 0x92
 80021fa:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <init_fnd+0xc8>)
 80021fe:	22c1      	movs	r2, #193	; 0xc1
 8002200:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <init_fnd+0xc8>)
 8002204:	2291      	movs	r2, #145	; 0x91
 8002206:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <init_fnd+0xc8>)
 800220a:	22fe      	movs	r2, #254	; 0xfe
 800220c:	771a      	strb	r2, [r3, #28]

	m_hspi = hspi;
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <init_fnd+0xcc>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000634 	.word	0x20000634
 8002224:	20000654 	.word	0x20000654

08002228 <send>:
void send(uint8_t X){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(m_hspi, &X, 1, 100);
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <send+0x20>)
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	1df9      	adds	r1, r7, #7
 8002238:	2364      	movs	r3, #100	; 0x64
 800223a:	2201      	movs	r2, #1
 800223c:	f002 fcf4 	bl	8004c28 <HAL_SPI_Transmit>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000654 	.word	0x20000654

0800224c <send_port>:



void send_port(uint8_t X, uint8_t port)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	460a      	mov	r2, r1
 8002256:	71fb      	strb	r3, [r7, #7]
 8002258:	4613      	mov	r3, r2
 800225a:	71bb      	strb	r3, [r7, #6]
  send(X);
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ffe2 	bl	8002228 <send>
  send(port);
 8002264:	79bb      	ldrb	r3, [r7, #6]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ffde 	bl	8002228 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002272:	4806      	ldr	r0, [pc, #24]	; (800228c <send_port+0x40>)
 8002274:	f001 fa3f 	bl	80036f6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800227e:	4803      	ldr	r0, [pc, #12]	; (800228c <send_port+0x40>)
 8002280:	f001 fa39 	bl	80036f6 <HAL_GPIO_WritePin>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010c00 	.word	0x40010c00

08002290 <digit4_temper>:
    if(showZero|n>999)send_port(_LED_0F[n4], 0b1000);
 }
}
static uint8_t m_tempercount  =0 ;
void digit4_temper(int temper)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  int n1, n2, n3, n4;

  n1 = (int)  temper % 10;
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4b58      	ldr	r3, [pc, #352]	; (80023fc <digit4_temper+0x16c>)
 800229c:	fb83 1302 	smull	r1, r3, r3, r2
 80022a0:	1099      	asrs	r1, r3, #2
 80022a2:	17d3      	asrs	r3, r2, #31
 80022a4:	1ac9      	subs	r1, r1, r3
 80022a6:	460b      	mov	r3, r1
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
  n2 = (int) ((temper % 100))/10;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	4b52      	ldr	r3, [pc, #328]	; (8002400 <digit4_temper+0x170>)
 80022b6:	fb83 1302 	smull	r1, r3, r3, r2
 80022ba:	1159      	asrs	r1, r3, #5
 80022bc:	17d3      	asrs	r3, r2, #31
 80022be:	1acb      	subs	r3, r1, r3
 80022c0:	2164      	movs	r1, #100	; 0x64
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	4a4c      	ldr	r2, [pc, #304]	; (80023fc <digit4_temper+0x16c>)
 80022ca:	fb82 1203 	smull	r1, r2, r2, r3
 80022ce:	1092      	asrs	r2, r2, #2
 80022d0:	17db      	asrs	r3, r3, #31
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	613b      	str	r3, [r7, #16]
  n3 = (int) ((temper % 1000)) / 100;
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	4b4a      	ldr	r3, [pc, #296]	; (8002404 <digit4_temper+0x174>)
 80022da:	fb83 1302 	smull	r1, r3, r3, r2
 80022de:	1199      	asrs	r1, r3, #6
 80022e0:	17d3      	asrs	r3, r2, #31
 80022e2:	1acb      	subs	r3, r1, r3
 80022e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	4a44      	ldr	r2, [pc, #272]	; (8002400 <digit4_temper+0x170>)
 80022f0:	fb82 1203 	smull	r1, r2, r2, r3
 80022f4:	1152      	asrs	r2, r2, #5
 80022f6:	17db      	asrs	r3, r3, #31
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  n4 = (int) ((temper % 10000)) / 1000;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4b42      	ldr	r3, [pc, #264]	; (8002408 <digit4_temper+0x178>)
 8002300:	fb83 1302 	smull	r1, r3, r3, r2
 8002304:	1319      	asrs	r1, r3, #12
 8002306:	17d3      	asrs	r3, r2, #31
 8002308:	1acb      	subs	r3, r1, r3
 800230a:	f242 7110 	movw	r1, #10000	; 0x2710
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <digit4_temper+0x174>)
 8002316:	fb82 1203 	smull	r1, r2, r2, r3
 800231a:	1192      	asrs	r2, r2, #6
 800231c:	17db      	asrs	r3, r3, #31
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	60bb      	str	r3, [r7, #8]

 switch(m_tempercount){
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <digit4_temper+0x17c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b03      	cmp	r3, #3
 8002328:	d83b      	bhi.n	80023a2 <digit4_temper+0x112>
 800232a:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <digit4_temper+0xa0>)
 800232c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002330:	08002341 	.word	0x08002341
 8002334:	08002353 	.word	0x08002353
 8002338:	0800236b 	.word	0x0800236b
 800233c:	08002383 	.word	0x08002383
 	 case 0: send_port(_LED_0F[n1], 0b0001);
 8002340:	4a33      	ldr	r2, [pc, #204]	; (8002410 <digit4_temper+0x180>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	4413      	add	r3, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ff7e 	bl	800224c <send_port>
 	 	 break;
 8002350:	e027      	b.n	80023a2 <digit4_temper+0x112>
 	 case 1: send_port(_LED_0F[n2] & 0x7F , 0b0010);
 8002352:	4a2f      	ldr	r2, [pc, #188]	; (8002410 <digit4_temper+0x180>)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2102      	movs	r1, #2
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff72 	bl	800224c <send_port>
 	 	 break;
 8002368:	e01b      	b.n	80023a2 <digit4_temper+0x112>
 	 case 2: if(temper>99)send_port(_LED_0F[n3], 0b0100);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b63      	cmp	r3, #99	; 0x63
 800236e:	dd15      	ble.n	800239c <digit4_temper+0x10c>
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <digit4_temper+0x180>)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4413      	add	r3, r2
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2104      	movs	r1, #4
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff66 	bl	800224c <send_port>
 	 	 break;
 8002380:	e00c      	b.n	800239c <digit4_temper+0x10c>
 	 case 3: if(temper>999)send_port(_LED_0F[n4], 0b1000);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002388:	db0a      	blt.n	80023a0 <digit4_temper+0x110>
 800238a:	4a21      	ldr	r2, [pc, #132]	; (8002410 <digit4_temper+0x180>)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2108      	movs	r1, #8
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff59 	bl	800224c <send_port>
 	 	 break;
 800239a:	e001      	b.n	80023a0 <digit4_temper+0x110>
 	 	 break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <digit4_temper+0x112>
 	 	 break;
 80023a0:	bf00      	nop
 }
 m_tempercount++;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <digit4_temper+0x17c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <digit4_temper+0x17c>)
 80023ac:	701a      	strb	r2, [r3, #0]

 if(temper > 999 && m_tempercount>=4){
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b4:	db07      	blt.n	80023c6 <digit4_temper+0x136>
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <digit4_temper+0x17c>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d903      	bls.n	80023c6 <digit4_temper+0x136>
	 m_tempercount =0;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <digit4_temper+0x17c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
 80023c4:	e015      	b.n	80023f2 <digit4_temper+0x162>
 }else if(temper > 99 && m_tempercount>=3){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b63      	cmp	r3, #99	; 0x63
 80023ca:	dd07      	ble.n	80023dc <digit4_temper+0x14c>
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <digit4_temper+0x17c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d903      	bls.n	80023dc <digit4_temper+0x14c>
	 m_tempercount =0;
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <digit4_temper+0x17c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e00a      	b.n	80023f2 <digit4_temper+0x162>
 }else if(temper <= 99 && m_tempercount>=2){
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b63      	cmp	r3, #99	; 0x63
 80023e0:	dc07      	bgt.n	80023f2 <digit4_temper+0x162>
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <digit4_temper+0x17c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d903      	bls.n	80023f2 <digit4_temper+0x162>
	 m_tempercount =0;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <digit4_temper+0x17c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
 }
}
 80023f0:	e7ff      	b.n	80023f2 <digit4_temper+0x162>
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	66666667 	.word	0x66666667
 8002400:	51eb851f 	.word	0x51eb851f
 8002404:	10624dd3 	.word	0x10624dd3
 8002408:	68db8bad 	.word	0x68db8bad
 800240c:	20000658 	.word	0x20000658
 8002410:	20000634 	.word	0x20000634

08002414 <heaterControll>:

void initHeater(){
	m_state = 0;
	heaterOnOff(OFF_t);
}
void heaterControll(float temper){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

	if(m_state){
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <heaterControll+0x4c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00c      	beq.n	800243e <heaterControll+0x2a>
		if((int)temper >= (m_fixed_temper - GOING_UP_GAP)){
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7fe fcf1 	bl	8000e0c <__aeabi_f2iz>
 800242a:	4602      	mov	r2, r0
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <heaterControll+0x50>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3b03      	subs	r3, #3
 8002432:	429a      	cmp	r2, r3
 8002434:	db0f      	blt.n	8002456 <heaterControll+0x42>
				heaterOnOff(OFF_t);
 8002436:	2000      	movs	r0, #0
 8002438:	f000 f85e 	bl	80024f8 <heaterOnOff>
		if((int)temper < (m_fixed_temper - GOING_UP_GAP)){
			heaterOnOff(ON_t);
		}
	}

}
 800243c:	e00b      	b.n	8002456 <heaterControll+0x42>
		if((int)temper < (m_fixed_temper - GOING_UP_GAP)){
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7fe fce4 	bl	8000e0c <__aeabi_f2iz>
 8002444:	4602      	mov	r2, r0
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <heaterControll+0x50>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b03      	subs	r3, #3
 800244c:	429a      	cmp	r2, r3
 800244e:	da02      	bge.n	8002456 <heaterControll+0x42>
			heaterOnOff(ON_t);
 8002450:	2001      	movs	r0, #1
 8002452:	f000 f851 	bl	80024f8 <heaterOnOff>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000659 	.word	0x20000659
 8002464:	20000008 	.word	0x20000008

08002468 <temper_up>:


void temper_up(){
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	m_desired_temper++;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <temper_up+0x2c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <temper_up+0x2c>)
 8002474:	6013      	str	r3, [r2, #0]
	if(m_desired_temper>99){
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <temper_up+0x2c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b63      	cmp	r3, #99	; 0x63
 800247c:	dd02      	ble.n	8002484 <temper_up+0x1c>
		m_desired_temper = 0;
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <temper_up+0x2c>)
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <temper_up+0x2c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff f90f 	bl	80016ac <printTemper>
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	2000000c 	.word	0x2000000c

08002498 <temper_down>:

void temper_down(){
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	m_desired_temper--;
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <temper_down+0x2c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <temper_down+0x2c>)
 80024a4:	6013      	str	r3, [r2, #0]
	if(m_desired_temper<0){
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <temper_down+0x2c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da02      	bge.n	80024b4 <temper_down+0x1c>
		m_desired_temper = 99;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <temper_down+0x2c>)
 80024b0:	2263      	movs	r2, #99	; 0x63
 80024b2:	601a      	str	r2, [r3, #0]
	}
	printTemper(m_desired_temper);
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <temper_down+0x2c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff f8f7 	bl	80016ac <printTemper>
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c

080024c8 <setFixedTemper>:


void setFixedTemper(){
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
	m_fixed_temper = m_desired_temper;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <setFixedTemper+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a03      	ldr	r2, [pc, #12]	; (80024e0 <setFixedTemper+0x18>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	20000008 	.word	0x20000008

080024e4 <getFixedTemper>:

int getFixedTemper(void){
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

	return m_desired_temper;
 80024e8:	4b02      	ldr	r3, [pc, #8]	; (80024f4 <getFixedTemper+0x10>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <heaterOnOff>:
void heaterOnOff(uint8_t onOff){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin,onOff);
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	461a      	mov	r2, r3
 8002506:	2120      	movs	r1, #32
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <heaterOnOff+0x44>)
 800250a:	f001 f8f4 	bl	80036f6 <HAL_GPIO_WritePin>
	m_state = onOff;
 800250e:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <heaterOnOff+0x48>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	7013      	strb	r3, [r2, #0]
	if(onOff == ON_t){
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d106      	bne.n	8002528 <heaterOnOff+0x30>
		led2OnOff(ON_t);
 800251a:	2001      	movs	r0, #1
 800251c:	f7fe ffbc 	bl	8001498 <led2OnOff>
		printHeaterState(ON_t);
 8002520:	2001      	movs	r0, #1
 8002522:	f7ff f8ed 	bl	8001700 <printHeaterState>
	}else{
		led2OnOff(OFF_t);
		printHeaterState(OFF_t);
	}
}
 8002526:	e005      	b.n	8002534 <heaterOnOff+0x3c>
		led2OnOff(OFF_t);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe ffb5 	bl	8001498 <led2OnOff>
		printHeaterState(OFF_t);
 800252e:	2000      	movs	r0, #0
 8002530:	f7ff f8e6 	bl	8001700 <printHeaterState>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40010c00 	.word	0x40010c00
 8002540:	20000659 	.word	0x20000659

08002544 <getHeaterState>:

uint8_t getHeaterState(){
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	return m_state;
 8002548:	4b02      	ldr	r3, [pc, #8]	; (8002554 <getHeaterState+0x10>)
 800254a:	781b      	ldrb	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000659 	.word	0x20000659

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float temper = 0.0;
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002564:	f000 fd98 	bl	8003098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002568:	f000 f85c 	bl	8002624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256c:	f000 f9c6 	bl	80028fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002570:	f000 f99a 	bl	80028a8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002574:	f000 f900 	bl	8002778 <MX_TIM2_Init>
  MX_I2C2_Init();
 8002578:	f000 f89a 	bl	80026b0 <MX_I2C2_Init>
  MX_SPI2_Init();
 800257c:	f000 f8c6 	bl	800270c <MX_SPI2_Init>
  MX_TIM3_Init();
 8002580:	f000 f946 	bl	8002810 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //Ds18b20_Init();
  Ds18b20_Init_Simple();
 8002584:	f7fe fcc6 	bl	8000f14 <Ds18b20_Init_Simple>

  init_fnd(&hspi2);
 8002588:	4822      	ldr	r0, [pc, #136]	; (8002614 <main+0xbc>)
 800258a:	f7ff fde5 	bl	8002158 <init_fnd>
  HAL_TIM_Base_Start_IT(&htim3);
 800258e:	4822      	ldr	r0, [pc, #136]	; (8002618 <main+0xc0>)
 8002590:	f002 fdce 	bl	8005130 <HAL_TIM_Base_Start_IT>
  SSD1306_Init();
 8002594:	f7ff fb08 	bl	8001ba8 <SSD1306_Init>
  opening();
 8002598:	f7fe ff9a 	bl	80014d0 <opening>
  static int m_first = 0;

  while (1)
  {

	  checkButton();
 800259c:	f7fe fc5c 	bl	8000e58 <checkButton>
	  if(m_count > 100 || !m_first){
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <main+0xc4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	dc03      	bgt.n	80025b0 <main+0x58>
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <main+0xc8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d127      	bne.n	8002600 <main+0xa8>
		  if(!isConverting()){
 80025b0:	f7fe fca6 	bl	8000f00 <isConverting>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <main+0x66>
			  StartConverting();
 80025ba:	f7fe fcef 	bl	8000f9c <StartConverting>
		  }
		  checkConverting();
 80025be:	f7fe fd03 	bl	8000fc8 <checkConverting>
		  if(!isConverting()){
 80025c2:	f7fe fc9d 	bl	8000f00 <isConverting>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d119      	bne.n	8002600 <main+0xa8>
			  temper = getTemper();
 80025cc:	f7fe fd18 	bl	8001000 <getTemper>
 80025d0:	6078      	str	r0, [r7, #4]
			  if(getSwState() == ON_t){
 80025d2:	f7fe fc71 	bl	8000eb8 <getSwState>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d103      	bne.n	80025e4 <main+0x8c>
				  heaterControll(temper);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff19 	bl	8002414 <heaterControll>
 80025e2:	e007      	b.n	80025f4 <main+0x9c>
			  }else{
				  if(getHeaterState() == ON_t){
 80025e4:	f7ff ffae 	bl	8002544 <getHeaterState>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <main+0x9c>
					  heaterOnOff(OFF_t);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff ff82 	bl	80024f8 <heaterOnOff>
				  }
			  }

			  m_count = 0;
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <main+0xc4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
			  m_first = 1;
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <main+0xc8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
		  }
	  }
	  m_count++;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <main+0xc4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a05      	ldr	r2, [pc, #20]	; (800261c <main+0xc4>)
 8002608:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10);
 800260a:	200a      	movs	r0, #10
 800260c:	f000 fda6 	bl	800315c <HAL_Delay>
	  checkButton();
 8002610:	e7c4      	b.n	800259c <main+0x44>
 8002612:	bf00      	nop
 8002614:	200006b4 	.word	0x200006b4
 8002618:	20000754 	.word	0x20000754
 800261c:	200007e4 	.word	0x200007e4
 8002620:	200007e8 	.word	0x200007e8

08002624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	; 0x40
 8002628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800262a:	f107 0318 	add.w	r3, r7, #24
 800262e:	2228      	movs	r2, #40	; 0x28
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f004 f8e1 	bl	80067fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002646:	2301      	movs	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800264a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002654:	2301      	movs	r3, #1
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800265c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002662:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fe47 	bl	8004300 <HAL_RCC_OscConfig>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002678:	f000 fa24 	bl	8002ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800267c:	230f      	movs	r3, #15
 800267e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002680:	2302      	movs	r3, #2
 8002682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800268c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2102      	movs	r1, #2
 8002696:	4618      	mov	r0, r3
 8002698:	f002 f8b4 	bl	8004804 <HAL_RCC_ClockConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80026a2:	f000 fa0f 	bl	8002ac4 <Error_Handler>
  }
}
 80026a6:	bf00      	nop
 80026a8:	3740      	adds	r7, #64	; 0x40
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MX_I2C2_Init+0x50>)
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <MX_I2C2_Init+0x54>)
 80026b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_I2C2_Init+0x50>)
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <MX_I2C2_Init+0x58>)
 80026be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_I2C2_Init+0x50>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_I2C2_Init+0x50>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_I2C2_Init+0x50>)
 80026ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <MX_I2C2_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_I2C2_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <MX_I2C2_Init+0x50>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_I2C2_Init+0x50>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80026ec:	4804      	ldr	r0, [pc, #16]	; (8002700 <MX_I2C2_Init+0x50>)
 80026ee:	f001 f83d 	bl	800376c <HAL_I2C_Init>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80026f8:	f000 f9e4 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80026fc:	bf00      	nop
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000660 	.word	0x20000660
 8002704:	40005800 	.word	0x40005800
 8002708:	00061a80 	.word	0x00061a80

0800270c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <MX_SPI2_Init+0x64>)
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <MX_SPI2_Init+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <MX_SPI2_Init+0x64>)
 8002718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800271c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <MX_SPI2_Init+0x64>)
 8002720:	2200      	movs	r2, #0
 8002722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_SPI2_Init+0x64>)
 8002726:	2200      	movs	r2, #0
 8002728:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_SPI2_Init+0x64>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MX_SPI2_Init+0x64>)
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_SPI2_Init+0x64>)
 8002738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_SPI2_Init+0x64>)
 8002740:	2220      	movs	r2, #32
 8002742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_SPI2_Init+0x64>)
 8002746:	2200      	movs	r2, #0
 8002748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_SPI2_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002750:	4b07      	ldr	r3, [pc, #28]	; (8002770 <MX_SPI2_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_SPI2_Init+0x64>)
 8002758:	220a      	movs	r2, #10
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800275c:	4804      	ldr	r0, [pc, #16]	; (8002770 <MX_SPI2_Init+0x64>)
 800275e:	f002 f9df 	bl	8004b20 <HAL_SPI_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002768:	f000 f9ac 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200006b4 	.word	0x200006b4
 8002774:	40003800 	.word	0x40003800

08002778 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	605a      	str	r2, [r3, #4]
 8002788:	609a      	str	r2, [r3, #8]
 800278a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800278c:	463b      	mov	r3, r7
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002794:	4b1d      	ldr	r3, [pc, #116]	; (800280c <MX_TIM2_Init+0x94>)
 8002796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800279a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_TIM2_Init+0x94>)
 800279e:	2247      	movs	r2, #71	; 0x47
 80027a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_TIM2_Init+0x94>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_TIM2_Init+0x94>)
 80027aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_TIM2_Init+0x94>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_TIM2_Init+0x94>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027bc:	4813      	ldr	r0, [pc, #76]	; (800280c <MX_TIM2_Init+0x94>)
 80027be:	f002 fc1d 	bl	8004ffc <HAL_TIM_Base_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027c8:	f000 f97c 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	4619      	mov	r1, r3
 80027d8:	480c      	ldr	r0, [pc, #48]	; (800280c <MX_TIM2_Init+0x94>)
 80027da:	f002 fe03 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027e4:	f000 f96e 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027f0:	463b      	mov	r3, r7
 80027f2:	4619      	mov	r1, r3
 80027f4:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_TIM2_Init+0x94>)
 80027f6:	f002 ffe1 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002800:	f000 f960 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	2000070c 	.word	0x2000070c

08002810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]
 8002822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	463b      	mov	r3, r7
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800282c:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <MX_TIM3_Init+0x90>)
 800282e:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <MX_TIM3_Init+0x94>)
 8002830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <MX_TIM3_Init+0x90>)
 8002834:	2247      	movs	r2, #71	; 0x47
 8002836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <MX_TIM3_Init+0x90>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <MX_TIM3_Init+0x90>)
 8002840:	2231      	movs	r2, #49	; 0x31
 8002842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <MX_TIM3_Init+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <MX_TIM3_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002850:	4813      	ldr	r0, [pc, #76]	; (80028a0 <MX_TIM3_Init+0x90>)
 8002852:	f002 fbd3 	bl	8004ffc <HAL_TIM_Base_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800285c:	f000 f932 	bl	8002ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	4619      	mov	r1, r3
 800286c:	480c      	ldr	r0, [pc, #48]	; (80028a0 <MX_TIM3_Init+0x90>)
 800286e:	f002 fdb9 	bl	80053e4 <HAL_TIM_ConfigClockSource>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002878:	f000 f924 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002884:	463b      	mov	r3, r7
 8002886:	4619      	mov	r1, r3
 8002888:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_TIM3_Init+0x90>)
 800288a:	f002 ff97 	bl	80057bc <HAL_TIMEx_MasterConfigSynchronization>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002894:	f000 f916 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000754 	.word	0x20000754
 80028a4:	40000400 	.word	0x40000400

080028a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <MX_USART1_UART_Init+0x50>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <MX_USART1_UART_Init+0x4c>)
 80028e0:	f002 ffdc 	bl	800589c <HAL_UART_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028ea:	f000 f8eb 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	2000079c 	.word	0x2000079c
 80028f8:	40013800 	.word	0x40013800

080028fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a66      	ldr	r2, [pc, #408]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002916:	f043 0310 	orr.w	r3, r3, #16
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a60      	ldr	r2, [pc, #384]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800292e:	f043 0320 	orr.w	r3, r3, #32
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b5b      	ldr	r3, [pc, #364]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a5a      	ldr	r2, [pc, #360]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 800295e:	f043 0308 	orr.w	r3, r3, #8
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <MX_GPIO_Init+0x1b4>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002976:	484f      	ldr	r0, [pc, #316]	; (8002ab4 <MX_GPIO_Init+0x1b8>)
 8002978:	f000 febd 	bl	80036f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	2108      	movs	r1, #8
 8002980:	484d      	ldr	r0, [pc, #308]	; (8002ab8 <MX_GPIO_Init+0x1bc>)
 8002982:	f000 feb8 	bl	80036f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|PB6_LED1_Pin|PB7_LED2_Pin, GPIO_PIN_SET);
 8002986:	2201      	movs	r2, #1
 8002988:	f244 01c0 	movw	r1, #16576	; 0x40c0
 800298c:	484b      	ldr	r0, [pc, #300]	; (8002abc <MX_GPIO_Init+0x1c0>)
 800298e:	f000 feb2 	bl	80036f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8002992:	2200      	movs	r2, #0
 8002994:	2120      	movs	r1, #32
 8002996:	4849      	ldr	r0, [pc, #292]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002998:	f000 fead 	bl	80036f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800299c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a2:	2301      	movs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	4619      	mov	r1, r3
 80029b4:	483f      	ldr	r0, [pc, #252]	; (8002ab4 <MX_GPIO_Init+0x1b8>)
 80029b6:	f000 fd03 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80029ba:	2301      	movs	r3, #1
 80029bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4619      	mov	r1, r3
 80029cc:	483a      	ldr	r0, [pc, #232]	; (8002ab8 <MX_GPIO_Init+0x1bc>)
 80029ce:	f000 fcf7 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 80029d2:	2308      	movs	r3, #8
 80029d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d6:	2301      	movs	r3, #1
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4619      	mov	r1, r3
 80029e8:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <MX_GPIO_Init+0x1bc>)
 80029ea:	f000 fce9 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_FIX_Pin PB2_TEMP_SET_DOWN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_FIX_Pin|PB2_TEMP_SET_DOWN_Pin;
 80029ee:	2307      	movs	r3, #7
 80029f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <MX_GPIO_Init+0x1c4>)
 80029f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029f6:	2301      	movs	r3, #1
 80029f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 0310 	add.w	r3, r7, #16
 80029fe:	4619      	mov	r1, r3
 8002a00:	482e      	ldr	r0, [pc, #184]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002a02:	f000 fcdd 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12_START_SW_PIN_Pin */
  GPIO_InitStruct.Pin = PB12_START_SW_PIN_Pin;
 8002a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB12_START_SW_PIN_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4828      	ldr	r0, [pc, #160]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002a1c:	f000 fcd0 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin PB7_LED2_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|PB7_LED2_Pin;
 8002a20:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0310 	add.w	r3, r7, #16
 8002a36:	4619      	mov	r1, r3
 8002a38:	4820      	ldr	r0, [pc, #128]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002a3a:	f000 fcc1 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a46:	2302      	movs	r3, #2
 8002a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4619      	mov	r1, r3
 8002a54:	4819      	ldr	r0, [pc, #100]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002a56:	f000 fcb3 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8002a6a:	f107 0310 	add.w	r3, r7, #16
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4812      	ldr	r0, [pc, #72]	; (8002abc <MX_GPIO_Init+0x1c0>)
 8002a72:	f000 fca5 	bl	80033c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2109      	movs	r1, #9
 8002a7a:	2006      	movs	r0, #6
 8002a7c:	f000 fc69 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a80:	2006      	movs	r0, #6
 8002a82:	f000 fc82 	bl	800338a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2109      	movs	r1, #9
 8002a8a:	2007      	movs	r0, #7
 8002a8c:	f000 fc61 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a90:	2007      	movs	r0, #7
 8002a92:	f000 fc7a 	bl	800338a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2109      	movs	r1, #9
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f000 fc59 	bl	8003352 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002aa0:	2008      	movs	r0, #8
 8002aa2:	f000 fc72 	bl	800338a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aa6:	bf00      	nop
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40011000 	.word	0x40011000
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	40010c00 	.word	0x40010c00
 8002ac0:	10210000 	.word	0x10210000

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>
	...

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_MspInit+0x5c>)
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	4a14      	ldr	r2, [pc, #80]	; (8002b2c <HAL_MspInit+0x5c>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6193      	str	r3, [r2, #24]
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_MspInit+0x5c>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <HAL_MspInit+0x5c>)
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_MspInit+0x5c>)
 8002af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af8:	61d3      	str	r3, [r2, #28]
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <HAL_MspInit+0x5c>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <HAL_MspInit+0x60>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_MspInit+0x60>)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b22:	bf00      	nop
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40010000 	.word	0x40010000

08002b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <HAL_I2C_MspInit+0x74>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d124      	bne.n	8002b9e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a14      	ldr	r2, [pc, #80]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b72:	2312      	movs	r3, #18
 8002b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0310 	add.w	r3, r7, #16
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480b      	ldr	r0, [pc, #44]	; (8002bb0 <HAL_I2C_MspInit+0x7c>)
 8002b82:	f000 fc1d 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b90:	61d3      	str	r3, [r2, #28]
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_I2C_MspInit+0x78>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b9e:	bf00      	nop
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40005800 	.word	0x40005800
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40010c00 	.word	0x40010c00

08002bb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b088      	sub	sp, #32
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0310 	add.w	r3, r7, #16
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_SPI_MspInit+0x74>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d124      	bne.n	8002c1e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bde:	61d3      	str	r3, [r2, #28]
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002bf2:	f043 0308 	orr.w	r3, r3, #8
 8002bf6:	6193      	str	r3, [r2, #24]
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <HAL_SPI_MspInit+0x78>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_DIO_Pin;
 8002c04:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0310 	add.w	r3, r7, #16
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <HAL_SPI_MspInit+0x7c>)
 8002c1a:	f000 fbd1 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40003800 	.word	0x40003800
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40010c00 	.word	0x40010c00

08002c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d114      	bne.n	8002c70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a18      	ldr	r2, [pc, #96]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2100      	movs	r1, #0
 8002c62:	201c      	movs	r0, #28
 8002c64:	f000 fb75 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c68:	201c      	movs	r0, #28
 8002c6a:	f000 fb8e 	bl	800338a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c6e:	e018      	b.n	8002ca2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0e      	ldr	r2, [pc, #56]	; (8002cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d113      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_TIM_Base_MspInit+0x78>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	210a      	movs	r1, #10
 8002c96:	201d      	movs	r0, #29
 8002c98:	f000 fb5b 	bl	8003352 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c9c:	201d      	movs	r0, #29
 8002c9e:	f000 fb74 	bl	800338a <HAL_NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40000400 	.word	0x40000400

08002cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_UART_MspInit+0x8c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d131      	bne.n	8002d38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cde:	6193      	str	r3, [r2, #24]
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a14      	ldr	r2, [pc, #80]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_UART_MspInit+0x90>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	4619      	mov	r1, r3
 8002d18:	480b      	ldr	r0, [pc, #44]	; (8002d48 <HAL_UART_MspInit+0x94>)
 8002d1a:	f000 fb51 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f107 0310 	add.w	r3, r7, #16
 8002d30:	4619      	mov	r1, r3
 8002d32:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_UART_MspInit+0x94>)
 8002d34:	f000 fb44 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d38:	bf00      	nop
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40010800 	.word	0x40010800

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d50:	e7fe      	b.n	8002d50 <NMI_Handler+0x4>

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d92:	f000 f9c7 	bl	8003124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 8002da0:	2001      	movs	r0, #1
 8002da2:	f000 fcc1 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if((HAL_GetTick() - m_button_before_time)>BUTTON_GAP){
 8002da6:	f000 f9cf 	bl	8003148 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <EXTI0_IRQHandler+0x30>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002db6:	d902      	bls.n	8002dbe <EXTI0_IRQHandler+0x22>
	  g_f_sw_up = 1;
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <EXTI0_IRQHandler+0x34>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
  }
  m_button_before_time = HAL_GetTick();
 8002dbe:	f000 f9c3 	bl	8003148 <HAL_GetTick>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	4a01      	ldr	r2, [pc, #4]	; (8002dcc <EXTI0_IRQHandler+0x30>)
 8002dc6:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200007ec 	.word	0x200007ec
 8002dd0:	2000065a 	.word	0x2000065a

08002dd4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_TEMP_SET_FIX_Pin);
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f000 fca5 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  if((HAL_GetTick() - m_button_before_time)>BUTTON_GAP){
 8002dde:	f000 f9b3 	bl	8003148 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <EXTI1_IRQHandler+0x30>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002dee:	d902      	bls.n	8002df6 <EXTI1_IRQHandler+0x22>
	  g_f_sw_fix = 1;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <EXTI1_IRQHandler+0x34>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
  }
  m_button_before_time = HAL_GetTick();
 8002df6:	f000 f9a7 	bl	8003148 <HAL_GetTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	4a01      	ldr	r2, [pc, #4]	; (8002e04 <EXTI1_IRQHandler+0x30>)
 8002dfe:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	200007ec 	.word	0x200007ec
 8002e08:	2000065c 	.word	0x2000065c

08002e0c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_DOWN_Pin);
 8002e10:	2004      	movs	r0, #4
 8002e12:	f000 fc89 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if((HAL_GetTick() - m_button_before_time)>BUTTON_GAP){
 8002e16:	f000 f997 	bl	8003148 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <EXTI2_IRQHandler+0x30>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002e26:	d902      	bls.n	8002e2e <EXTI2_IRQHandler+0x22>
	  g_f_sw_down = 1;
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <EXTI2_IRQHandler+0x34>)
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
  }
  m_button_before_time = HAL_GetTick();
 8002e2e:	f000 f98b 	bl	8003148 <HAL_GetTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a01      	ldr	r2, [pc, #4]	; (8002e3c <EXTI2_IRQHandler+0x30>)
 8002e36:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI2_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200007ec 	.word	0x200007ec
 8002e40:	2000065b 	.word	0x2000065b

08002e44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <TIM2_IRQHandler+0x10>)
 8002e4a:	f002 f9c3 	bl	80051d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000070c 	.word	0x2000070c

08002e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if(m_power_sw_timer > POWER_SW_CHECK_TIME){
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <TIM3_IRQHandler+0x90>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d90e      	bls.n	8002e82 <TIM3_IRQHandler+0x2a>
		if(getSwState() == ON_t){
 8002e64:	f7fe f828 	bl	8000eb8 <getSwState>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d103      	bne.n	8002e76 <TIM3_IRQHandler+0x1e>
			led1OnOff(ON_t);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fe faf6 	bl	8001460 <led1OnOff>
 8002e74:	e002      	b.n	8002e7c <TIM3_IRQHandler+0x24>
		}else{
			led1OnOff(OFF_t);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe faf2 	bl	8001460 <led1OnOff>
		}
		m_power_sw_timer = 0;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <TIM3_IRQHandler+0x90>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
	}

	if( m_toggle_timer > TOGGLE_TIME){
 8002e82:	4b1a      	ldr	r3, [pc, #104]	; (8002eec <TIM3_IRQHandler+0x94>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d904      	bls.n	8002e98 <TIM3_IRQHandler+0x40>
		toggleScreen();
 8002e8e:	f7fe fb29 	bl	80014e4 <toggleScreen>
		m_toggle_timer = 0;
 8002e92:	4b16      	ldr	r3, [pc, #88]	; (8002eec <TIM3_IRQHandler+0x94>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
	}

	m_toggle_timer++;
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <TIM3_IRQHandler+0x94>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <TIM3_IRQHandler+0x94>)
 8002ea0:	6013      	str	r3, [r2, #0]
	m_power_sw_timer++;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <TIM3_IRQHandler+0x90>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	4a0f      	ldr	r2, [pc, #60]	; (8002ee8 <TIM3_IRQHandler+0x90>)
 8002eaa:	6013      	str	r3, [r2, #0]
	if(isTemperSensorInit() && !isBusy()){
 8002eac:	f7fe f816 	bl	8000edc <isTemperSensorInit>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d013      	beq.n	8002ede <TIM3_IRQHandler+0x86>
 8002eb6:	f7fe f81b 	bl	8000ef0 <isBusy>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10e      	bne.n	8002ede <TIM3_IRQHandler+0x86>
		digit4_temper(getCurrentTemper()*10);
 8002ec0:	f7fe fac4 	bl	800144c <getCurrentTemper>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <TIM3_IRQHandler+0x98>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd f949 	bl	8000160 <__aeabi_fmul>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fd ff9b 	bl	8000e0c <__aeabi_f2iz>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff f9d9 	bl	8002290 <digit4_temper>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ede:	4805      	ldr	r0, [pc, #20]	; (8002ef4 <TIM3_IRQHandler+0x9c>)
 8002ee0:	f002 f978 	bl	80051d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200007f0 	.word	0x200007f0
 8002eec:	200007f4 	.word	0x200007f4
 8002ef0:	41200000 	.word	0x41200000
 8002ef4:	20000754 	.word	0x20000754

08002ef8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  return 1;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <_kill>:

int _kill(int pid, int sig)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f10:	f003 fcc6 	bl	80068a0 <__errno>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2216      	movs	r2, #22
 8002f18:	601a      	str	r2, [r3, #0]
  return -1;
 8002f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <_exit>:

void _exit (int status)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7ff ffe7 	bl	8002f06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f38:	e7fe      	b.n	8002f38 <_exit+0x12>

08002f3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e00a      	b.n	8002f62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f4c:	f3af 8000 	nop.w
 8002f50:	4601      	mov	r1, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	60ba      	str	r2, [r7, #8]
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	dbf0      	blt.n	8002f4c <_read+0x12>
  }

  return len;
 8002f6a:	687b      	ldr	r3, [r7, #4]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f9a:	605a      	str	r2, [r3, #4]
  return 0;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <_isatty>:

int _isatty(int file)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fb0:	2301      	movs	r3, #1
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr

08002fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	; (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f003 fc4c 	bl	80068a0 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20005000 	.word	0x20005000
 8003034:	00000400 	.word	0x00000400
 8003038:	200007f8 	.word	0x200007f8
 800303c:	20000950 	.word	0x20000950

08003040 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800304c:	f7ff fff8 	bl	8003040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003050:	480b      	ldr	r0, [pc, #44]	; (8003080 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003052:	490c      	ldr	r1, [pc, #48]	; (8003084 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003058:	e002      	b.n	8003060 <LoopCopyDataInit>

0800305a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800305c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305e:	3304      	adds	r3, #4

08003060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003064:	d3f9      	bcc.n	800305a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003068:	4c09      	ldr	r4, [pc, #36]	; (8003090 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800306c:	e001      	b.n	8003072 <LoopFillZerobss>

0800306e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003070:	3204      	adds	r2, #4

08003072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003074:	d3fb      	bcc.n	800306e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003076:	f003 fc19 	bl	80068ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307a:	f7ff fa6d 	bl	8002558 <main>
  bx lr
 800307e:	4770      	bx	lr
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003088:	08009b3c 	.word	0x08009b3c
  ldr r2, =_sbss
 800308c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003090:	2000094c 	.word	0x2000094c

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>
	...

08003098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_Init+0x28>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <HAL_Init+0x28>)
 80030a2:	f043 0310 	orr.w	r3, r3, #16
 80030a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a8:	2003      	movs	r0, #3
 80030aa:	f000 f947 	bl	800333c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ae:	200f      	movs	r0, #15
 80030b0:	f000 f808 	bl	80030c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b4:	f7ff fd0c 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40022000 	.word	0x40022000

080030c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x54>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_InitTick+0x58>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	4619      	mov	r1, r3
 80030d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030da:	fbb3 f3f1 	udiv	r3, r3, r1
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 f95f 	bl	80033a6 <HAL_SYSTICK_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00e      	b.n	8003110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b0f      	cmp	r3, #15
 80030f6:	d80a      	bhi.n	800310e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f8:	2200      	movs	r2, #0
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f000 f927 	bl	8003352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003104:	4a06      	ldr	r2, [pc, #24]	; (8003120 <HAL_InitTick+0x5c>)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	e000      	b.n	8003110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000010 	.word	0x20000010
 800311c:	20000018 	.word	0x20000018
 8003120:	20000014 	.word	0x20000014

08003124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_IncTick+0x1c>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	4b05      	ldr	r3, [pc, #20]	; (8003144 <HAL_IncTick+0x20>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4413      	add	r3, r2
 8003134:	4a03      	ldr	r2, [pc, #12]	; (8003144 <HAL_IncTick+0x20>)
 8003136:	6013      	str	r3, [r2, #0]
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr
 8003140:	20000018 	.word	0x20000018
 8003144:	200007fc 	.word	0x200007fc

08003148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b02      	ldr	r3, [pc, #8]	; (8003158 <HAL_GetTick+0x10>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	200007fc 	.word	0x200007fc

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff fff0 	bl	8003148 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffe0 	bl	8003148 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000018 	.word	0x20000018

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4906      	ldr	r1, [pc, #24]	; (800323c <__NVIC_EnableIRQ+0x34>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3b01      	subs	r3, #1
 8003304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003308:	d301      	bcc.n	800330e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330a:	2301      	movs	r3, #1
 800330c:	e00f      	b.n	800332e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <SysTick_Config+0x40>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003316:	210f      	movs	r1, #15
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f7ff ff90 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003320:	4b05      	ldr	r3, [pc, #20]	; (8003338 <SysTick_Config+0x40>)
 8003322:	2200      	movs	r2, #0
 8003324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003326:	4b04      	ldr	r3, [pc, #16]	; (8003338 <SysTick_Config+0x40>)
 8003328:	2207      	movs	r2, #7
 800332a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	e000e010 	.word	0xe000e010

0800333c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff ff2d 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003352:	b580      	push	{r7, lr}
 8003354:	b086      	sub	sp, #24
 8003356:	af00      	add	r7, sp, #0
 8003358:	4603      	mov	r3, r0
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
 800335e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff ff42 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff90 	bl	8003294 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5f 	bl	8003240 <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff35 	bl	8003208 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffa2 	bl	80032f8 <SysTick_Config>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b08b      	sub	sp, #44	; 0x2c
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ce:	2300      	movs	r3, #0
 80033d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d2:	e169      	b.n	80036a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033d4:	2201      	movs	r2, #1
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 8158 	bne.w	80036a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a9a      	ldr	r2, [pc, #616]	; (8003660 <HAL_GPIO_Init+0x2a0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d05e      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
 80033fc:	4a98      	ldr	r2, [pc, #608]	; (8003660 <HAL_GPIO_Init+0x2a0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d875      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 8003402:	4a98      	ldr	r2, [pc, #608]	; (8003664 <HAL_GPIO_Init+0x2a4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d058      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
 8003408:	4a96      	ldr	r2, [pc, #600]	; (8003664 <HAL_GPIO_Init+0x2a4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d86f      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 800340e:	4a96      	ldr	r2, [pc, #600]	; (8003668 <HAL_GPIO_Init+0x2a8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d052      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
 8003414:	4a94      	ldr	r2, [pc, #592]	; (8003668 <HAL_GPIO_Init+0x2a8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d869      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 800341a:	4a94      	ldr	r2, [pc, #592]	; (800366c <HAL_GPIO_Init+0x2ac>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d04c      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
 8003420:	4a92      	ldr	r2, [pc, #584]	; (800366c <HAL_GPIO_Init+0x2ac>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d863      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 8003426:	4a92      	ldr	r2, [pc, #584]	; (8003670 <HAL_GPIO_Init+0x2b0>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d046      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
 800342c:	4a90      	ldr	r2, [pc, #576]	; (8003670 <HAL_GPIO_Init+0x2b0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d85d      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 8003432:	2b12      	cmp	r3, #18
 8003434:	d82a      	bhi.n	800348c <HAL_GPIO_Init+0xcc>
 8003436:	2b12      	cmp	r3, #18
 8003438:	d859      	bhi.n	80034ee <HAL_GPIO_Init+0x12e>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <HAL_GPIO_Init+0x80>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	080034bb 	.word	0x080034bb
 8003444:	08003495 	.word	0x08003495
 8003448:	080034a7 	.word	0x080034a7
 800344c:	080034e9 	.word	0x080034e9
 8003450:	080034ef 	.word	0x080034ef
 8003454:	080034ef 	.word	0x080034ef
 8003458:	080034ef 	.word	0x080034ef
 800345c:	080034ef 	.word	0x080034ef
 8003460:	080034ef 	.word	0x080034ef
 8003464:	080034ef 	.word	0x080034ef
 8003468:	080034ef 	.word	0x080034ef
 800346c:	080034ef 	.word	0x080034ef
 8003470:	080034ef 	.word	0x080034ef
 8003474:	080034ef 	.word	0x080034ef
 8003478:	080034ef 	.word	0x080034ef
 800347c:	080034ef 	.word	0x080034ef
 8003480:	080034ef 	.word	0x080034ef
 8003484:	0800349d 	.word	0x0800349d
 8003488:	080034b1 	.word	0x080034b1
 800348c:	4a79      	ldr	r2, [pc, #484]	; (8003674 <HAL_GPIO_Init+0x2b4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003492:	e02c      	b.n	80034ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	623b      	str	r3, [r7, #32]
          break;
 800349a:	e029      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	3304      	adds	r3, #4
 80034a2:	623b      	str	r3, [r7, #32]
          break;
 80034a4:	e024      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	3308      	adds	r3, #8
 80034ac:	623b      	str	r3, [r7, #32]
          break;
 80034ae:	e01f      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	330c      	adds	r3, #12
 80034b6:	623b      	str	r3, [r7, #32]
          break;
 80034b8:	e01a      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034c2:	2304      	movs	r3, #4
 80034c4:	623b      	str	r3, [r7, #32]
          break;
 80034c6:	e013      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d105      	bne.n	80034dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034d0:	2308      	movs	r3, #8
 80034d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	611a      	str	r2, [r3, #16]
          break;
 80034da:	e009      	b.n	80034f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034dc:	2308      	movs	r3, #8
 80034de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	615a      	str	r2, [r3, #20]
          break;
 80034e6:	e003      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
          break;
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x130>
          break;
 80034ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2bff      	cmp	r3, #255	; 0xff
 80034f4:	d801      	bhi.n	80034fa <HAL_GPIO_Init+0x13a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_Init+0x13e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2bff      	cmp	r3, #255	; 0xff
 8003504:	d802      	bhi.n	800350c <HAL_GPIO_Init+0x14c>
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	e002      	b.n	8003512 <HAL_GPIO_Init+0x152>
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	3b08      	subs	r3, #8
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	210f      	movs	r1, #15
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	401a      	ands	r2, r3
 8003524:	6a39      	ldr	r1, [r7, #32]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	431a      	orrs	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80b1 	beq.w	80036a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003540:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_GPIO_Init+0x2b8>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	4a4c      	ldr	r2, [pc, #304]	; (8003678 <HAL_GPIO_Init+0x2b8>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6193      	str	r3, [r2, #24]
 800354c:	4b4a      	ldr	r3, [pc, #296]	; (8003678 <HAL_GPIO_Init+0x2b8>)
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003558:	4a48      	ldr	r2, [pc, #288]	; (800367c <HAL_GPIO_Init+0x2bc>)
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	089b      	lsrs	r3, r3, #2
 800355e:	3302      	adds	r3, #2
 8003560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003564:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a40      	ldr	r2, [pc, #256]	; (8003680 <HAL_GPIO_Init+0x2c0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d013      	beq.n	80035ac <HAL_GPIO_Init+0x1ec>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a3f      	ldr	r2, [pc, #252]	; (8003684 <HAL_GPIO_Init+0x2c4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00d      	beq.n	80035a8 <HAL_GPIO_Init+0x1e8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a3e      	ldr	r2, [pc, #248]	; (8003688 <HAL_GPIO_Init+0x2c8>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <HAL_GPIO_Init+0x1e4>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a3d      	ldr	r2, [pc, #244]	; (800368c <HAL_GPIO_Init+0x2cc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d101      	bne.n	80035a0 <HAL_GPIO_Init+0x1e0>
 800359c:	2303      	movs	r3, #3
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a0:	2304      	movs	r3, #4
 80035a2:	e004      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e002      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_GPIO_Init+0x1ee>
 80035ac:	2300      	movs	r3, #0
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	f002 0203 	and.w	r2, r2, #3
 80035b4:	0092      	lsls	r2, r2, #2
 80035b6:	4093      	lsls	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035be:	492f      	ldr	r1, [pc, #188]	; (800367c <HAL_GPIO_Init+0x2bc>)
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d006      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035d8:	4b2d      	ldr	r3, [pc, #180]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	492c      	ldr	r1, [pc, #176]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	608b      	str	r3, [r1, #8]
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035e6:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	4928      	ldr	r1, [pc, #160]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003600:	4b23      	ldr	r3, [pc, #140]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	4922      	ldr	r1, [pc, #136]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4313      	orrs	r3, r2
 800360a:	60cb      	str	r3, [r1, #12]
 800360c:	e006      	b.n	800361c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	43db      	mvns	r3, r3
 8003616:	491e      	ldr	r1, [pc, #120]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003618:	4013      	ands	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d006      	beq.n	8003636 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4918      	ldr	r1, [pc, #96]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	604b      	str	r3, [r1, #4]
 8003634:	e006      	b.n	8003644 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003636:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	43db      	mvns	r3, r3
 800363e:	4914      	ldr	r1, [pc, #80]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003640:	4013      	ands	r3, r2
 8003642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d021      	beq.n	8003694 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003650:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_GPIO_Init+0x2d0>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
 800365c:	e021      	b.n	80036a2 <HAL_GPIO_Init+0x2e2>
 800365e:	bf00      	nop
 8003660:	10320000 	.word	0x10320000
 8003664:	10310000 	.word	0x10310000
 8003668:	10220000 	.word	0x10220000
 800366c:	10210000 	.word	0x10210000
 8003670:	10120000 	.word	0x10120000
 8003674:	10110000 	.word	0x10110000
 8003678:	40021000 	.word	0x40021000
 800367c:	40010000 	.word	0x40010000
 8003680:	40010800 	.word	0x40010800
 8003684:	40010c00 	.word	0x40010c00
 8003688:	40011000 	.word	0x40011000
 800368c:	40011400 	.word	0x40011400
 8003690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_GPIO_Init+0x304>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	43db      	mvns	r3, r3
 800369c:	4909      	ldr	r1, [pc, #36]	; (80036c4 <HAL_GPIO_Init+0x304>)
 800369e:	4013      	ands	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	3301      	adds	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	fa22 f303 	lsr.w	r3, r2, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f47f ae8e 	bne.w	80033d4 <HAL_GPIO_Init+0x14>
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	372c      	adds	r7, #44	; 0x2c
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	40010400 	.word	0x40010400

080036c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	887b      	ldrh	r3, [r7, #2]
 80036da:	4013      	ands	r3, r2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e001      	b.n	80036ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr

080036f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	807b      	strh	r3, [r7, #2]
 8003702:	4613      	mov	r3, r2
 8003704:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003706:	787b      	ldrb	r3, [r7, #1]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370c:	887a      	ldrh	r2, [r7, #2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003712:	e003      	b.n	800371c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	041a      	lsls	r2, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	611a      	str	r2, [r3, #16]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
	...

08003728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 f806 	bl	8003758 <HAL_GPIO_EXTI_Callback>
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40010400 	.word	0x40010400

08003758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e12b      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff f9ce 	bl	8002b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d0:	f001 f960 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a81      	ldr	r2, [pc, #516]	; (80039e0 <HAL_I2C_Init+0x274>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d807      	bhi.n	80037f0 <HAL_I2C_Init+0x84>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a80      	ldr	r2, [pc, #512]	; (80039e4 <HAL_I2C_Init+0x278>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e006      	b.n	80037fe <HAL_I2C_Init+0x92>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a7d      	ldr	r2, [pc, #500]	; (80039e8 <HAL_I2C_Init+0x27c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0e7      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a78      	ldr	r2, [pc, #480]	; (80039ec <HAL_I2C_Init+0x280>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d802      	bhi.n	8003840 <HAL_I2C_Init+0xd4>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	e009      	b.n	8003854 <HAL_I2C_Init+0xe8>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	4a69      	ldr	r2, [pc, #420]	; (80039f0 <HAL_I2C_Init+0x284>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	3301      	adds	r3, #1
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	430b      	orrs	r3, r1
 800385a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	495c      	ldr	r1, [pc, #368]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d819      	bhi.n	80038a8 <HAL_I2C_Init+0x13c>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e59      	subs	r1, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003888:	400b      	ands	r3, r1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_I2C_Init+0x138>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e59      	subs	r1, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fbb1 f3f3 	udiv	r3, r1, r3
 800389c:	3301      	adds	r3, #1
 800389e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a2:	e051      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e04f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <HAL_I2C_Init+0x168>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e012      	b.n	80038fa <HAL_I2C_Init+0x18e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	0099      	lsls	r1, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Init+0x196>
 80038fe:	2301      	movs	r3, #1
 8003900:	e022      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <HAL_I2C_Init+0x1bc>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e58      	subs	r0, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	440b      	add	r3, r1
 8003918:	fbb0 f3f3 	udiv	r3, r0, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003926:	e00f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6809      	ldr	r1, [r1, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6911      	ldr	r1, [r2, #16]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	000186a0 	.word	0x000186a0
 80039e4:	001e847f 	.word	0x001e847f
 80039e8:	003d08ff 	.word	0x003d08ff
 80039ec:	431bde83 	.word	0x431bde83
 80039f0:	10624dd3 	.word	0x10624dd3

080039f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	461a      	mov	r2, r3
 8003a00:	460b      	mov	r3, r1
 8003a02:	817b      	strh	r3, [r7, #10]
 8003a04:	4613      	mov	r3, r2
 8003a06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff fb9e 	bl	8003148 <HAL_GetTick>
 8003a0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	f040 80e0 	bne.w	8003bdc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2319      	movs	r3, #25
 8003a22:	2201      	movs	r2, #1
 8003a24:	4970      	ldr	r1, [pc, #448]	; (8003be8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fa92 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0d3      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d101      	bne.n	8003a44 <HAL_I2C_Master_Transmit+0x50>
 8003a40:	2302      	movs	r3, #2
 8003a42:	e0cc      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d007      	beq.n	8003a6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2221      	movs	r2, #33	; 0x21
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2210      	movs	r2, #16
 8003a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	893a      	ldrh	r2, [r7, #8]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a50      	ldr	r2, [pc, #320]	; (8003bec <HAL_I2C_Master_Transmit+0x1f8>)
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003aac:	8979      	ldrh	r1, [r7, #10]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f9ca 	bl	8003e4c <I2C_MasterRequestWrite>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e08d      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ad8:	e066      	b.n	8003ba8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	6a39      	ldr	r1, [r7, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fb50 	bl	8004184 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d107      	bne.n	8003b02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0304 	and.w	r3, r3, #4
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d11b      	bne.n	8003b7c <HAL_I2C_Master_Transmit+0x188>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6a39      	ldr	r1, [r7, #32]
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb47 	bl	8004214 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e01a      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d194      	bne.n	8003ada <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	00100002 	.word	0x00100002
 8003bec:	ffff0000 	.word	0xffff0000

08003bf0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	; 0x28
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff faa2 	bl	8003148 <HAL_GetTick>
 8003c04:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	f040 8111 	bne.w	8003e3a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2319      	movs	r3, #25
 8003c1e:	2201      	movs	r2, #1
 8003c20:	4988      	ldr	r1, [pc, #544]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f994 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e104      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_I2C_IsDeviceReady+0x50>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0fd      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d007      	beq.n	8003c66 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2224      	movs	r2, #36	; 0x24
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a70      	ldr	r2, [pc, #448]	; (8003e48 <HAL_I2C_IsDeviceReady+0x258>)
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c98:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f952 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc0:	d103      	bne.n	8003cca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0b6      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cce:	897b      	ldrh	r3, [r7, #10]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cdc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cde:	f7ff fa33 	bl	8003148 <HAL_GetTick>
 8003ce2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d12:	e025      	b.n	8003d60 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7ff fa18 	bl	8003148 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <HAL_I2C_IsDeviceReady+0x13a>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	22a0      	movs	r2, #160	; 0xa0
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2ba0      	cmp	r3, #160	; 0xa0
 8003d6a:	d005      	beq.n	8003d78 <HAL_I2C_IsDeviceReady+0x188>
 8003d6c:	7dfb      	ldrb	r3, [r7, #23]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <HAL_I2C_IsDeviceReady+0x188>
 8003d72:	7dbb      	ldrb	r3, [r7, #22]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0cd      	beq.n	8003d14 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d129      	bne.n	8003de2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d9e:	2300      	movs	r3, #0
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2319      	movs	r3, #25
 8003dba:	2201      	movs	r2, #1
 8003dbc:	4921      	ldr	r1, [pc, #132]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f8c6 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e036      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	e02c      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dfa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2319      	movs	r3, #25
 8003e02:	2201      	movs	r2, #1
 8003e04:	490f      	ldr	r1, [pc, #60]	; (8003e44 <HAL_I2C_IsDeviceReady+0x254>)
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f8a2 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e012      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	f4ff af32 	bcc.w	8003c8a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	00100002 	.word	0x00100002
 8003e48:	ffff0000 	.word	0xffff0000

08003e4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	607a      	str	r2, [r7, #4]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	460b      	mov	r3, r1
 8003e5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d006      	beq.n	8003e76 <I2C_MasterRequestWrite+0x2a>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d003      	beq.n	8003e76 <I2C_MasterRequestWrite+0x2a>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e74:	d108      	bne.n	8003e88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e00b      	b.n	8003ea0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8c:	2b12      	cmp	r3, #18
 8003e8e:	d107      	bne.n	8003ea0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f84f 	bl	8003f50 <I2C_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d103      	bne.n	8003ed0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e035      	b.n	8003f40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d108      	bne.n	8003ef0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eec:	611a      	str	r2, [r3, #16]
 8003eee:	e01b      	b.n	8003f28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ef0:	897b      	ldrh	r3, [r7, #10]
 8003ef2:	11db      	asrs	r3, r3, #7
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 0306 	and.w	r3, r3, #6
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f063 030f 	orn	r3, r3, #15
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	490e      	ldr	r1, [pc, #56]	; (8003f48 <I2C_MasterRequestWrite+0xfc>)
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f898 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e010      	b.n	8003f40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f1e:	897b      	ldrh	r3, [r7, #10]
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4907      	ldr	r1, [pc, #28]	; (8003f4c <I2C_MasterRequestWrite+0x100>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f888 	bl	8004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	00010008 	.word	0x00010008
 8003f4c:	00010002 	.word	0x00010002

08003f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f60:	e048      	b.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d044      	beq.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7ff f8ed 	bl	8003148 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d139      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10d      	bne.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	43da      	mvns	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4013      	ands	r3, r2
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	e00c      	b.n	8003fc0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	43da      	mvns	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d116      	bne.n	8003ff4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0220 	orr.w	r2, r3, #32
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e023      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	0c1b      	lsrs	r3, r3, #16
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d10d      	bne.n	800401a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	43da      	mvns	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4013      	ands	r3, r2
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	e00c      	b.n	8004034 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	429a      	cmp	r2, r3
 8004038:	d093      	beq.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004052:	e071      	b.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d123      	bne.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800407c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	f043 0204 	orr.w	r2, r3, #4
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e067      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b2:	d041      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b4:	f7ff f848 	bl	8003148 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d136      	bne.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	0c1b      	lsrs	r3, r3, #16
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf14      	ite	ne
 80040e6:	2301      	movne	r3, #1
 80040e8:	2300      	moveq	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	e00b      	b.n	8004106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	43da      	mvns	r2, r3
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f043 0220 	orr.w	r2, r3, #32
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e021      	b.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	d10c      	bne.n	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	43da      	mvns	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4013      	ands	r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e00b      	b.n	8004174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	f47f af6d 	bne.w	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004190:	e034      	b.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f886 	bl	80042a4 <I2C_IsAcknowledgeFailed>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e034      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a8:	d028      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fe ffcd 	bl	8003148 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11d      	bne.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b80      	cmp	r3, #128	; 0x80
 80041cc:	d016      	beq.n	80041fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e007      	b.n	800420c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d1c3      	bne.n	8004192 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004220:	e034      	b.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 f83e 	bl	80042a4 <I2C_IsAcknowledgeFailed>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e034      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d028      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423a:	f7fe ff85 	bl	8003148 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11d      	bne.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d016      	beq.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b04      	cmp	r3, #4
 8004298:	d1c3      	bne.n	8004222 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d11b      	bne.n	80042f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e272      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8087 	beq.w	800442e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b04      	cmp	r3, #4
 800432a:	d00c      	beq.n	8004346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800432c:	4b8f      	ldr	r3, [pc, #572]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b08      	cmp	r3, #8
 8004336:	d112      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
 8004338:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b89      	ldr	r3, [pc, #548]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d06c      	beq.n	800442c <HAL_RCC_OscConfig+0x12c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d168      	bne.n	800442c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e24c      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x76>
 8004368:	4b80      	ldr	r3, [pc, #512]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7f      	ldr	r2, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e02e      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b7b      	ldr	r3, [pc, #492]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7a      	ldr	r2, [pc, #488]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b78      	ldr	r3, [pc, #480]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a77      	ldr	r2, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0xbc>
 80043a2:	4b72      	ldr	r3, [pc, #456]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 80043bc:	4b6b      	ldr	r3, [pc, #428]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6a      	ldr	r2, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a67      	ldr	r2, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe feb4 	bl	8003148 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe feb0 	bl	8003148 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e200      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5d      	ldr	r3, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xe4>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fea0 	bl	8003148 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe fe9c 	bl	8003148 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ec      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x10c>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800443a:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004446:	4b49      	ldr	r3, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
 8004452:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c0      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4939      	ldr	r1, [pc, #228]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe fe55 	bl	8003148 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe fe51 	bl	8003148 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4927      	ldr	r1, [pc, #156]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fe fe34 	bl	8003148 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fe fe30 	bl	8003148 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e180      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d03a      	beq.n	8004584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fe fe14 	bl	8003148 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fe fe10 	bl	8003148 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e160      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004542:	2001      	movs	r0, #1
 8004544:	f000 face 	bl	8004ae4 <RCC_Delay>
 8004548:	e01c      	b.n	8004584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004550:	f7fe fdfa 	bl	8003148 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fe fdf6 	bl	8003148 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d908      	bls.n	8004578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e146      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	42420000 	.word	0x42420000
 8004574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b92      	ldr	r3, [pc, #584]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e9      	bne.n	8004558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80a6 	beq.w	80046de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4a87      	ldr	r2, [pc, #540]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	61d3      	str	r3, [r2, #28]
 80045ae:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b7f      	ldr	r3, [pc, #508]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7e      	ldr	r2, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fe fdb7 	bl	8003148 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fe fdb3 	bl	8003148 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e103      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x312>
 8004604:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a6e      	ldr	r2, [pc, #440]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e02d      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x334>
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a69      	ldr	r2, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6213      	str	r3, [r2, #32]
 8004626:	4b67      	ldr	r3, [pc, #412]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6213      	str	r3, [r2, #32]
 8004632:	e01c      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x356>
 800463c:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a60      	ldr	r2, [pc, #384]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6213      	str	r3, [r2, #32]
 8004648:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	4a5d      	ldr	r2, [pc, #372]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6213      	str	r3, [r2, #32]
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6213      	str	r3, [r2, #32]
 8004662:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d015      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fe fd67 	bl	8003148 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fe fd63 	bl	8003148 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0b1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCC_OscConfig+0x37e>
 80046a0:	e014      	b.n	80046cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fe fd51 	bl	8003148 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fe fd4d 	bl	8003148 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e09b      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8087 	beq.w	80047f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d061      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d146      	bne.n	800478a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe fd21 	bl	8003148 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fe fd1d 	bl	8003148 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e06d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d108      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4921      	ldr	r1, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a19      	ldr	r1, [r3, #32]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	430b      	orrs	r3, r1
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fe fcf1 	bl	8003148 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fe fced 	bl	8003148 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e03d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x46a>
 8004788:	e035      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fe fcda 	bl	8003148 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fe fcd6 	bl	8003148 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e026      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x498>
 80047b6:	e01e      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e019      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x500>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d106      	bne.n	80047f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0d0      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d910      	bls.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4965      	ldr	r1, [pc, #404]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a52      	ldr	r2, [pc, #328]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d040      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e073      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06b      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4936      	ldr	r1, [pc, #216]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fe fc28 	bl	8003148 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fe fc24 	bl	8003148 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e053      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d210      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4922      	ldr	r1, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490a      	ldr	r1, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1cc>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1d0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe fb86 	bl	80030c4 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40021000 	.word	0x40021000
 80049cc:	08009770 	.word	0x08009770
 80049d0:	20000010 	.word	0x20000010
 80049d4:	20000014 	.word	0x20000014

080049d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049f2:	4b1e      	ldr	r3, [pc, #120]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d002      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x30>
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d003      	beq.n	8004a0e <HAL_RCC_GetSysClockFreq+0x36>
 8004a06:	e027      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a0a:	613b      	str	r3, [r7, #16]
      break;
 8004a0c:	e027      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0c9b      	lsrs	r3, r3, #18
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a18:	5cd3      	ldrb	r3, [r2, r3]
 8004a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	0c5b      	lsrs	r3, r3, #17
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	4a11      	ldr	r2, [pc, #68]	; (8004a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a32:	5cd3      	ldrb	r3, [r2, r3]
 8004a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a0d      	ldr	r2, [pc, #52]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a3a:	fb03 f202 	mul.w	r2, r3, r2
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	e004      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a4c:	fb02 f303 	mul.w	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	613b      	str	r3, [r7, #16]
      break;
 8004a56:	e002      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8004a5a:	613b      	str	r3, [r7, #16]
      break;
 8004a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a5e:	693b      	ldr	r3, [r7, #16]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	371c      	adds	r7, #28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	007a1200 	.word	0x007a1200
 8004a74:	08009788 	.word	0x08009788
 8004a78:	08009798 	.word	0x08009798
 8004a7c:	003d0900 	.word	0x003d0900

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b02      	ldr	r3, [pc, #8]	; (8004a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr
 8004a90:	20000010 	.word	0x20000010

08004a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a98:	f7ff fff2 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	08009780 	.word	0x08009780

08004abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ac0:	f7ff ffde 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	0adb      	lsrs	r3, r3, #11
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad2:	5ccb      	ldrb	r3, [r1, r3]
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	08009780 	.word	0x08009780

08004ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <RCC_Delay+0x34>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <RCC_Delay+0x38>)
 8004af2:	fba2 2303 	umull	r2, r3, r2, r3
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b00:	bf00      	nop
  }
  while (Delay --);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1e5a      	subs	r2, r3, #1
 8004b06:	60fa      	str	r2, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f9      	bne.n	8004b00 <RCC_Delay+0x1c>
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	20000010 	.word	0x20000010
 8004b1c:	10624dd3 	.word	0x10624dd3

08004b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e076      	b.n	8004c20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b42:	d009      	beq.n	8004b58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	61da      	str	r2, [r3, #28]
 8004b4a:	e005      	b.n	8004b58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fe f81e 	bl	8002bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	ea42 0103 	orr.w	r1, r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	0c1a      	lsrs	r2, r3, #16
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f002 0204 	and.w	r2, r2, #4
 8004bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_Transmit+0x22>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e12d      	b.n	8004ea6 <HAL_SPI_Transmit+0x27e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c52:	f7fe fa79 	bl	8003148 <HAL_GetTick>
 8004c56:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d002      	beq.n	8004c6e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c68:	2302      	movs	r3, #2
 8004c6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c6c:	e116      	b.n	8004e9c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <HAL_SPI_Transmit+0x52>
 8004c74:	88fb      	ldrh	r3, [r7, #6]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c7e:	e10d      	b.n	8004e9c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2203      	movs	r2, #3
 8004c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	88fa      	ldrh	r2, [r7, #6]
 8004c9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d10f      	bne.n	8004ce8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d007      	beq.n	8004d06 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0e:	d14f      	bne.n	8004db0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_SPI_Transmit+0xf6>
 8004d18:	8afb      	ldrh	r3, [r7, #22]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d142      	bne.n	8004da4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	881a      	ldrh	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d42:	e02f      	b.n	8004da4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d112      	bne.n	8004d78 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	881a      	ldrh	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	1c9a      	adds	r2, r3, #2
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d76:	e015      	b.n	8004da4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d78:	f7fe f9e6 	bl	8003148 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d803      	bhi.n	8004d90 <HAL_SPI_Transmit+0x168>
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Transmit+0x16e>
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004da2:	e07b      	b.n	8004e9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1ca      	bne.n	8004d44 <HAL_SPI_Transmit+0x11c>
 8004dae:	e050      	b.n	8004e52 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d002      	beq.n	8004dbe <HAL_SPI_Transmit+0x196>
 8004db8:	8afb      	ldrh	r3, [r7, #22]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d144      	bne.n	8004e48 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004de4:	e030      	b.n	8004e48 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d113      	bne.n	8004e1c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	7812      	ldrb	r2, [r2, #0]
 8004e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e1a:	e015      	b.n	8004e48 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e1c:	f7fe f994 	bl	8003148 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d803      	bhi.n	8004e34 <HAL_SPI_Transmit+0x20c>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d102      	bne.n	8004e3a <HAL_SPI_Transmit+0x212>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004e46:	e029      	b.n	8004e9c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1c9      	bne.n	8004de6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f8b2 	bl	8004fc0 <SPI_EndRxTxTransaction>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e003      	b.n	8004e9c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ec0:	f7fe f942 	bl	8003148 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	1a9b      	subs	r3, r3, r2
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ed0:	f7fe f93a 	bl	8003148 <HAL_GetTick>
 8004ed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed6:	4b39      	ldr	r3, [pc, #228]	; (8004fbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	015b      	lsls	r3, r3, #5
 8004edc:	0d1b      	lsrs	r3, r3, #20
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	e054      	b.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d050      	beq.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ef0:	f7fe f92a 	bl	8003148 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d902      	bls.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13d      	bne.n	8004f82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1e:	d111      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d004      	beq.n	8004f34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d107      	bne.n	8004f44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d10f      	bne.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e017      	b.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	79fb      	ldrb	r3, [r7, #7]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d19b      	bne.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3720      	adds	r7, #32
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000010 	.word	0x20000010

08004fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2180      	movs	r1, #128	; 0x80
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	f7ff ff6a 	bl	8004eb0 <SPI_WaitFlagStateUntilTimeout>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e000      	b.n	8004ff4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e041      	b.n	8005092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fd fe06 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f000 fac6 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d001      	beq.n	80050b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e032      	b.n	800511a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a18      	ldr	r2, [pc, #96]	; (8005124 <HAL_TIM_Base_Start+0x88>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <HAL_TIM_Base_Start+0x48>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ce:	d009      	beq.n	80050e4 <HAL_TIM_Base_Start+0x48>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <HAL_TIM_Base_Start+0x8c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <HAL_TIM_Base_Start+0x48>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_TIM_Base_Start+0x90>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d111      	bne.n	8005108 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b06      	cmp	r3, #6
 80050f4:	d010      	beq.n	8005118 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005106:	e007      	b.n	8005118 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	40012c00 	.word	0x40012c00
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e03a      	b.n	80051be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0201 	orr.w	r2, r2, #1
 800515e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <HAL_TIM_Base_Start_IT+0x98>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x58>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x58>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <HAL_TIM_Base_Start_IT+0x9c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x58>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a13      	ldr	r2, [pc, #76]	; (80051d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d111      	bne.n	80051ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d010      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	e007      	b.n	80051bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800

080051d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0202 	mvn.w	r2, #2
 8005200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f9bd 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f9b0 	bl	8005584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f9bf 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0204 	mvn.w	r2, #4
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f993 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f986 	bl	8005584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f995 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b08      	cmp	r3, #8
 8005290:	d122      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d11b      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0208 	mvn.w	r2, #8
 80052a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2204      	movs	r2, #4
 80052ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f969 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f95c 	bl	8005584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f96b 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0210 	mvn.w	r2, #16
 80052fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2208      	movs	r2, #8
 8005302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f93f 	bl	8005596 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f932 	bl	8005584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f941 	bl	80055a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10e      	bne.n	8005358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0201 	mvn.w	r2, #1
 8005350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f90d 	bl	8005572 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fa83 	bl	800588a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f905 	bl	80055ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0220 	mvn.w	r2, #32
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa4e 	bl	8005878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIM_ConfigClockSource+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e0b4      	b.n	800556a <HAL_TIM_ConfigClockSource+0x186>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d03e      	beq.n	80054b8 <HAL_TIM_ConfigClockSource+0xd4>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	f200 8087 	bhi.w	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005446:	f000 8086 	beq.w	8005556 <HAL_TIM_ConfigClockSource+0x172>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	d87f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005450:	2b70      	cmp	r3, #112	; 0x70
 8005452:	d01a      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xa6>
 8005454:	2b70      	cmp	r3, #112	; 0x70
 8005456:	d87b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b60      	cmp	r3, #96	; 0x60
 800545a:	d050      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x11a>
 800545c:	2b60      	cmp	r3, #96	; 0x60
 800545e:	d877      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b50      	cmp	r3, #80	; 0x50
 8005462:	d03c      	beq.n	80054de <HAL_TIM_ConfigClockSource+0xfa>
 8005464:	2b50      	cmp	r3, #80	; 0x50
 8005466:	d873      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d058      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x13a>
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d86f      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b30      	cmp	r3, #48	; 0x30
 8005472:	d064      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005474:	2b30      	cmp	r3, #48	; 0x30
 8005476:	d86b      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b20      	cmp	r3, #32
 800547a:	d060      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d867      	bhi.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d05c      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b10      	cmp	r3, #16
 8005486:	d05a      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x15a>
 8005488:	e062      	b.n	8005550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	f000 f970 	bl	800577e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	609a      	str	r2, [r3, #8]
      break;
 80054b6:	e04f      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	f000 f959 	bl	800577e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054da:	609a      	str	r2, [r3, #8]
      break;
 80054dc:	e03c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 f8d0 	bl	8005690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2150      	movs	r1, #80	; 0x50
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f927 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 80054fc:	e02c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	461a      	mov	r2, r3
 800550c:	f000 f8ee 	bl	80056ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2160      	movs	r1, #96	; 0x60
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f917 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 800551c:	e01c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	461a      	mov	r2, r3
 800552c:	f000 f8b0 	bl	8005690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f907 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 800553c:	e00c      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4619      	mov	r1, r3
 8005548:	4610      	mov	r0, r2
 800554a:	f000 f8fe 	bl	800574a <TIM_ITRx_SetConfig>
      break;
 800554e:	e003      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e000      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005568:	7bfb      	ldrb	r3, [r7, #15]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3710      	adds	r7, #16
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a29      	ldr	r2, [pc, #164]	; (8005684 <TIM_Base_SetConfig+0xb8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00b      	beq.n	80055fc <TIM_Base_SetConfig+0x30>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d007      	beq.n	80055fc <TIM_Base_SetConfig+0x30>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a26      	ldr	r2, [pc, #152]	; (8005688 <TIM_Base_SetConfig+0xbc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d003      	beq.n	80055fc <TIM_Base_SetConfig+0x30>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a25      	ldr	r2, [pc, #148]	; (800568c <TIM_Base_SetConfig+0xc0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d108      	bne.n	800560e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <TIM_Base_SetConfig+0xb8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00b      	beq.n	800562e <TIM_Base_SetConfig+0x62>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0x62>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <TIM_Base_SetConfig+0xbc>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0x62>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a18      	ldr	r2, [pc, #96]	; (800568c <TIM_Base_SetConfig+0xc0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a07      	ldr	r2, [pc, #28]	; (8005684 <TIM_Base_SetConfig+0xb8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d103      	bne.n	8005674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	615a      	str	r2, [r3, #20]
}
 800567a:	bf00      	nop
 800567c:	3714      	adds	r7, #20
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800

08005690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f023 0201 	bic.w	r2, r3, #1
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 030a 	bic.w	r3, r3, #10
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0210 	bic.w	r2, r3, #16
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	031b      	lsls	r3, r3, #12
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005728:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	621a      	str	r2, [r3, #32]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	f043 0307 	orr.w	r3, r3, #7
 800576c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
 800578a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	021a      	lsls	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	609a      	str	r2, [r3, #8]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e046      	b.n	8005862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a16      	ldr	r2, [pc, #88]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005820:	d009      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a10      	ldr	r2, [pc, #64]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10c      	bne.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800583c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	4313      	orrs	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800

08005878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e042      	b.n	8005934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fd f9f6 	bl	8002cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f91d 	bl	8005b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af02      	add	r7, sp, #8
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	603b      	str	r3, [r7, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b20      	cmp	r3, #32
 800595a:	d16d      	bne.n	8005a38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <HAL_UART_Transmit+0x2c>
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e066      	b.n	8005a3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2221      	movs	r2, #33	; 0x21
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800597a:	f7fd fbe5 	bl	8003148 <HAL_GetTick>
 800597e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	88fa      	ldrh	r2, [r7, #6]
 8005984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d108      	bne.n	80059a8 <HAL_UART_Transmit+0x6c>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d104      	bne.n	80059a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e003      	b.n	80059b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059b0:	e02a      	b.n	8005a08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	2180      	movs	r1, #128	; 0x80
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f840 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e036      	b.n	8005a3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	3302      	adds	r3, #2
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	e007      	b.n	80059fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	3301      	adds	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1cf      	bne.n	80059b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2140      	movs	r1, #64	; 0x40
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f810 	bl	8005a42 <UART_WaitOnFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e006      	b.n	8005a3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	e000      	b.n	8005a3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a38:	2302      	movs	r3, #2
  }
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b090      	sub	sp, #64	; 0x40
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a52:	e050      	b.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d04c      	beq.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a62:	f7fd fb71 	bl	8003148 <HAL_GetTick>
 8005a66:	4602      	mov	r2, r0
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d241      	bcs.n	8005af6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a92:	637a      	str	r2, [r7, #52]	; 0x34
 8005a94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac6:	623a      	str	r2, [r7, #32]
 8005ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	69f9      	ldr	r1, [r7, #28]
 8005acc:	6a3a      	ldr	r2, [r7, #32]
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00f      	b.n	8005b16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4013      	ands	r3, r2
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	bf0c      	ite	eq
 8005b06:	2301      	moveq	r3, #1
 8005b08:	2300      	movne	r3, #0
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d09f      	beq.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3740      	adds	r7, #64	; 0x40
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b5a:	f023 030c 	bic.w	r3, r3, #12
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	430b      	orrs	r3, r1
 8005b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a2c      	ldr	r2, [pc, #176]	; (8005c34 <UART_SetConfig+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d103      	bne.n	8005b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7fe ff98 	bl	8004abc <HAL_RCC_GetPCLK2Freq>
 8005b8c:	60f8      	str	r0, [r7, #12]
 8005b8e:	e002      	b.n	8005b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe ff80 	bl	8004a94 <HAL_RCC_GetPCLK1Freq>
 8005b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009a      	lsls	r2, r3, #2
 8005ba0:	441a      	add	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <UART_SetConfig+0x118>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	0119      	lsls	r1, r3, #4
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009a      	lsls	r2, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <UART_SetConfig+0x118>)
 8005bce:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2064      	movs	r0, #100	; 0x64
 8005bd6:	fb00 f303 	mul.w	r3, r0, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a15      	ldr	r2, [pc, #84]	; (8005c38 <UART_SetConfig+0x118>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bec:	4419      	add	r1, r3
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009a      	lsls	r2, r3, #2
 8005bf8:	441a      	add	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <UART_SetConfig+0x118>)
 8005c06:	fba3 0302 	umull	r0, r3, r3, r2
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2064      	movs	r0, #100	; 0x64
 8005c0e:	fb00 f303 	mul.w	r3, r0, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	3332      	adds	r3, #50	; 0x32
 8005c18:	4a07      	ldr	r2, [pc, #28]	; (8005c38 <UART_SetConfig+0x118>)
 8005c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	440a      	add	r2, r1
 8005c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40013800 	.word	0x40013800
 8005c38:	51eb851f 	.word	0x51eb851f

08005c3c <__itoa>:
 8005c3c:	1e93      	subs	r3, r2, #2
 8005c3e:	2b22      	cmp	r3, #34	; 0x22
 8005c40:	b510      	push	{r4, lr}
 8005c42:	460c      	mov	r4, r1
 8005c44:	d904      	bls.n	8005c50 <__itoa+0x14>
 8005c46:	2300      	movs	r3, #0
 8005c48:	461c      	mov	r4, r3
 8005c4a:	700b      	strb	r3, [r1, #0]
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	bd10      	pop	{r4, pc}
 8005c50:	2a0a      	cmp	r2, #10
 8005c52:	d109      	bne.n	8005c68 <__itoa+0x2c>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	da07      	bge.n	8005c68 <__itoa+0x2c>
 8005c58:	232d      	movs	r3, #45	; 0x2d
 8005c5a:	700b      	strb	r3, [r1, #0]
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4240      	negs	r0, r0
 8005c60:	4421      	add	r1, r4
 8005c62:	f000 f805 	bl	8005c70 <__utoa>
 8005c66:	e7f1      	b.n	8005c4c <__itoa+0x10>
 8005c68:	2100      	movs	r1, #0
 8005c6a:	e7f9      	b.n	8005c60 <__itoa+0x24>

08005c6c <itoa>:
 8005c6c:	f7ff bfe6 	b.w	8005c3c <__itoa>

08005c70 <__utoa>:
 8005c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c72:	b08b      	sub	sp, #44	; 0x2c
 8005c74:	4605      	mov	r5, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	466e      	mov	r6, sp
 8005c7a:	4c1d      	ldr	r4, [pc, #116]	; (8005cf0 <__utoa+0x80>)
 8005c7c:	f104 0c20 	add.w	ip, r4, #32
 8005c80:	4637      	mov	r7, r6
 8005c82:	6820      	ldr	r0, [r4, #0]
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	3408      	adds	r4, #8
 8005c88:	c703      	stmia	r7!, {r0, r1}
 8005c8a:	4564      	cmp	r4, ip
 8005c8c:	463e      	mov	r6, r7
 8005c8e:	d1f7      	bne.n	8005c80 <__utoa+0x10>
 8005c90:	7921      	ldrb	r1, [r4, #4]
 8005c92:	6820      	ldr	r0, [r4, #0]
 8005c94:	7139      	strb	r1, [r7, #4]
 8005c96:	1e91      	subs	r1, r2, #2
 8005c98:	2922      	cmp	r1, #34	; 0x22
 8005c9a:	6038      	str	r0, [r7, #0]
 8005c9c:	f04f 0100 	mov.w	r1, #0
 8005ca0:	d904      	bls.n	8005cac <__utoa+0x3c>
 8005ca2:	7019      	strb	r1, [r3, #0]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	b00b      	add	sp, #44	; 0x2c
 8005caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cac:	1e58      	subs	r0, r3, #1
 8005cae:	4684      	mov	ip, r0
 8005cb0:	fbb5 f7f2 	udiv	r7, r5, r2
 8005cb4:	fb02 5617 	mls	r6, r2, r7, r5
 8005cb8:	3628      	adds	r6, #40	; 0x28
 8005cba:	446e      	add	r6, sp
 8005cbc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005cc0:	460c      	mov	r4, r1
 8005cc2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005cc6:	462e      	mov	r6, r5
 8005cc8:	42b2      	cmp	r2, r6
 8005cca:	463d      	mov	r5, r7
 8005ccc:	f101 0101 	add.w	r1, r1, #1
 8005cd0:	d9ee      	bls.n	8005cb0 <__utoa+0x40>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	545a      	strb	r2, [r3, r1]
 8005cd6:	1919      	adds	r1, r3, r4
 8005cd8:	1aa5      	subs	r5, r4, r2
 8005cda:	42aa      	cmp	r2, r5
 8005cdc:	dae3      	bge.n	8005ca6 <__utoa+0x36>
 8005cde:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ce2:	780e      	ldrb	r6, [r1, #0]
 8005ce4:	3201      	adds	r2, #1
 8005ce6:	7006      	strb	r6, [r0, #0]
 8005ce8:	f801 5901 	strb.w	r5, [r1], #-1
 8005cec:	e7f4      	b.n	8005cd8 <__utoa+0x68>
 8005cee:	bf00      	nop
 8005cf0:	0800979a 	.word	0x0800979a

08005cf4 <__cvt>:
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cfa:	461f      	mov	r7, r3
 8005cfc:	bfbb      	ittet	lt
 8005cfe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005d02:	461f      	movlt	r7, r3
 8005d04:	2300      	movge	r3, #0
 8005d06:	232d      	movlt	r3, #45	; 0x2d
 8005d08:	b088      	sub	sp, #32
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d10:	7013      	strb	r3, [r2, #0]
 8005d12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d14:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005d18:	f023 0820 	bic.w	r8, r3, #32
 8005d1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d20:	d005      	beq.n	8005d2e <__cvt+0x3a>
 8005d22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d26:	d100      	bne.n	8005d2a <__cvt+0x36>
 8005d28:	3501      	adds	r5, #1
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e000      	b.n	8005d30 <__cvt+0x3c>
 8005d2e:	2303      	movs	r3, #3
 8005d30:	aa07      	add	r2, sp, #28
 8005d32:	9204      	str	r2, [sp, #16]
 8005d34:	aa06      	add	r2, sp, #24
 8005d36:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005d3a:	e9cd 3500 	strd	r3, r5, [sp]
 8005d3e:	4622      	mov	r2, r4
 8005d40:	463b      	mov	r3, r7
 8005d42:	f000 fe71 	bl	8006a28 <_dtoa_r>
 8005d46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d4a:	4606      	mov	r6, r0
 8005d4c:	d102      	bne.n	8005d54 <__cvt+0x60>
 8005d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d50:	07db      	lsls	r3, r3, #31
 8005d52:	d522      	bpl.n	8005d9a <__cvt+0xa6>
 8005d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d58:	eb06 0905 	add.w	r9, r6, r5
 8005d5c:	d110      	bne.n	8005d80 <__cvt+0x8c>
 8005d5e:	7833      	ldrb	r3, [r6, #0]
 8005d60:	2b30      	cmp	r3, #48	; 0x30
 8005d62:	d10a      	bne.n	8005d7a <__cvt+0x86>
 8005d64:	2200      	movs	r2, #0
 8005d66:	2300      	movs	r3, #0
 8005d68:	4620      	mov	r0, r4
 8005d6a:	4639      	mov	r1, r7
 8005d6c:	f7fa fed0 	bl	8000b10 <__aeabi_dcmpeq>
 8005d70:	b918      	cbnz	r0, 8005d7a <__cvt+0x86>
 8005d72:	f1c5 0501 	rsb	r5, r5, #1
 8005d76:	f8ca 5000 	str.w	r5, [sl]
 8005d7a:	f8da 3000 	ldr.w	r3, [sl]
 8005d7e:	4499      	add	r9, r3
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4620      	mov	r0, r4
 8005d86:	4639      	mov	r1, r7
 8005d88:	f7fa fec2 	bl	8000b10 <__aeabi_dcmpeq>
 8005d8c:	b108      	cbz	r0, 8005d92 <__cvt+0x9e>
 8005d8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005d92:	2230      	movs	r2, #48	; 0x30
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	454b      	cmp	r3, r9
 8005d98:	d307      	bcc.n	8005daa <__cvt+0xb6>
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005da0:	1b9b      	subs	r3, r3, r6
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	b008      	add	sp, #32
 8005da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	9107      	str	r1, [sp, #28]
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e7f0      	b.n	8005d94 <__cvt+0xa0>

08005db2 <__exponent>:
 8005db2:	4603      	mov	r3, r0
 8005db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005db6:	2900      	cmp	r1, #0
 8005db8:	f803 2b02 	strb.w	r2, [r3], #2
 8005dbc:	bfb6      	itet	lt
 8005dbe:	222d      	movlt	r2, #45	; 0x2d
 8005dc0:	222b      	movge	r2, #43	; 0x2b
 8005dc2:	4249      	neglt	r1, r1
 8005dc4:	2909      	cmp	r1, #9
 8005dc6:	7042      	strb	r2, [r0, #1]
 8005dc8:	dd2a      	ble.n	8005e20 <__exponent+0x6e>
 8005dca:	f10d 0207 	add.w	r2, sp, #7
 8005dce:	4617      	mov	r7, r2
 8005dd0:	260a      	movs	r6, #10
 8005dd2:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dd6:	4694      	mov	ip, r2
 8005dd8:	fb06 1415 	mls	r4, r6, r5, r1
 8005ddc:	3430      	adds	r4, #48	; 0x30
 8005dde:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005de2:	460c      	mov	r4, r1
 8005de4:	2c63      	cmp	r4, #99	; 0x63
 8005de6:	4629      	mov	r1, r5
 8005de8:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dec:	dcf1      	bgt.n	8005dd2 <__exponent+0x20>
 8005dee:	3130      	adds	r1, #48	; 0x30
 8005df0:	f1ac 0402 	sub.w	r4, ip, #2
 8005df4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005df8:	4622      	mov	r2, r4
 8005dfa:	1c41      	adds	r1, r0, #1
 8005dfc:	42ba      	cmp	r2, r7
 8005dfe:	d30a      	bcc.n	8005e16 <__exponent+0x64>
 8005e00:	f10d 0209 	add.w	r2, sp, #9
 8005e04:	eba2 020c 	sub.w	r2, r2, ip
 8005e08:	42bc      	cmp	r4, r7
 8005e0a:	bf88      	it	hi
 8005e0c:	2200      	movhi	r2, #0
 8005e0e:	4413      	add	r3, r2
 8005e10:	1a18      	subs	r0, r3, r0
 8005e12:	b003      	add	sp, #12
 8005e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e16:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e1e:	e7ed      	b.n	8005dfc <__exponent+0x4a>
 8005e20:	2330      	movs	r3, #48	; 0x30
 8005e22:	3130      	adds	r1, #48	; 0x30
 8005e24:	7083      	strb	r3, [r0, #2]
 8005e26:	70c1      	strb	r1, [r0, #3]
 8005e28:	1d03      	adds	r3, r0, #4
 8005e2a:	e7f1      	b.n	8005e10 <__exponent+0x5e>

08005e2c <_printf_float>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	b091      	sub	sp, #68	; 0x44
 8005e32:	460c      	mov	r4, r1
 8005e34:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005e38:	4616      	mov	r6, r2
 8005e3a:	461f      	mov	r7, r3
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	f000 fce5 	bl	800680c <_localeconv_r>
 8005e42:	6803      	ldr	r3, [r0, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	9309      	str	r3, [sp, #36]	; 0x24
 8005e48:	f7fa f982 	bl	8000150 <strlen>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	930e      	str	r3, [sp, #56]	; 0x38
 8005e50:	f8d8 3000 	ldr.w	r3, [r8]
 8005e54:	900a      	str	r0, [sp, #40]	; 0x28
 8005e56:	3307      	adds	r3, #7
 8005e58:	f023 0307 	bic.w	r3, r3, #7
 8005e5c:	f103 0208 	add.w	r2, r3, #8
 8005e60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005e64:	f8d4 b000 	ldr.w	fp, [r4]
 8005e68:	f8c8 2000 	str.w	r2, [r8]
 8005e6c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005e70:	4652      	mov	r2, sl
 8005e72:	4643      	mov	r3, r8
 8005e74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005e78:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	4650      	mov	r0, sl
 8005e84:	4b9c      	ldr	r3, [pc, #624]	; (80060f8 <_printf_float+0x2cc>)
 8005e86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e88:	f7fa fe74 	bl	8000b74 <__aeabi_dcmpun>
 8005e8c:	bb70      	cbnz	r0, 8005eec <_printf_float+0xc0>
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	4650      	mov	r0, sl
 8005e94:	4b98      	ldr	r3, [pc, #608]	; (80060f8 <_printf_float+0x2cc>)
 8005e96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e98:	f7fa fe4e 	bl	8000b38 <__aeabi_dcmple>
 8005e9c:	bb30      	cbnz	r0, 8005eec <_printf_float+0xc0>
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	4650      	mov	r0, sl
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	f7fa fe3d 	bl	8000b24 <__aeabi_dcmplt>
 8005eaa:	b110      	cbz	r0, 8005eb2 <_printf_float+0x86>
 8005eac:	232d      	movs	r3, #45	; 0x2d
 8005eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb2:	4a92      	ldr	r2, [pc, #584]	; (80060fc <_printf_float+0x2d0>)
 8005eb4:	4b92      	ldr	r3, [pc, #584]	; (8006100 <_printf_float+0x2d4>)
 8005eb6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005eba:	bf94      	ite	ls
 8005ebc:	4690      	movls	r8, r2
 8005ebe:	4698      	movhi	r8, r3
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	f04f 0a00 	mov.w	sl, #0
 8005ec6:	6123      	str	r3, [r4, #16]
 8005ec8:	f02b 0304 	bic.w	r3, fp, #4
 8005ecc:	6023      	str	r3, [r4, #0]
 8005ece:	4633      	mov	r3, r6
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	9700      	str	r7, [sp, #0]
 8005ed6:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ed8:	f000 f9d6 	bl	8006288 <_printf_common>
 8005edc:	3001      	adds	r0, #1
 8005ede:	f040 8090 	bne.w	8006002 <_printf_float+0x1d6>
 8005ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee6:	b011      	add	sp, #68	; 0x44
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	4652      	mov	r2, sl
 8005eee:	4643      	mov	r3, r8
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	f7fa fe3e 	bl	8000b74 <__aeabi_dcmpun>
 8005ef8:	b148      	cbz	r0, 8005f0e <_printf_float+0xe2>
 8005efa:	f1b8 0f00 	cmp.w	r8, #0
 8005efe:	bfb8      	it	lt
 8005f00:	232d      	movlt	r3, #45	; 0x2d
 8005f02:	4a80      	ldr	r2, [pc, #512]	; (8006104 <_printf_float+0x2d8>)
 8005f04:	bfb8      	it	lt
 8005f06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f0a:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <_printf_float+0x2dc>)
 8005f0c:	e7d3      	b.n	8005eb6 <_printf_float+0x8a>
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	d142      	bne.n	8005f9e <_printf_float+0x172>
 8005f18:	2306      	movs	r3, #6
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	9206      	str	r2, [sp, #24]
 8005f20:	aa0e      	add	r2, sp, #56	; 0x38
 8005f22:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005f26:	aa0d      	add	r2, sp, #52	; 0x34
 8005f28:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005f2c:	9203      	str	r2, [sp, #12]
 8005f2e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005f32:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4628      	mov	r0, r5
 8005f40:	4643      	mov	r3, r8
 8005f42:	910b      	str	r1, [sp, #44]	; 0x2c
 8005f44:	f7ff fed6 	bl	8005cf4 <__cvt>
 8005f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	2947      	cmp	r1, #71	; 0x47
 8005f4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f50:	d108      	bne.n	8005f64 <_printf_float+0x138>
 8005f52:	1cc8      	adds	r0, r1, #3
 8005f54:	db02      	blt.n	8005f5c <_printf_float+0x130>
 8005f56:	6863      	ldr	r3, [r4, #4]
 8005f58:	4299      	cmp	r1, r3
 8005f5a:	dd40      	ble.n	8005fde <_printf_float+0x1b2>
 8005f5c:	f1a9 0902 	sub.w	r9, r9, #2
 8005f60:	fa5f f989 	uxtb.w	r9, r9
 8005f64:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005f68:	d81f      	bhi.n	8005faa <_printf_float+0x17e>
 8005f6a:	464a      	mov	r2, r9
 8005f6c:	3901      	subs	r1, #1
 8005f6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f72:	910d      	str	r1, [sp, #52]	; 0x34
 8005f74:	f7ff ff1d 	bl	8005db2 <__exponent>
 8005f78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f7a:	4682      	mov	sl, r0
 8005f7c:	1813      	adds	r3, r2, r0
 8005f7e:	2a01      	cmp	r2, #1
 8005f80:	6123      	str	r3, [r4, #16]
 8005f82:	dc02      	bgt.n	8005f8a <_printf_float+0x15e>
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	07d2      	lsls	r2, r2, #31
 8005f88:	d501      	bpl.n	8005f8e <_printf_float+0x162>
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	6123      	str	r3, [r4, #16]
 8005f8e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d09b      	beq.n	8005ece <_printf_float+0xa2>
 8005f96:	232d      	movs	r3, #45	; 0x2d
 8005f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9c:	e797      	b.n	8005ece <_printf_float+0xa2>
 8005f9e:	2947      	cmp	r1, #71	; 0x47
 8005fa0:	d1bc      	bne.n	8005f1c <_printf_float+0xf0>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1ba      	bne.n	8005f1c <_printf_float+0xf0>
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7b7      	b.n	8005f1a <_printf_float+0xee>
 8005faa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005fae:	d118      	bne.n	8005fe2 <_printf_float+0x1b6>
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	6863      	ldr	r3, [r4, #4]
 8005fb4:	dd0b      	ble.n	8005fce <_printf_float+0x1a2>
 8005fb6:	6121      	str	r1, [r4, #16]
 8005fb8:	b913      	cbnz	r3, 8005fc0 <_printf_float+0x194>
 8005fba:	6822      	ldr	r2, [r4, #0]
 8005fbc:	07d0      	lsls	r0, r2, #31
 8005fbe:	d502      	bpl.n	8005fc6 <_printf_float+0x19a>
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	440b      	add	r3, r1
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	f04f 0a00 	mov.w	sl, #0
 8005fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fcc:	e7df      	b.n	8005f8e <_printf_float+0x162>
 8005fce:	b913      	cbnz	r3, 8005fd6 <_printf_float+0x1aa>
 8005fd0:	6822      	ldr	r2, [r4, #0]
 8005fd2:	07d2      	lsls	r2, r2, #31
 8005fd4:	d501      	bpl.n	8005fda <_printf_float+0x1ae>
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	e7f4      	b.n	8005fc4 <_printf_float+0x198>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e7f2      	b.n	8005fc4 <_printf_float+0x198>
 8005fde:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005fe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fe4:	4299      	cmp	r1, r3
 8005fe6:	db05      	blt.n	8005ff4 <_printf_float+0x1c8>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	6121      	str	r1, [r4, #16]
 8005fec:	07d8      	lsls	r0, r3, #31
 8005fee:	d5ea      	bpl.n	8005fc6 <_printf_float+0x19a>
 8005ff0:	1c4b      	adds	r3, r1, #1
 8005ff2:	e7e7      	b.n	8005fc4 <_printf_float+0x198>
 8005ff4:	2900      	cmp	r1, #0
 8005ff6:	bfcc      	ite	gt
 8005ff8:	2201      	movgt	r2, #1
 8005ffa:	f1c1 0202 	rsble	r2, r1, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	e7e0      	b.n	8005fc4 <_printf_float+0x198>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	055a      	lsls	r2, r3, #21
 8006006:	d407      	bmi.n	8006018 <_printf_float+0x1ec>
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	4642      	mov	r2, r8
 800600c:	4631      	mov	r1, r6
 800600e:	4628      	mov	r0, r5
 8006010:	47b8      	blx	r7
 8006012:	3001      	adds	r0, #1
 8006014:	d12b      	bne.n	800606e <_printf_float+0x242>
 8006016:	e764      	b.n	8005ee2 <_printf_float+0xb6>
 8006018:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800601c:	f240 80dd 	bls.w	80061da <_printf_float+0x3ae>
 8006020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fa fd72 	bl	8000b10 <__aeabi_dcmpeq>
 800602c:	2800      	cmp	r0, #0
 800602e:	d033      	beq.n	8006098 <_printf_float+0x26c>
 8006030:	2301      	movs	r3, #1
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	4a35      	ldr	r2, [pc, #212]	; (800610c <_printf_float+0x2e0>)
 8006038:	47b8      	blx	r7
 800603a:	3001      	adds	r0, #1
 800603c:	f43f af51 	beq.w	8005ee2 <_printf_float+0xb6>
 8006040:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006044:	429a      	cmp	r2, r3
 8006046:	db02      	blt.n	800604e <_printf_float+0x222>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	07d8      	lsls	r0, r3, #31
 800604c:	d50f      	bpl.n	800606e <_printf_float+0x242>
 800604e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006052:	4631      	mov	r1, r6
 8006054:	4628      	mov	r0, r5
 8006056:	47b8      	blx	r7
 8006058:	3001      	adds	r0, #1
 800605a:	f43f af42 	beq.w	8005ee2 <_printf_float+0xb6>
 800605e:	f04f 0800 	mov.w	r8, #0
 8006062:	f104 091a 	add.w	r9, r4, #26
 8006066:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006068:	3b01      	subs	r3, #1
 800606a:	4543      	cmp	r3, r8
 800606c:	dc09      	bgt.n	8006082 <_printf_float+0x256>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	079b      	lsls	r3, r3, #30
 8006072:	f100 8104 	bmi.w	800627e <_printf_float+0x452>
 8006076:	68e0      	ldr	r0, [r4, #12]
 8006078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800607a:	4298      	cmp	r0, r3
 800607c:	bfb8      	it	lt
 800607e:	4618      	movlt	r0, r3
 8006080:	e731      	b.n	8005ee6 <_printf_float+0xba>
 8006082:	2301      	movs	r3, #1
 8006084:	464a      	mov	r2, r9
 8006086:	4631      	mov	r1, r6
 8006088:	4628      	mov	r0, r5
 800608a:	47b8      	blx	r7
 800608c:	3001      	adds	r0, #1
 800608e:	f43f af28 	beq.w	8005ee2 <_printf_float+0xb6>
 8006092:	f108 0801 	add.w	r8, r8, #1
 8006096:	e7e6      	b.n	8006066 <_printf_float+0x23a>
 8006098:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	dc38      	bgt.n	8006110 <_printf_float+0x2e4>
 800609e:	2301      	movs	r3, #1
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <_printf_float+0x2e0>)
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f af1a 	beq.w	8005ee2 <_printf_float+0xb6>
 80060ae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d102      	bne.n	80060bc <_printf_float+0x290>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	07d9      	lsls	r1, r3, #31
 80060ba:	d5d8      	bpl.n	800606e <_printf_float+0x242>
 80060bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af0b 	beq.w	8005ee2 <_printf_float+0xb6>
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d6:	425b      	negs	r3, r3
 80060d8:	454b      	cmp	r3, r9
 80060da:	dc01      	bgt.n	80060e0 <_printf_float+0x2b4>
 80060dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060de:	e794      	b.n	800600a <_printf_float+0x1de>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f aef9 	beq.w	8005ee2 <_printf_float+0xb6>
 80060f0:	f109 0901 	add.w	r9, r9, #1
 80060f4:	e7ee      	b.n	80060d4 <_printf_float+0x2a8>
 80060f6:	bf00      	nop
 80060f8:	7fefffff 	.word	0x7fefffff
 80060fc:	080097bf 	.word	0x080097bf
 8006100:	080097c3 	.word	0x080097c3
 8006104:	080097c7 	.word	0x080097c7
 8006108:	080097cb 	.word	0x080097cb
 800610c:	080097cf 	.word	0x080097cf
 8006110:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006114:	429a      	cmp	r2, r3
 8006116:	bfa8      	it	ge
 8006118:	461a      	movge	r2, r3
 800611a:	2a00      	cmp	r2, #0
 800611c:	4691      	mov	r9, r2
 800611e:	dc37      	bgt.n	8006190 <_printf_float+0x364>
 8006120:	f04f 0b00 	mov.w	fp, #0
 8006124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006128:	f104 021a 	add.w	r2, r4, #26
 800612c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006130:	ebaa 0309 	sub.w	r3, sl, r9
 8006134:	455b      	cmp	r3, fp
 8006136:	dc33      	bgt.n	80061a0 <_printf_float+0x374>
 8006138:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800613c:	429a      	cmp	r2, r3
 800613e:	db3b      	blt.n	80061b8 <_printf_float+0x38c>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d438      	bmi.n	80061b8 <_printf_float+0x38c>
 8006146:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800614a:	eba2 0903 	sub.w	r9, r2, r3
 800614e:	eba2 020a 	sub.w	r2, r2, sl
 8006152:	4591      	cmp	r9, r2
 8006154:	bfa8      	it	ge
 8006156:	4691      	movge	r9, r2
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	dc34      	bgt.n	80061c8 <_printf_float+0x39c>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	eba3 0309 	sub.w	r3, r3, r9
 8006174:	4543      	cmp	r3, r8
 8006176:	f77f af7a 	ble.w	800606e <_printf_float+0x242>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f aeac 	beq.w	8005ee2 <_printf_float+0xb6>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	e7ec      	b.n	800616a <_printf_float+0x33e>
 8006190:	4613      	mov	r3, r2
 8006192:	4631      	mov	r1, r6
 8006194:	4642      	mov	r2, r8
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	d1c0      	bne.n	8006120 <_printf_float+0x2f4>
 800619e:	e6a0      	b.n	8005ee2 <_printf_float+0xb6>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae99 	beq.w	8005ee2 <_printf_float+0xb6>
 80061b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	e7b9      	b.n	800612c <_printf_float+0x300>
 80061b8:	4631      	mov	r1, r6
 80061ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	d1bf      	bne.n	8006146 <_printf_float+0x31a>
 80061c6:	e68c      	b.n	8005ee2 <_printf_float+0xb6>
 80061c8:	464b      	mov	r3, r9
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	eb08 020a 	add.w	r2, r8, sl
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	d1c2      	bne.n	800615e <_printf_float+0x332>
 80061d8:	e683      	b.n	8005ee2 <_printf_float+0xb6>
 80061da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061dc:	2a01      	cmp	r2, #1
 80061de:	dc01      	bgt.n	80061e4 <_printf_float+0x3b8>
 80061e0:	07db      	lsls	r3, r3, #31
 80061e2:	d539      	bpl.n	8006258 <_printf_float+0x42c>
 80061e4:	2301      	movs	r3, #1
 80061e6:	4642      	mov	r2, r8
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f ae77 	beq.w	8005ee2 <_printf_float+0xb6>
 80061f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f8:	4631      	mov	r1, r6
 80061fa:	4628      	mov	r0, r5
 80061fc:	47b8      	blx	r7
 80061fe:	3001      	adds	r0, #1
 8006200:	f43f ae6f 	beq.w	8005ee2 <_printf_float+0xb6>
 8006204:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006208:	2200      	movs	r2, #0
 800620a:	2300      	movs	r3, #0
 800620c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006210:	f7fa fc7e 	bl	8000b10 <__aeabi_dcmpeq>
 8006214:	b9d8      	cbnz	r0, 800624e <_printf_float+0x422>
 8006216:	f109 33ff 	add.w	r3, r9, #4294967295
 800621a:	f108 0201 	add.w	r2, r8, #1
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	47b8      	blx	r7
 8006224:	3001      	adds	r0, #1
 8006226:	d10e      	bne.n	8006246 <_printf_float+0x41a>
 8006228:	e65b      	b.n	8005ee2 <_printf_float+0xb6>
 800622a:	2301      	movs	r3, #1
 800622c:	464a      	mov	r2, r9
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	f43f ae54 	beq.w	8005ee2 <_printf_float+0xb6>
 800623a:	f108 0801 	add.w	r8, r8, #1
 800623e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006240:	3b01      	subs	r3, #1
 8006242:	4543      	cmp	r3, r8
 8006244:	dcf1      	bgt.n	800622a <_printf_float+0x3fe>
 8006246:	4653      	mov	r3, sl
 8006248:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800624c:	e6de      	b.n	800600c <_printf_float+0x1e0>
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	f104 091a 	add.w	r9, r4, #26
 8006256:	e7f2      	b.n	800623e <_printf_float+0x412>
 8006258:	2301      	movs	r3, #1
 800625a:	4642      	mov	r2, r8
 800625c:	e7df      	b.n	800621e <_printf_float+0x3f2>
 800625e:	2301      	movs	r3, #1
 8006260:	464a      	mov	r2, r9
 8006262:	4631      	mov	r1, r6
 8006264:	4628      	mov	r0, r5
 8006266:	47b8      	blx	r7
 8006268:	3001      	adds	r0, #1
 800626a:	f43f ae3a 	beq.w	8005ee2 <_printf_float+0xb6>
 800626e:	f108 0801 	add.w	r8, r8, #1
 8006272:	68e3      	ldr	r3, [r4, #12]
 8006274:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006276:	1a5b      	subs	r3, r3, r1
 8006278:	4543      	cmp	r3, r8
 800627a:	dcf0      	bgt.n	800625e <_printf_float+0x432>
 800627c:	e6fb      	b.n	8006076 <_printf_float+0x24a>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	f104 0919 	add.w	r9, r4, #25
 8006286:	e7f4      	b.n	8006272 <_printf_float+0x446>

08006288 <_printf_common>:
 8006288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	4616      	mov	r6, r2
 800628e:	4699      	mov	r9, r3
 8006290:	688a      	ldr	r2, [r1, #8]
 8006292:	690b      	ldr	r3, [r1, #16]
 8006294:	4607      	mov	r7, r0
 8006296:	4293      	cmp	r3, r2
 8006298:	bfb8      	it	lt
 800629a:	4613      	movlt	r3, r2
 800629c:	6033      	str	r3, [r6, #0]
 800629e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a2:	460c      	mov	r4, r1
 80062a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062a8:	b10a      	cbz	r2, 80062ae <_printf_common+0x26>
 80062aa:	3301      	adds	r3, #1
 80062ac:	6033      	str	r3, [r6, #0]
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	0699      	lsls	r1, r3, #26
 80062b2:	bf42      	ittt	mi
 80062b4:	6833      	ldrmi	r3, [r6, #0]
 80062b6:	3302      	addmi	r3, #2
 80062b8:	6033      	strmi	r3, [r6, #0]
 80062ba:	6825      	ldr	r5, [r4, #0]
 80062bc:	f015 0506 	ands.w	r5, r5, #6
 80062c0:	d106      	bne.n	80062d0 <_printf_common+0x48>
 80062c2:	f104 0a19 	add.w	sl, r4, #25
 80062c6:	68e3      	ldr	r3, [r4, #12]
 80062c8:	6832      	ldr	r2, [r6, #0]
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	42ab      	cmp	r3, r5
 80062ce:	dc2b      	bgt.n	8006328 <_printf_common+0xa0>
 80062d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d4:	1e13      	subs	r3, r2, #0
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	bf18      	it	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	0692      	lsls	r2, r2, #26
 80062de:	d430      	bmi.n	8006342 <_printf_common+0xba>
 80062e0:	4649      	mov	r1, r9
 80062e2:	4638      	mov	r0, r7
 80062e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e8:	47c0      	blx	r8
 80062ea:	3001      	adds	r0, #1
 80062ec:	d023      	beq.n	8006336 <_printf_common+0xae>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6922      	ldr	r2, [r4, #16]
 80062f2:	f003 0306 	and.w	r3, r3, #6
 80062f6:	2b04      	cmp	r3, #4
 80062f8:	bf14      	ite	ne
 80062fa:	2500      	movne	r5, #0
 80062fc:	6833      	ldreq	r3, [r6, #0]
 80062fe:	f04f 0600 	mov.w	r6, #0
 8006302:	bf08      	it	eq
 8006304:	68e5      	ldreq	r5, [r4, #12]
 8006306:	f104 041a 	add.w	r4, r4, #26
 800630a:	bf08      	it	eq
 800630c:	1aed      	subeq	r5, r5, r3
 800630e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006312:	bf08      	it	eq
 8006314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006318:	4293      	cmp	r3, r2
 800631a:	bfc4      	itt	gt
 800631c:	1a9b      	subgt	r3, r3, r2
 800631e:	18ed      	addgt	r5, r5, r3
 8006320:	42b5      	cmp	r5, r6
 8006322:	d11a      	bne.n	800635a <_printf_common+0xd2>
 8006324:	2000      	movs	r0, #0
 8006326:	e008      	b.n	800633a <_printf_common+0xb2>
 8006328:	2301      	movs	r3, #1
 800632a:	4652      	mov	r2, sl
 800632c:	4649      	mov	r1, r9
 800632e:	4638      	mov	r0, r7
 8006330:	47c0      	blx	r8
 8006332:	3001      	adds	r0, #1
 8006334:	d103      	bne.n	800633e <_printf_common+0xb6>
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	3501      	adds	r5, #1
 8006340:	e7c1      	b.n	80062c6 <_printf_common+0x3e>
 8006342:	2030      	movs	r0, #48	; 0x30
 8006344:	18e1      	adds	r1, r4, r3
 8006346:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006350:	4422      	add	r2, r4
 8006352:	3302      	adds	r3, #2
 8006354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006358:	e7c2      	b.n	80062e0 <_printf_common+0x58>
 800635a:	2301      	movs	r3, #1
 800635c:	4622      	mov	r2, r4
 800635e:	4649      	mov	r1, r9
 8006360:	4638      	mov	r0, r7
 8006362:	47c0      	blx	r8
 8006364:	3001      	adds	r0, #1
 8006366:	d0e6      	beq.n	8006336 <_printf_common+0xae>
 8006368:	3601      	adds	r6, #1
 800636a:	e7d9      	b.n	8006320 <_printf_common+0x98>

0800636c <_printf_i>:
 800636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	7e0f      	ldrb	r7, [r1, #24]
 8006372:	4691      	mov	r9, r2
 8006374:	2f78      	cmp	r7, #120	; 0x78
 8006376:	4680      	mov	r8, r0
 8006378:	460c      	mov	r4, r1
 800637a:	469a      	mov	sl, r3
 800637c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800637e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006382:	d807      	bhi.n	8006394 <_printf_i+0x28>
 8006384:	2f62      	cmp	r7, #98	; 0x62
 8006386:	d80a      	bhi.n	800639e <_printf_i+0x32>
 8006388:	2f00      	cmp	r7, #0
 800638a:	f000 80d5 	beq.w	8006538 <_printf_i+0x1cc>
 800638e:	2f58      	cmp	r7, #88	; 0x58
 8006390:	f000 80c1 	beq.w	8006516 <_printf_i+0x1aa>
 8006394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800639c:	e03a      	b.n	8006414 <_printf_i+0xa8>
 800639e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063a2:	2b15      	cmp	r3, #21
 80063a4:	d8f6      	bhi.n	8006394 <_printf_i+0x28>
 80063a6:	a101      	add	r1, pc, #4	; (adr r1, 80063ac <_printf_i+0x40>)
 80063a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ac:	08006405 	.word	0x08006405
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006395 	.word	0x08006395
 80063b8:	08006395 	.word	0x08006395
 80063bc:	08006395 	.word	0x08006395
 80063c0:	08006395 	.word	0x08006395
 80063c4:	08006419 	.word	0x08006419
 80063c8:	08006395 	.word	0x08006395
 80063cc:	08006395 	.word	0x08006395
 80063d0:	08006395 	.word	0x08006395
 80063d4:	08006395 	.word	0x08006395
 80063d8:	0800651f 	.word	0x0800651f
 80063dc:	08006445 	.word	0x08006445
 80063e0:	080064d9 	.word	0x080064d9
 80063e4:	08006395 	.word	0x08006395
 80063e8:	08006395 	.word	0x08006395
 80063ec:	08006541 	.word	0x08006541
 80063f0:	08006395 	.word	0x08006395
 80063f4:	08006445 	.word	0x08006445
 80063f8:	08006395 	.word	0x08006395
 80063fc:	08006395 	.word	0x08006395
 8006400:	080064e1 	.word	0x080064e1
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	1d1a      	adds	r2, r3, #4
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	602a      	str	r2, [r5, #0]
 800640c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006414:	2301      	movs	r3, #1
 8006416:	e0a0      	b.n	800655a <_printf_i+0x1ee>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	0607      	lsls	r7, r0, #24
 800641e:	f103 0104 	add.w	r1, r3, #4
 8006422:	6029      	str	r1, [r5, #0]
 8006424:	d501      	bpl.n	800642a <_printf_i+0xbe>
 8006426:	681e      	ldr	r6, [r3, #0]
 8006428:	e003      	b.n	8006432 <_printf_i+0xc6>
 800642a:	0646      	lsls	r6, r0, #25
 800642c:	d5fb      	bpl.n	8006426 <_printf_i+0xba>
 800642e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006432:	2e00      	cmp	r6, #0
 8006434:	da03      	bge.n	800643e <_printf_i+0xd2>
 8006436:	232d      	movs	r3, #45	; 0x2d
 8006438:	4276      	negs	r6, r6
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643e:	230a      	movs	r3, #10
 8006440:	4859      	ldr	r0, [pc, #356]	; (80065a8 <_printf_i+0x23c>)
 8006442:	e012      	b.n	800646a <_printf_i+0xfe>
 8006444:	682b      	ldr	r3, [r5, #0]
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1d19      	adds	r1, r3, #4
 800644a:	6029      	str	r1, [r5, #0]
 800644c:	0605      	lsls	r5, r0, #24
 800644e:	d501      	bpl.n	8006454 <_printf_i+0xe8>
 8006450:	681e      	ldr	r6, [r3, #0]
 8006452:	e002      	b.n	800645a <_printf_i+0xee>
 8006454:	0641      	lsls	r1, r0, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0xe4>
 8006458:	881e      	ldrh	r6, [r3, #0]
 800645a:	2f6f      	cmp	r7, #111	; 0x6f
 800645c:	bf0c      	ite	eq
 800645e:	2308      	moveq	r3, #8
 8006460:	230a      	movne	r3, #10
 8006462:	4851      	ldr	r0, [pc, #324]	; (80065a8 <_printf_i+0x23c>)
 8006464:	2100      	movs	r1, #0
 8006466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800646a:	6865      	ldr	r5, [r4, #4]
 800646c:	2d00      	cmp	r5, #0
 800646e:	bfa8      	it	ge
 8006470:	6821      	ldrge	r1, [r4, #0]
 8006472:	60a5      	str	r5, [r4, #8]
 8006474:	bfa4      	itt	ge
 8006476:	f021 0104 	bicge.w	r1, r1, #4
 800647a:	6021      	strge	r1, [r4, #0]
 800647c:	b90e      	cbnz	r6, 8006482 <_printf_i+0x116>
 800647e:	2d00      	cmp	r5, #0
 8006480:	d04b      	beq.n	800651a <_printf_i+0x1ae>
 8006482:	4615      	mov	r5, r2
 8006484:	fbb6 f1f3 	udiv	r1, r6, r3
 8006488:	fb03 6711 	mls	r7, r3, r1, r6
 800648c:	5dc7      	ldrb	r7, [r0, r7]
 800648e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006492:	4637      	mov	r7, r6
 8006494:	42bb      	cmp	r3, r7
 8006496:	460e      	mov	r6, r1
 8006498:	d9f4      	bls.n	8006484 <_printf_i+0x118>
 800649a:	2b08      	cmp	r3, #8
 800649c:	d10b      	bne.n	80064b6 <_printf_i+0x14a>
 800649e:	6823      	ldr	r3, [r4, #0]
 80064a0:	07de      	lsls	r6, r3, #31
 80064a2:	d508      	bpl.n	80064b6 <_printf_i+0x14a>
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	6861      	ldr	r1, [r4, #4]
 80064a8:	4299      	cmp	r1, r3
 80064aa:	bfde      	ittt	le
 80064ac:	2330      	movle	r3, #48	; 0x30
 80064ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b6:	1b52      	subs	r2, r2, r5
 80064b8:	6122      	str	r2, [r4, #16]
 80064ba:	464b      	mov	r3, r9
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f8cd a000 	str.w	sl, [sp]
 80064c4:	aa03      	add	r2, sp, #12
 80064c6:	f7ff fedf 	bl	8006288 <_printf_common>
 80064ca:	3001      	adds	r0, #1
 80064cc:	d14a      	bne.n	8006564 <_printf_i+0x1f8>
 80064ce:	f04f 30ff 	mov.w	r0, #4294967295
 80064d2:	b004      	add	sp, #16
 80064d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	f043 0320 	orr.w	r3, r3, #32
 80064de:	6023      	str	r3, [r4, #0]
 80064e0:	2778      	movs	r7, #120	; 0x78
 80064e2:	4832      	ldr	r0, [pc, #200]	; (80065ac <_printf_i+0x240>)
 80064e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	6829      	ldr	r1, [r5, #0]
 80064ec:	061f      	lsls	r7, r3, #24
 80064ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80064f2:	d402      	bmi.n	80064fa <_printf_i+0x18e>
 80064f4:	065f      	lsls	r7, r3, #25
 80064f6:	bf48      	it	mi
 80064f8:	b2b6      	uxthmi	r6, r6
 80064fa:	07df      	lsls	r7, r3, #31
 80064fc:	bf48      	it	mi
 80064fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006502:	6029      	str	r1, [r5, #0]
 8006504:	bf48      	it	mi
 8006506:	6023      	strmi	r3, [r4, #0]
 8006508:	b91e      	cbnz	r6, 8006512 <_printf_i+0x1a6>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	f023 0320 	bic.w	r3, r3, #32
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	2310      	movs	r3, #16
 8006514:	e7a6      	b.n	8006464 <_printf_i+0xf8>
 8006516:	4824      	ldr	r0, [pc, #144]	; (80065a8 <_printf_i+0x23c>)
 8006518:	e7e4      	b.n	80064e4 <_printf_i+0x178>
 800651a:	4615      	mov	r5, r2
 800651c:	e7bd      	b.n	800649a <_printf_i+0x12e>
 800651e:	682b      	ldr	r3, [r5, #0]
 8006520:	6826      	ldr	r6, [r4, #0]
 8006522:	1d18      	adds	r0, r3, #4
 8006524:	6961      	ldr	r1, [r4, #20]
 8006526:	6028      	str	r0, [r5, #0]
 8006528:	0635      	lsls	r5, r6, #24
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	d501      	bpl.n	8006532 <_printf_i+0x1c6>
 800652e:	6019      	str	r1, [r3, #0]
 8006530:	e002      	b.n	8006538 <_printf_i+0x1cc>
 8006532:	0670      	lsls	r0, r6, #25
 8006534:	d5fb      	bpl.n	800652e <_printf_i+0x1c2>
 8006536:	8019      	strh	r1, [r3, #0]
 8006538:	2300      	movs	r3, #0
 800653a:	4615      	mov	r5, r2
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	e7bc      	b.n	80064ba <_printf_i+0x14e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	2100      	movs	r1, #0
 8006544:	1d1a      	adds	r2, r3, #4
 8006546:	602a      	str	r2, [r5, #0]
 8006548:	681d      	ldr	r5, [r3, #0]
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	4628      	mov	r0, r5
 800654e:	f000 f9d4 	bl	80068fa <memchr>
 8006552:	b108      	cbz	r0, 8006558 <_printf_i+0x1ec>
 8006554:	1b40      	subs	r0, r0, r5
 8006556:	6060      	str	r0, [r4, #4]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	2300      	movs	r3, #0
 800655e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006562:	e7aa      	b.n	80064ba <_printf_i+0x14e>
 8006564:	462a      	mov	r2, r5
 8006566:	4649      	mov	r1, r9
 8006568:	4640      	mov	r0, r8
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	47d0      	blx	sl
 800656e:	3001      	adds	r0, #1
 8006570:	d0ad      	beq.n	80064ce <_printf_i+0x162>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	079b      	lsls	r3, r3, #30
 8006576:	d413      	bmi.n	80065a0 <_printf_i+0x234>
 8006578:	68e0      	ldr	r0, [r4, #12]
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	4298      	cmp	r0, r3
 800657e:	bfb8      	it	lt
 8006580:	4618      	movlt	r0, r3
 8006582:	e7a6      	b.n	80064d2 <_printf_i+0x166>
 8006584:	2301      	movs	r3, #1
 8006586:	4632      	mov	r2, r6
 8006588:	4649      	mov	r1, r9
 800658a:	4640      	mov	r0, r8
 800658c:	47d0      	blx	sl
 800658e:	3001      	adds	r0, #1
 8006590:	d09d      	beq.n	80064ce <_printf_i+0x162>
 8006592:	3501      	adds	r5, #1
 8006594:	68e3      	ldr	r3, [r4, #12]
 8006596:	9903      	ldr	r1, [sp, #12]
 8006598:	1a5b      	subs	r3, r3, r1
 800659a:	42ab      	cmp	r3, r5
 800659c:	dcf2      	bgt.n	8006584 <_printf_i+0x218>
 800659e:	e7eb      	b.n	8006578 <_printf_i+0x20c>
 80065a0:	2500      	movs	r5, #0
 80065a2:	f104 0619 	add.w	r6, r4, #25
 80065a6:	e7f5      	b.n	8006594 <_printf_i+0x228>
 80065a8:	080097d1 	.word	0x080097d1
 80065ac:	080097e2 	.word	0x080097e2

080065b0 <std>:
 80065b0:	2300      	movs	r3, #0
 80065b2:	b510      	push	{r4, lr}
 80065b4:	4604      	mov	r4, r0
 80065b6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065be:	6083      	str	r3, [r0, #8]
 80065c0:	8181      	strh	r1, [r0, #12]
 80065c2:	6643      	str	r3, [r0, #100]	; 0x64
 80065c4:	81c2      	strh	r2, [r0, #14]
 80065c6:	6183      	str	r3, [r0, #24]
 80065c8:	4619      	mov	r1, r3
 80065ca:	2208      	movs	r2, #8
 80065cc:	305c      	adds	r0, #92	; 0x5c
 80065ce:	f000 f914 	bl	80067fa <memset>
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <std+0x58>)
 80065d4:	6224      	str	r4, [r4, #32]
 80065d6:	6263      	str	r3, [r4, #36]	; 0x24
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <std+0x5c>)
 80065da:	62a3      	str	r3, [r4, #40]	; 0x28
 80065dc:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <std+0x60>)
 80065de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <std+0x64>)
 80065e2:	6323      	str	r3, [r4, #48]	; 0x30
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <std+0x68>)
 80065e6:	429c      	cmp	r4, r3
 80065e8:	d006      	beq.n	80065f8 <std+0x48>
 80065ea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065ee:	4294      	cmp	r4, r2
 80065f0:	d002      	beq.n	80065f8 <std+0x48>
 80065f2:	33d0      	adds	r3, #208	; 0xd0
 80065f4:	429c      	cmp	r4, r3
 80065f6:	d105      	bne.n	8006604 <std+0x54>
 80065f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006600:	f000 b978 	b.w	80068f4 <__retarget_lock_init_recursive>
 8006604:	bd10      	pop	{r4, pc}
 8006606:	bf00      	nop
 8006608:	08006775 	.word	0x08006775
 800660c:	08006797 	.word	0x08006797
 8006610:	080067cf 	.word	0x080067cf
 8006614:	080067f3 	.word	0x080067f3
 8006618:	20000800 	.word	0x20000800

0800661c <stdio_exit_handler>:
 800661c:	4a02      	ldr	r2, [pc, #8]	; (8006628 <stdio_exit_handler+0xc>)
 800661e:	4903      	ldr	r1, [pc, #12]	; (800662c <stdio_exit_handler+0x10>)
 8006620:	4803      	ldr	r0, [pc, #12]	; (8006630 <stdio_exit_handler+0x14>)
 8006622:	f000 b869 	b.w	80066f8 <_fwalk_sglue>
 8006626:	bf00      	nop
 8006628:	2000001c 	.word	0x2000001c
 800662c:	0800828d 	.word	0x0800828d
 8006630:	20000028 	.word	0x20000028

08006634 <cleanup_stdio>:
 8006634:	6841      	ldr	r1, [r0, #4]
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <cleanup_stdio+0x34>)
 8006638:	b510      	push	{r4, lr}
 800663a:	4299      	cmp	r1, r3
 800663c:	4604      	mov	r4, r0
 800663e:	d001      	beq.n	8006644 <cleanup_stdio+0x10>
 8006640:	f001 fe24 	bl	800828c <_fflush_r>
 8006644:	68a1      	ldr	r1, [r4, #8]
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <cleanup_stdio+0x38>)
 8006648:	4299      	cmp	r1, r3
 800664a:	d002      	beq.n	8006652 <cleanup_stdio+0x1e>
 800664c:	4620      	mov	r0, r4
 800664e:	f001 fe1d 	bl	800828c <_fflush_r>
 8006652:	68e1      	ldr	r1, [r4, #12]
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <cleanup_stdio+0x3c>)
 8006656:	4299      	cmp	r1, r3
 8006658:	d004      	beq.n	8006664 <cleanup_stdio+0x30>
 800665a:	4620      	mov	r0, r4
 800665c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006660:	f001 be14 	b.w	800828c <_fflush_r>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	20000800 	.word	0x20000800
 800666c:	20000868 	.word	0x20000868
 8006670:	200008d0 	.word	0x200008d0

08006674 <global_stdio_init.part.0>:
 8006674:	b510      	push	{r4, lr}
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <global_stdio_init.part.0+0x30>)
 8006678:	4c0b      	ldr	r4, [pc, #44]	; (80066a8 <global_stdio_init.part.0+0x34>)
 800667a:	4a0c      	ldr	r2, [pc, #48]	; (80066ac <global_stdio_init.part.0+0x38>)
 800667c:	4620      	mov	r0, r4
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	2104      	movs	r1, #4
 8006682:	2200      	movs	r2, #0
 8006684:	f7ff ff94 	bl	80065b0 <std>
 8006688:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800668c:	2201      	movs	r2, #1
 800668e:	2109      	movs	r1, #9
 8006690:	f7ff ff8e 	bl	80065b0 <std>
 8006694:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006698:	2202      	movs	r2, #2
 800669a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669e:	2112      	movs	r1, #18
 80066a0:	f7ff bf86 	b.w	80065b0 <std>
 80066a4:	20000938 	.word	0x20000938
 80066a8:	20000800 	.word	0x20000800
 80066ac:	0800661d 	.word	0x0800661d

080066b0 <__sfp_lock_acquire>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__sfp_lock_acquire+0x8>)
 80066b2:	f000 b920 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	20000941 	.word	0x20000941

080066bc <__sfp_lock_release>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__sfp_lock_release+0x8>)
 80066be:	f000 b91b 	b.w	80068f8 <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	20000941 	.word	0x20000941

080066c8 <__sinit>:
 80066c8:	b510      	push	{r4, lr}
 80066ca:	4604      	mov	r4, r0
 80066cc:	f7ff fff0 	bl	80066b0 <__sfp_lock_acquire>
 80066d0:	6a23      	ldr	r3, [r4, #32]
 80066d2:	b11b      	cbz	r3, 80066dc <__sinit+0x14>
 80066d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d8:	f7ff bff0 	b.w	80066bc <__sfp_lock_release>
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <__sinit+0x28>)
 80066de:	6223      	str	r3, [r4, #32]
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <__sinit+0x2c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f5      	bne.n	80066d4 <__sinit+0xc>
 80066e8:	f7ff ffc4 	bl	8006674 <global_stdio_init.part.0>
 80066ec:	e7f2      	b.n	80066d4 <__sinit+0xc>
 80066ee:	bf00      	nop
 80066f0:	08006635 	.word	0x08006635
 80066f4:	20000938 	.word	0x20000938

080066f8 <_fwalk_sglue>:
 80066f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066fc:	4607      	mov	r7, r0
 80066fe:	4688      	mov	r8, r1
 8006700:	4614      	mov	r4, r2
 8006702:	2600      	movs	r6, #0
 8006704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006708:	f1b9 0901 	subs.w	r9, r9, #1
 800670c:	d505      	bpl.n	800671a <_fwalk_sglue+0x22>
 800670e:	6824      	ldr	r4, [r4, #0]
 8006710:	2c00      	cmp	r4, #0
 8006712:	d1f7      	bne.n	8006704 <_fwalk_sglue+0xc>
 8006714:	4630      	mov	r0, r6
 8006716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d907      	bls.n	8006730 <_fwalk_sglue+0x38>
 8006720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006724:	3301      	adds	r3, #1
 8006726:	d003      	beq.n	8006730 <_fwalk_sglue+0x38>
 8006728:	4629      	mov	r1, r5
 800672a:	4638      	mov	r0, r7
 800672c:	47c0      	blx	r8
 800672e:	4306      	orrs	r6, r0
 8006730:	3568      	adds	r5, #104	; 0x68
 8006732:	e7e9      	b.n	8006708 <_fwalk_sglue+0x10>

08006734 <siprintf>:
 8006734:	b40e      	push	{r1, r2, r3}
 8006736:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800673a:	b500      	push	{lr}
 800673c:	b09c      	sub	sp, #112	; 0x70
 800673e:	ab1d      	add	r3, sp, #116	; 0x74
 8006740:	9002      	str	r0, [sp, #8]
 8006742:	9006      	str	r0, [sp, #24]
 8006744:	9107      	str	r1, [sp, #28]
 8006746:	9104      	str	r1, [sp, #16]
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <siprintf+0x38>)
 800674a:	4909      	ldr	r1, [pc, #36]	; (8006770 <siprintf+0x3c>)
 800674c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006750:	9105      	str	r1, [sp, #20]
 8006752:	6800      	ldr	r0, [r0, #0]
 8006754:	a902      	add	r1, sp, #8
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	f001 fc18 	bl	8007f8c <_svfiprintf_r>
 800675c:	2200      	movs	r2, #0
 800675e:	9b02      	ldr	r3, [sp, #8]
 8006760:	701a      	strb	r2, [r3, #0]
 8006762:	b01c      	add	sp, #112	; 0x70
 8006764:	f85d eb04 	ldr.w	lr, [sp], #4
 8006768:	b003      	add	sp, #12
 800676a:	4770      	bx	lr
 800676c:	20000074 	.word	0x20000074
 8006770:	ffff0208 	.word	0xffff0208

08006774 <__sread>:
 8006774:	b510      	push	{r4, lr}
 8006776:	460c      	mov	r4, r1
 8006778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677c:	f000 f86c 	bl	8006858 <_read_r>
 8006780:	2800      	cmp	r0, #0
 8006782:	bfab      	itete	ge
 8006784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006786:	89a3      	ldrhlt	r3, [r4, #12]
 8006788:	181b      	addge	r3, r3, r0
 800678a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800678e:	bfac      	ite	ge
 8006790:	6563      	strge	r3, [r4, #84]	; 0x54
 8006792:	81a3      	strhlt	r3, [r4, #12]
 8006794:	bd10      	pop	{r4, pc}

08006796 <__swrite>:
 8006796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679a:	461f      	mov	r7, r3
 800679c:	898b      	ldrh	r3, [r1, #12]
 800679e:	4605      	mov	r5, r0
 80067a0:	05db      	lsls	r3, r3, #23
 80067a2:	460c      	mov	r4, r1
 80067a4:	4616      	mov	r6, r2
 80067a6:	d505      	bpl.n	80067b4 <__swrite+0x1e>
 80067a8:	2302      	movs	r3, #2
 80067aa:	2200      	movs	r2, #0
 80067ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b0:	f000 f840 	bl	8006834 <_lseek_r>
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	4632      	mov	r2, r6
 80067b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	4628      	mov	r0, r5
 80067c0:	463b      	mov	r3, r7
 80067c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ca:	f000 b857 	b.w	800687c <_write_r>

080067ce <__sseek>:
 80067ce:	b510      	push	{r4, lr}
 80067d0:	460c      	mov	r4, r1
 80067d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d6:	f000 f82d 	bl	8006834 <_lseek_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	89a3      	ldrh	r3, [r4, #12]
 80067de:	bf15      	itete	ne
 80067e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80067e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ea:	81a3      	strheq	r3, [r4, #12]
 80067ec:	bf18      	it	ne
 80067ee:	81a3      	strhne	r3, [r4, #12]
 80067f0:	bd10      	pop	{r4, pc}

080067f2 <__sclose>:
 80067f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f6:	f000 b80d 	b.w	8006814 <_close_r>

080067fa <memset>:
 80067fa:	4603      	mov	r3, r0
 80067fc:	4402      	add	r2, r0
 80067fe:	4293      	cmp	r3, r2
 8006800:	d100      	bne.n	8006804 <memset+0xa>
 8006802:	4770      	bx	lr
 8006804:	f803 1b01 	strb.w	r1, [r3], #1
 8006808:	e7f9      	b.n	80067fe <memset+0x4>
	...

0800680c <_localeconv_r>:
 800680c:	4800      	ldr	r0, [pc, #0]	; (8006810 <_localeconv_r+0x4>)
 800680e:	4770      	bx	lr
 8006810:	20000168 	.word	0x20000168

08006814 <_close_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	2300      	movs	r3, #0
 8006818:	4d05      	ldr	r5, [pc, #20]	; (8006830 <_close_r+0x1c>)
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fc fba8 	bl	8002f74 <_close>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_close_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_close_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	2000093c 	.word	0x2000093c

08006834 <_lseek_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4604      	mov	r4, r0
 8006838:	4608      	mov	r0, r1
 800683a:	4611      	mov	r1, r2
 800683c:	2200      	movs	r2, #0
 800683e:	4d05      	ldr	r5, [pc, #20]	; (8006854 <_lseek_r+0x20>)
 8006840:	602a      	str	r2, [r5, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	f7fc fbba 	bl	8002fbc <_lseek>
 8006848:	1c43      	adds	r3, r0, #1
 800684a:	d102      	bne.n	8006852 <_lseek_r+0x1e>
 800684c:	682b      	ldr	r3, [r5, #0]
 800684e:	b103      	cbz	r3, 8006852 <_lseek_r+0x1e>
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	bd38      	pop	{r3, r4, r5, pc}
 8006854:	2000093c 	.word	0x2000093c

08006858 <_read_r>:
 8006858:	b538      	push	{r3, r4, r5, lr}
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	2200      	movs	r2, #0
 8006862:	4d05      	ldr	r5, [pc, #20]	; (8006878 <_read_r+0x20>)
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	f7fc fb67 	bl	8002f3a <_read>
 800686c:	1c43      	adds	r3, r0, #1
 800686e:	d102      	bne.n	8006876 <_read_r+0x1e>
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	b103      	cbz	r3, 8006876 <_read_r+0x1e>
 8006874:	6023      	str	r3, [r4, #0]
 8006876:	bd38      	pop	{r3, r4, r5, pc}
 8006878:	2000093c 	.word	0x2000093c

0800687c <_write_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	2200      	movs	r2, #0
 8006886:	4d05      	ldr	r5, [pc, #20]	; (800689c <_write_r+0x20>)
 8006888:	602a      	str	r2, [r5, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	f7fb fc50 	bl	8002130 <_write>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_write_r+0x1e>
 8006894:	682b      	ldr	r3, [r5, #0]
 8006896:	b103      	cbz	r3, 800689a <_write_r+0x1e>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	2000093c 	.word	0x2000093c

080068a0 <__errno>:
 80068a0:	4b01      	ldr	r3, [pc, #4]	; (80068a8 <__errno+0x8>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	20000074 	.word	0x20000074

080068ac <__libc_init_array>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	2600      	movs	r6, #0
 80068b0:	4d0c      	ldr	r5, [pc, #48]	; (80068e4 <__libc_init_array+0x38>)
 80068b2:	4c0d      	ldr	r4, [pc, #52]	; (80068e8 <__libc_init_array+0x3c>)
 80068b4:	1b64      	subs	r4, r4, r5
 80068b6:	10a4      	asrs	r4, r4, #2
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	d109      	bne.n	80068d0 <__libc_init_array+0x24>
 80068bc:	f002 f886 	bl	80089cc <_init>
 80068c0:	2600      	movs	r6, #0
 80068c2:	4d0a      	ldr	r5, [pc, #40]	; (80068ec <__libc_init_array+0x40>)
 80068c4:	4c0a      	ldr	r4, [pc, #40]	; (80068f0 <__libc_init_array+0x44>)
 80068c6:	1b64      	subs	r4, r4, r5
 80068c8:	10a4      	asrs	r4, r4, #2
 80068ca:	42a6      	cmp	r6, r4
 80068cc:	d105      	bne.n	80068da <__libc_init_array+0x2e>
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d4:	4798      	blx	r3
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7ee      	b.n	80068b8 <__libc_init_array+0xc>
 80068da:	f855 3b04 	ldr.w	r3, [r5], #4
 80068de:	4798      	blx	r3
 80068e0:	3601      	adds	r6, #1
 80068e2:	e7f2      	b.n	80068ca <__libc_init_array+0x1e>
 80068e4:	08009b34 	.word	0x08009b34
 80068e8:	08009b34 	.word	0x08009b34
 80068ec:	08009b34 	.word	0x08009b34
 80068f0:	08009b38 	.word	0x08009b38

080068f4 <__retarget_lock_init_recursive>:
 80068f4:	4770      	bx	lr

080068f6 <__retarget_lock_acquire_recursive>:
 80068f6:	4770      	bx	lr

080068f8 <__retarget_lock_release_recursive>:
 80068f8:	4770      	bx	lr

080068fa <memchr>:
 80068fa:	4603      	mov	r3, r0
 80068fc:	b510      	push	{r4, lr}
 80068fe:	b2c9      	uxtb	r1, r1
 8006900:	4402      	add	r2, r0
 8006902:	4293      	cmp	r3, r2
 8006904:	4618      	mov	r0, r3
 8006906:	d101      	bne.n	800690c <memchr+0x12>
 8006908:	2000      	movs	r0, #0
 800690a:	e003      	b.n	8006914 <memchr+0x1a>
 800690c:	7804      	ldrb	r4, [r0, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	428c      	cmp	r4, r1
 8006912:	d1f6      	bne.n	8006902 <memchr+0x8>
 8006914:	bd10      	pop	{r4, pc}

08006916 <quorem>:
 8006916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	6903      	ldr	r3, [r0, #16]
 800691c:	690c      	ldr	r4, [r1, #16]
 800691e:	4607      	mov	r7, r0
 8006920:	42a3      	cmp	r3, r4
 8006922:	db7f      	blt.n	8006a24 <quorem+0x10e>
 8006924:	3c01      	subs	r4, #1
 8006926:	f100 0514 	add.w	r5, r0, #20
 800692a:	f101 0814 	add.w	r8, r1, #20
 800692e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006932:	9301      	str	r3, [sp, #4]
 8006934:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800693c:	3301      	adds	r3, #1
 800693e:	429a      	cmp	r2, r3
 8006940:	fbb2 f6f3 	udiv	r6, r2, r3
 8006944:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006948:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800694c:	d331      	bcc.n	80069b2 <quorem+0x9c>
 800694e:	f04f 0e00 	mov.w	lr, #0
 8006952:	4640      	mov	r0, r8
 8006954:	46ac      	mov	ip, r5
 8006956:	46f2      	mov	sl, lr
 8006958:	f850 2b04 	ldr.w	r2, [r0], #4
 800695c:	b293      	uxth	r3, r2
 800695e:	fb06 e303 	mla	r3, r6, r3, lr
 8006962:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006966:	0c1a      	lsrs	r2, r3, #16
 8006968:	b29b      	uxth	r3, r3
 800696a:	fb06 220e 	mla	r2, r6, lr, r2
 800696e:	ebaa 0303 	sub.w	r3, sl, r3
 8006972:	f8dc a000 	ldr.w	sl, [ip]
 8006976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800697a:	fa1f fa8a 	uxth.w	sl, sl
 800697e:	4453      	add	r3, sl
 8006980:	f8dc a000 	ldr.w	sl, [ip]
 8006984:	b292      	uxth	r2, r2
 8006986:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800698a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800698e:	b29b      	uxth	r3, r3
 8006990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006994:	4581      	cmp	r9, r0
 8006996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800699a:	f84c 3b04 	str.w	r3, [ip], #4
 800699e:	d2db      	bcs.n	8006958 <quorem+0x42>
 80069a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80069a4:	b92b      	cbnz	r3, 80069b2 <quorem+0x9c>
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	3b04      	subs	r3, #4
 80069aa:	429d      	cmp	r5, r3
 80069ac:	461a      	mov	r2, r3
 80069ae:	d32d      	bcc.n	8006a0c <quorem+0xf6>
 80069b0:	613c      	str	r4, [r7, #16]
 80069b2:	4638      	mov	r0, r7
 80069b4:	f001 f992 	bl	8007cdc <__mcmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	db23      	blt.n	8006a04 <quorem+0xee>
 80069bc:	4629      	mov	r1, r5
 80069be:	2000      	movs	r0, #0
 80069c0:	3601      	adds	r6, #1
 80069c2:	f858 2b04 	ldr.w	r2, [r8], #4
 80069c6:	f8d1 c000 	ldr.w	ip, [r1]
 80069ca:	b293      	uxth	r3, r2
 80069cc:	1ac3      	subs	r3, r0, r3
 80069ce:	0c12      	lsrs	r2, r2, #16
 80069d0:	fa1f f08c 	uxth.w	r0, ip
 80069d4:	4403      	add	r3, r0
 80069d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e4:	45c1      	cmp	r9, r8
 80069e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069ea:	f841 3b04 	str.w	r3, [r1], #4
 80069ee:	d2e8      	bcs.n	80069c2 <quorem+0xac>
 80069f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069f8:	b922      	cbnz	r2, 8006a04 <quorem+0xee>
 80069fa:	3b04      	subs	r3, #4
 80069fc:	429d      	cmp	r5, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	d30a      	bcc.n	8006a18 <quorem+0x102>
 8006a02:	613c      	str	r4, [r7, #16]
 8006a04:	4630      	mov	r0, r6
 8006a06:	b003      	add	sp, #12
 8006a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d1cd      	bne.n	80069b0 <quorem+0x9a>
 8006a14:	3c01      	subs	r4, #1
 8006a16:	e7c8      	b.n	80069aa <quorem+0x94>
 8006a18:	6812      	ldr	r2, [r2, #0]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	d1f0      	bne.n	8006a02 <quorem+0xec>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7eb      	b.n	80069fc <quorem+0xe6>
 8006a24:	2000      	movs	r0, #0
 8006a26:	e7ee      	b.n	8006a06 <quorem+0xf0>

08006a28 <_dtoa_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	461f      	mov	r7, r3
 8006a30:	69c4      	ldr	r4, [r0, #28]
 8006a32:	b099      	sub	sp, #100	; 0x64
 8006a34:	4605      	mov	r5, r0
 8006a36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006a3a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006a3e:	b974      	cbnz	r4, 8006a5e <_dtoa_r+0x36>
 8006a40:	2010      	movs	r0, #16
 8006a42:	f000 fe1d 	bl	8007680 <malloc>
 8006a46:	4602      	mov	r2, r0
 8006a48:	61e8      	str	r0, [r5, #28]
 8006a4a:	b920      	cbnz	r0, 8006a56 <_dtoa_r+0x2e>
 8006a4c:	21ef      	movs	r1, #239	; 0xef
 8006a4e:	4bac      	ldr	r3, [pc, #688]	; (8006d00 <_dtoa_r+0x2d8>)
 8006a50:	48ac      	ldr	r0, [pc, #688]	; (8006d04 <_dtoa_r+0x2dc>)
 8006a52:	f001 fc7b 	bl	800834c <__assert_func>
 8006a56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a5a:	6004      	str	r4, [r0, #0]
 8006a5c:	60c4      	str	r4, [r0, #12]
 8006a5e:	69eb      	ldr	r3, [r5, #28]
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	b151      	cbz	r1, 8006a7a <_dtoa_r+0x52>
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	2301      	movs	r3, #1
 8006a68:	4093      	lsls	r3, r2
 8006a6a:	604a      	str	r2, [r1, #4]
 8006a6c:	608b      	str	r3, [r1, #8]
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 fefa 	bl	8007868 <_Bfree>
 8006a74:	2200      	movs	r2, #0
 8006a76:	69eb      	ldr	r3, [r5, #28]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	1e3b      	subs	r3, r7, #0
 8006a7c:	bfaf      	iteee	ge
 8006a7e:	2300      	movge	r3, #0
 8006a80:	2201      	movlt	r2, #1
 8006a82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a86:	9305      	strlt	r3, [sp, #20]
 8006a88:	bfa8      	it	ge
 8006a8a:	f8c8 3000 	strge.w	r3, [r8]
 8006a8e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a92:	4b9d      	ldr	r3, [pc, #628]	; (8006d08 <_dtoa_r+0x2e0>)
 8006a94:	bfb8      	it	lt
 8006a96:	f8c8 2000 	strlt.w	r2, [r8]
 8006a9a:	ea33 0309 	bics.w	r3, r3, r9
 8006a9e:	d119      	bne.n	8006ad4 <_dtoa_r+0xac>
 8006aa0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006aa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aac:	4333      	orrs	r3, r6
 8006aae:	f000 8589 	beq.w	80075c4 <_dtoa_r+0xb9c>
 8006ab2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ab4:	b953      	cbnz	r3, 8006acc <_dtoa_r+0xa4>
 8006ab6:	4b95      	ldr	r3, [pc, #596]	; (8006d0c <_dtoa_r+0x2e4>)
 8006ab8:	e023      	b.n	8006b02 <_dtoa_r+0xda>
 8006aba:	4b95      	ldr	r3, [pc, #596]	; (8006d10 <_dtoa_r+0x2e8>)
 8006abc:	9303      	str	r3, [sp, #12]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	9803      	ldr	r0, [sp, #12]
 8006ac6:	b019      	add	sp, #100	; 0x64
 8006ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006acc:	4b8f      	ldr	r3, [pc, #572]	; (8006d0c <_dtoa_r+0x2e4>)
 8006ace:	9303      	str	r3, [sp, #12]
 8006ad0:	3303      	adds	r3, #3
 8006ad2:	e7f5      	b.n	8006ac0 <_dtoa_r+0x98>
 8006ad4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ad8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f7fa f814 	bl	8000b10 <__aeabi_dcmpeq>
 8006ae8:	4680      	mov	r8, r0
 8006aea:	b160      	cbz	r0, 8006b06 <_dtoa_r+0xde>
 8006aec:	2301      	movs	r3, #1
 8006aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8562 	beq.w	80075be <_dtoa_r+0xb96>
 8006afa:	4b86      	ldr	r3, [pc, #536]	; (8006d14 <_dtoa_r+0x2ec>)
 8006afc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	e7de      	b.n	8006ac4 <_dtoa_r+0x9c>
 8006b06:	ab16      	add	r3, sp, #88	; 0x58
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	ab17      	add	r3, sp, #92	; 0x5c
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	4628      	mov	r0, r5
 8006b10:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006b14:	f001 f98a 	bl	8007e2c <__d2b>
 8006b18:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006b1c:	4682      	mov	sl, r0
 8006b1e:	2c00      	cmp	r4, #0
 8006b20:	d07e      	beq.n	8006c20 <_dtoa_r+0x1f8>
 8006b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b28:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b30:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006b34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006b38:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	2200      	movs	r2, #0
 8006b40:	4b75      	ldr	r3, [pc, #468]	; (8006d18 <_dtoa_r+0x2f0>)
 8006b42:	f7f9 fbc5 	bl	80002d0 <__aeabi_dsub>
 8006b46:	a368      	add	r3, pc, #416	; (adr r3, 8006ce8 <_dtoa_r+0x2c0>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	f7f9 fd78 	bl	8000640 <__aeabi_dmul>
 8006b50:	a367      	add	r3, pc, #412	; (adr r3, 8006cf0 <_dtoa_r+0x2c8>)
 8006b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b56:	f7f9 fbbd 	bl	80002d4 <__adddf3>
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	460f      	mov	r7, r1
 8006b60:	f7f9 fd04 	bl	800056c <__aeabi_i2d>
 8006b64:	a364      	add	r3, pc, #400	; (adr r3, 8006cf8 <_dtoa_r+0x2d0>)
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f7f9 fd69 	bl	8000640 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4630      	mov	r0, r6
 8006b74:	4639      	mov	r1, r7
 8006b76:	f7f9 fbad 	bl	80002d4 <__adddf3>
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	f7fa f80f 	bl	8000ba0 <__aeabi_d2iz>
 8006b82:	2200      	movs	r2, #0
 8006b84:	4683      	mov	fp, r0
 8006b86:	2300      	movs	r3, #0
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 ffca 	bl	8000b24 <__aeabi_dcmplt>
 8006b90:	b148      	cbz	r0, 8006ba6 <_dtoa_r+0x17e>
 8006b92:	4658      	mov	r0, fp
 8006b94:	f7f9 fcea 	bl	800056c <__aeabi_i2d>
 8006b98:	4632      	mov	r2, r6
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	f7f9 ffb8 	bl	8000b10 <__aeabi_dcmpeq>
 8006ba0:	b908      	cbnz	r0, 8006ba6 <_dtoa_r+0x17e>
 8006ba2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ba6:	f1bb 0f16 	cmp.w	fp, #22
 8006baa:	d857      	bhi.n	8006c5c <_dtoa_r+0x234>
 8006bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006bb0:	4b5a      	ldr	r3, [pc, #360]	; (8006d1c <_dtoa_r+0x2f4>)
 8006bb2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	f7f9 ffb3 	bl	8000b24 <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d04e      	beq.n	8006c60 <_dtoa_r+0x238>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006bcc:	1b1b      	subs	r3, r3, r4
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	bf46      	itte	mi
 8006bd2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006bd6:	2300      	movmi	r3, #0
 8006bd8:	f04f 0900 	movpl.w	r9, #0
 8006bdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006bde:	bf48      	it	mi
 8006be0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006be2:	f1bb 0f00 	cmp.w	fp, #0
 8006be6:	db3d      	blt.n	8006c64 <_dtoa_r+0x23c>
 8006be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006bee:	445b      	add	r3, fp
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d867      	bhi.n	8006ccc <_dtoa_r+0x2a4>
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	bfc4      	itt	gt
 8006c00:	3b04      	subgt	r3, #4
 8006c02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006c04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c06:	bfc8      	it	gt
 8006c08:	2400      	movgt	r4, #0
 8006c0a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c0e:	bfd8      	it	le
 8006c10:	2401      	movle	r4, #1
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	f200 8086 	bhi.w	8006d24 <_dtoa_r+0x2fc>
 8006c18:	e8df f003 	tbb	[pc, r3]
 8006c1c:	5637392c 	.word	0x5637392c
 8006c20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006c24:	441c      	add	r4, r3
 8006c26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	bfc1      	itttt	gt
 8006c2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c32:	fa09 f903 	lslgt.w	r9, r9, r3
 8006c36:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006c3a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006c3e:	bfd6      	itet	le
 8006c40:	f1c3 0320 	rsble	r3, r3, #32
 8006c44:	ea49 0003 	orrgt.w	r0, r9, r3
 8006c48:	fa06 f003 	lslle.w	r0, r6, r3
 8006c4c:	f7f9 fc7e 	bl	800054c <__aeabi_ui2d>
 8006c50:	2201      	movs	r2, #1
 8006c52:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006c56:	3c01      	subs	r4, #1
 8006c58:	9213      	str	r2, [sp, #76]	; 0x4c
 8006c5a:	e76f      	b.n	8006b3c <_dtoa_r+0x114>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e7b3      	b.n	8006bc8 <_dtoa_r+0x1a0>
 8006c60:	900f      	str	r0, [sp, #60]	; 0x3c
 8006c62:	e7b2      	b.n	8006bca <_dtoa_r+0x1a2>
 8006c64:	f1cb 0300 	rsb	r3, fp, #0
 8006c68:	930a      	str	r3, [sp, #40]	; 0x28
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	eba9 090b 	sub.w	r9, r9, fp
 8006c70:	930e      	str	r3, [sp, #56]	; 0x38
 8006c72:	e7c0      	b.n	8006bf6 <_dtoa_r+0x1ce>
 8006c74:	2300      	movs	r3, #0
 8006c76:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	dc55      	bgt.n	8006d2a <_dtoa_r+0x302>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	461a      	mov	r2, r3
 8006c82:	9306      	str	r3, [sp, #24]
 8006c84:	9308      	str	r3, [sp, #32]
 8006c86:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c88:	e00b      	b.n	8006ca2 <_dtoa_r+0x27a>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e7f3      	b.n	8006c76 <_dtoa_r+0x24e>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c94:	445b      	add	r3, fp
 8006c96:	9306      	str	r3, [sp, #24]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	9308      	str	r3, [sp, #32]
 8006c9e:	bfb8      	it	lt
 8006ca0:	2301      	movlt	r3, #1
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	69e8      	ldr	r0, [r5, #28]
 8006ca8:	f102 0614 	add.w	r6, r2, #20
 8006cac:	429e      	cmp	r6, r3
 8006cae:	d940      	bls.n	8006d32 <_dtoa_r+0x30a>
 8006cb0:	6041      	str	r1, [r0, #4]
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 fd98 	bl	80077e8 <_Balloc>
 8006cb8:	9003      	str	r0, [sp, #12]
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d13c      	bne.n	8006d38 <_dtoa_r+0x310>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	f240 11af 	movw	r1, #431	; 0x1af
 8006cc4:	4b16      	ldr	r3, [pc, #88]	; (8006d20 <_dtoa_r+0x2f8>)
 8006cc6:	e6c3      	b.n	8006a50 <_dtoa_r+0x28>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e7e1      	b.n	8006c90 <_dtoa_r+0x268>
 8006ccc:	2401      	movs	r4, #1
 8006cce:	2300      	movs	r3, #0
 8006cd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006cd2:	9322      	str	r3, [sp, #136]	; 0x88
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd8:	2200      	movs	r2, #0
 8006cda:	9306      	str	r3, [sp, #24]
 8006cdc:	9308      	str	r3, [sp, #32]
 8006cde:	2312      	movs	r3, #18
 8006ce0:	e7d1      	b.n	8006c86 <_dtoa_r+0x25e>
 8006ce2:	bf00      	nop
 8006ce4:	f3af 8000 	nop.w
 8006ce8:	636f4361 	.word	0x636f4361
 8006cec:	3fd287a7 	.word	0x3fd287a7
 8006cf0:	8b60c8b3 	.word	0x8b60c8b3
 8006cf4:	3fc68a28 	.word	0x3fc68a28
 8006cf8:	509f79fb 	.word	0x509f79fb
 8006cfc:	3fd34413 	.word	0x3fd34413
 8006d00:	08009800 	.word	0x08009800
 8006d04:	08009817 	.word	0x08009817
 8006d08:	7ff00000 	.word	0x7ff00000
 8006d0c:	080097fc 	.word	0x080097fc
 8006d10:	080097f3 	.word	0x080097f3
 8006d14:	080097d0 	.word	0x080097d0
 8006d18:	3ff80000 	.word	0x3ff80000
 8006d1c:	08009908 	.word	0x08009908
 8006d20:	0800986f 	.word	0x0800986f
 8006d24:	2301      	movs	r3, #1
 8006d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d28:	e7d4      	b.n	8006cd4 <_dtoa_r+0x2ac>
 8006d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006d2c:	9306      	str	r3, [sp, #24]
 8006d2e:	9308      	str	r3, [sp, #32]
 8006d30:	e7b7      	b.n	8006ca2 <_dtoa_r+0x27a>
 8006d32:	3101      	adds	r1, #1
 8006d34:	0052      	lsls	r2, r2, #1
 8006d36:	e7b7      	b.n	8006ca8 <_dtoa_r+0x280>
 8006d38:	69eb      	ldr	r3, [r5, #28]
 8006d3a:	9a03      	ldr	r2, [sp, #12]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	9b08      	ldr	r3, [sp, #32]
 8006d40:	2b0e      	cmp	r3, #14
 8006d42:	f200 80a8 	bhi.w	8006e96 <_dtoa_r+0x46e>
 8006d46:	2c00      	cmp	r4, #0
 8006d48:	f000 80a5 	beq.w	8006e96 <_dtoa_r+0x46e>
 8006d4c:	f1bb 0f00 	cmp.w	fp, #0
 8006d50:	dd34      	ble.n	8006dbc <_dtoa_r+0x394>
 8006d52:	4b9a      	ldr	r3, [pc, #616]	; (8006fbc <_dtoa_r+0x594>)
 8006d54:	f00b 020f 	and.w	r2, fp, #15
 8006d58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006d60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d68:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006d6c:	d016      	beq.n	8006d9c <_dtoa_r+0x374>
 8006d6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d72:	4b93      	ldr	r3, [pc, #588]	; (8006fc0 <_dtoa_r+0x598>)
 8006d74:	2703      	movs	r7, #3
 8006d76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d7a:	f7f9 fd8b 	bl	8000894 <__aeabi_ddiv>
 8006d7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d82:	f004 040f 	and.w	r4, r4, #15
 8006d86:	4e8e      	ldr	r6, [pc, #568]	; (8006fc0 <_dtoa_r+0x598>)
 8006d88:	b954      	cbnz	r4, 8006da0 <_dtoa_r+0x378>
 8006d8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d92:	f7f9 fd7f 	bl	8000894 <__aeabi_ddiv>
 8006d96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d9a:	e029      	b.n	8006df0 <_dtoa_r+0x3c8>
 8006d9c:	2702      	movs	r7, #2
 8006d9e:	e7f2      	b.n	8006d86 <_dtoa_r+0x35e>
 8006da0:	07e1      	lsls	r1, r4, #31
 8006da2:	d508      	bpl.n	8006db6 <_dtoa_r+0x38e>
 8006da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006da8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dac:	f7f9 fc48 	bl	8000640 <__aeabi_dmul>
 8006db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006db4:	3701      	adds	r7, #1
 8006db6:	1064      	asrs	r4, r4, #1
 8006db8:	3608      	adds	r6, #8
 8006dba:	e7e5      	b.n	8006d88 <_dtoa_r+0x360>
 8006dbc:	f000 80a5 	beq.w	8006f0a <_dtoa_r+0x4e2>
 8006dc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dc4:	f1cb 0400 	rsb	r4, fp, #0
 8006dc8:	4b7c      	ldr	r3, [pc, #496]	; (8006fbc <_dtoa_r+0x594>)
 8006dca:	f004 020f 	and.w	r2, r4, #15
 8006dce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f7f9 fc33 	bl	8000640 <__aeabi_dmul>
 8006dda:	2702      	movs	r7, #2
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006de2:	4e77      	ldr	r6, [pc, #476]	; (8006fc0 <_dtoa_r+0x598>)
 8006de4:	1124      	asrs	r4, r4, #4
 8006de6:	2c00      	cmp	r4, #0
 8006de8:	f040 8084 	bne.w	8006ef4 <_dtoa_r+0x4cc>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1d2      	bne.n	8006d96 <_dtoa_r+0x36e>
 8006df0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006df4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 8087 	beq.w	8006f0e <_dtoa_r+0x4e6>
 8006e00:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e04:	2200      	movs	r2, #0
 8006e06:	4b6f      	ldr	r3, [pc, #444]	; (8006fc4 <_dtoa_r+0x59c>)
 8006e08:	f7f9 fe8c 	bl	8000b24 <__aeabi_dcmplt>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d07e      	beq.n	8006f0e <_dtoa_r+0x4e6>
 8006e10:	9b08      	ldr	r3, [sp, #32]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d07b      	beq.n	8006f0e <_dtoa_r+0x4e6>
 8006e16:	9b06      	ldr	r3, [sp, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	dd38      	ble.n	8006e8e <_dtoa_r+0x466>
 8006e1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e20:	2200      	movs	r2, #0
 8006e22:	4b69      	ldr	r3, [pc, #420]	; (8006fc8 <_dtoa_r+0x5a0>)
 8006e24:	f7f9 fc0c 	bl	8000640 <__aeabi_dmul>
 8006e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e2c:	9c06      	ldr	r4, [sp, #24]
 8006e2e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006e32:	3701      	adds	r7, #1
 8006e34:	4638      	mov	r0, r7
 8006e36:	f7f9 fb99 	bl	800056c <__aeabi_i2d>
 8006e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e3e:	f7f9 fbff 	bl	8000640 <__aeabi_dmul>
 8006e42:	2200      	movs	r2, #0
 8006e44:	4b61      	ldr	r3, [pc, #388]	; (8006fcc <_dtoa_r+0x5a4>)
 8006e46:	f7f9 fa45 	bl	80002d4 <__adddf3>
 8006e4a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006e52:	9611      	str	r6, [sp, #68]	; 0x44
 8006e54:	2c00      	cmp	r4, #0
 8006e56:	d15d      	bne.n	8006f14 <_dtoa_r+0x4ec>
 8006e58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4b5c      	ldr	r3, [pc, #368]	; (8006fd0 <_dtoa_r+0x5a8>)
 8006e60:	f7f9 fa36 	bl	80002d0 <__aeabi_dsub>
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e70:	f7f9 fe76 	bl	8000b60 <__aeabi_dcmpgt>
 8006e74:	2800      	cmp	r0, #0
 8006e76:	f040 8295 	bne.w	80073a4 <_dtoa_r+0x97c>
 8006e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e84:	f7f9 fe4e 	bl	8000b24 <__aeabi_dcmplt>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	f040 8289 	bne.w	80073a0 <_dtoa_r+0x978>
 8006e8e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f2c0 8151 	blt.w	8007140 <_dtoa_r+0x718>
 8006e9e:	f1bb 0f0e 	cmp.w	fp, #14
 8006ea2:	f300 814d 	bgt.w	8007140 <_dtoa_r+0x718>
 8006ea6:	4b45      	ldr	r3, [pc, #276]	; (8006fbc <_dtoa_r+0x594>)
 8006ea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006eac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006eb0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006eb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f280 80da 	bge.w	8007070 <_dtoa_r+0x648>
 8006ebc:	9b08      	ldr	r3, [sp, #32]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f300 80d6 	bgt.w	8007070 <_dtoa_r+0x648>
 8006ec4:	f040 826b 	bne.w	800739e <_dtoa_r+0x976>
 8006ec8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	4b40      	ldr	r3, [pc, #256]	; (8006fd0 <_dtoa_r+0x5a8>)
 8006ed0:	f7f9 fbb6 	bl	8000640 <__aeabi_dmul>
 8006ed4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ed8:	f7f9 fe38 	bl	8000b4c <__aeabi_dcmpge>
 8006edc:	9c08      	ldr	r4, [sp, #32]
 8006ede:	4626      	mov	r6, r4
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	f040 8241 	bne.w	8007368 <_dtoa_r+0x940>
 8006ee6:	2331      	movs	r3, #49	; 0x31
 8006ee8:	9f03      	ldr	r7, [sp, #12]
 8006eea:	f10b 0b01 	add.w	fp, fp, #1
 8006eee:	f807 3b01 	strb.w	r3, [r7], #1
 8006ef2:	e23d      	b.n	8007370 <_dtoa_r+0x948>
 8006ef4:	07e2      	lsls	r2, r4, #31
 8006ef6:	d505      	bpl.n	8006f04 <_dtoa_r+0x4dc>
 8006ef8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006efc:	f7f9 fba0 	bl	8000640 <__aeabi_dmul>
 8006f00:	2301      	movs	r3, #1
 8006f02:	3701      	adds	r7, #1
 8006f04:	1064      	asrs	r4, r4, #1
 8006f06:	3608      	adds	r6, #8
 8006f08:	e76d      	b.n	8006de6 <_dtoa_r+0x3be>
 8006f0a:	2702      	movs	r7, #2
 8006f0c:	e770      	b.n	8006df0 <_dtoa_r+0x3c8>
 8006f0e:	46d8      	mov	r8, fp
 8006f10:	9c08      	ldr	r4, [sp, #32]
 8006f12:	e78f      	b.n	8006e34 <_dtoa_r+0x40c>
 8006f14:	9903      	ldr	r1, [sp, #12]
 8006f16:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <_dtoa_r+0x594>)
 8006f18:	4421      	add	r1, r4
 8006f1a:	9112      	str	r1, [sp, #72]	; 0x48
 8006f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f22:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006f26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f2a:	2900      	cmp	r1, #0
 8006f2c:	d054      	beq.n	8006fd8 <_dtoa_r+0x5b0>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	4928      	ldr	r1, [pc, #160]	; (8006fd4 <_dtoa_r+0x5ac>)
 8006f32:	f7f9 fcaf 	bl	8000894 <__aeabi_ddiv>
 8006f36:	463b      	mov	r3, r7
 8006f38:	4632      	mov	r2, r6
 8006f3a:	f7f9 f9c9 	bl	80002d0 <__aeabi_dsub>
 8006f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f42:	9f03      	ldr	r7, [sp, #12]
 8006f44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f48:	f7f9 fe2a 	bl	8000ba0 <__aeabi_d2iz>
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	f7f9 fb0d 	bl	800056c <__aeabi_i2d>
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f5a:	f7f9 f9b9 	bl	80002d0 <__aeabi_dsub>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	3430      	adds	r4, #48	; 0x30
 8006f64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f6c:	f807 4b01 	strb.w	r4, [r7], #1
 8006f70:	f7f9 fdd8 	bl	8000b24 <__aeabi_dcmplt>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d173      	bne.n	8007060 <_dtoa_r+0x638>
 8006f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	4911      	ldr	r1, [pc, #68]	; (8006fc4 <_dtoa_r+0x59c>)
 8006f80:	f7f9 f9a6 	bl	80002d0 <__aeabi_dsub>
 8006f84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f88:	f7f9 fdcc 	bl	8000b24 <__aeabi_dcmplt>
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	f040 80b6 	bne.w	80070fe <_dtoa_r+0x6d6>
 8006f92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f94:	429f      	cmp	r7, r3
 8006f96:	f43f af7a 	beq.w	8006e8e <_dtoa_r+0x466>
 8006f9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <_dtoa_r+0x5a0>)
 8006fa2:	f7f9 fb4d 	bl	8000640 <__aeabi_dmul>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <_dtoa_r+0x5a0>)
 8006fb2:	f7f9 fb45 	bl	8000640 <__aeabi_dmul>
 8006fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fba:	e7c3      	b.n	8006f44 <_dtoa_r+0x51c>
 8006fbc:	08009908 	.word	0x08009908
 8006fc0:	080098e0 	.word	0x080098e0
 8006fc4:	3ff00000 	.word	0x3ff00000
 8006fc8:	40240000 	.word	0x40240000
 8006fcc:	401c0000 	.word	0x401c0000
 8006fd0:	40140000 	.word	0x40140000
 8006fd4:	3fe00000 	.word	0x3fe00000
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 fb30 	bl	8000640 <__aeabi_dmul>
 8006fe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fe6:	9c03      	ldr	r4, [sp, #12]
 8006fe8:	9314      	str	r3, [sp, #80]	; 0x50
 8006fea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fee:	f7f9 fdd7 	bl	8000ba0 <__aeabi_d2iz>
 8006ff2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ff4:	f7f9 faba 	bl	800056c <__aeabi_i2d>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007000:	f7f9 f966 	bl	80002d0 <__aeabi_dsub>
 8007004:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007006:	4606      	mov	r6, r0
 8007008:	3330      	adds	r3, #48	; 0x30
 800700a:	f804 3b01 	strb.w	r3, [r4], #1
 800700e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007010:	460f      	mov	r7, r1
 8007012:	429c      	cmp	r4, r3
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	d124      	bne.n	8007064 <_dtoa_r+0x63c>
 800701a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800701e:	4baf      	ldr	r3, [pc, #700]	; (80072dc <_dtoa_r+0x8b4>)
 8007020:	f7f9 f958 	bl	80002d4 <__adddf3>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fd98 	bl	8000b60 <__aeabi_dcmpgt>
 8007030:	2800      	cmp	r0, #0
 8007032:	d163      	bne.n	80070fc <_dtoa_r+0x6d4>
 8007034:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007038:	2000      	movs	r0, #0
 800703a:	49a8      	ldr	r1, [pc, #672]	; (80072dc <_dtoa_r+0x8b4>)
 800703c:	f7f9 f948 	bl	80002d0 <__aeabi_dsub>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd6c 	bl	8000b24 <__aeabi_dcmplt>
 800704c:	2800      	cmp	r0, #0
 800704e:	f43f af1e 	beq.w	8006e8e <_dtoa_r+0x466>
 8007052:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007054:	1e7b      	subs	r3, r7, #1
 8007056:	9314      	str	r3, [sp, #80]	; 0x50
 8007058:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800705c:	2b30      	cmp	r3, #48	; 0x30
 800705e:	d0f8      	beq.n	8007052 <_dtoa_r+0x62a>
 8007060:	46c3      	mov	fp, r8
 8007062:	e03b      	b.n	80070dc <_dtoa_r+0x6b4>
 8007064:	4b9e      	ldr	r3, [pc, #632]	; (80072e0 <_dtoa_r+0x8b8>)
 8007066:	f7f9 faeb 	bl	8000640 <__aeabi_dmul>
 800706a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800706e:	e7bc      	b.n	8006fea <_dtoa_r+0x5c2>
 8007070:	9f03      	ldr	r7, [sp, #12]
 8007072:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007076:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f7f9 fc09 	bl	8000894 <__aeabi_ddiv>
 8007082:	f7f9 fd8d 	bl	8000ba0 <__aeabi_d2iz>
 8007086:	4604      	mov	r4, r0
 8007088:	f7f9 fa70 	bl	800056c <__aeabi_i2d>
 800708c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007090:	f7f9 fad6 	bl	8000640 <__aeabi_dmul>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 f918 	bl	80002d0 <__aeabi_dsub>
 80070a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80070a4:	f807 6b01 	strb.w	r6, [r7], #1
 80070a8:	9e03      	ldr	r6, [sp, #12]
 80070aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80070ae:	1bbe      	subs	r6, r7, r6
 80070b0:	45b4      	cmp	ip, r6
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	d136      	bne.n	8007126 <_dtoa_r+0x6fe>
 80070b8:	f7f9 f90c 	bl	80002d4 <__adddf3>
 80070bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070c0:	4680      	mov	r8, r0
 80070c2:	4689      	mov	r9, r1
 80070c4:	f7f9 fd4c 	bl	8000b60 <__aeabi_dcmpgt>
 80070c8:	bb58      	cbnz	r0, 8007122 <_dtoa_r+0x6fa>
 80070ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 fd1d 	bl	8000b10 <__aeabi_dcmpeq>
 80070d6:	b108      	cbz	r0, 80070dc <_dtoa_r+0x6b4>
 80070d8:	07e3      	lsls	r3, r4, #31
 80070da:	d422      	bmi.n	8007122 <_dtoa_r+0x6fa>
 80070dc:	4651      	mov	r1, sl
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fbc2 	bl	8007868 <_Bfree>
 80070e4:	2300      	movs	r3, #0
 80070e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070e8:	703b      	strb	r3, [r7, #0]
 80070ea:	f10b 0301 	add.w	r3, fp, #1
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f43f ace6 	beq.w	8006ac4 <_dtoa_r+0x9c>
 80070f8:	601f      	str	r7, [r3, #0]
 80070fa:	e4e3      	b.n	8006ac4 <_dtoa_r+0x9c>
 80070fc:	4627      	mov	r7, r4
 80070fe:	463b      	mov	r3, r7
 8007100:	461f      	mov	r7, r3
 8007102:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007106:	2a39      	cmp	r2, #57	; 0x39
 8007108:	d107      	bne.n	800711a <_dtoa_r+0x6f2>
 800710a:	9a03      	ldr	r2, [sp, #12]
 800710c:	429a      	cmp	r2, r3
 800710e:	d1f7      	bne.n	8007100 <_dtoa_r+0x6d8>
 8007110:	2230      	movs	r2, #48	; 0x30
 8007112:	9903      	ldr	r1, [sp, #12]
 8007114:	f108 0801 	add.w	r8, r8, #1
 8007118:	700a      	strb	r2, [r1, #0]
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	3201      	adds	r2, #1
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e79e      	b.n	8007060 <_dtoa_r+0x638>
 8007122:	46d8      	mov	r8, fp
 8007124:	e7eb      	b.n	80070fe <_dtoa_r+0x6d6>
 8007126:	2200      	movs	r2, #0
 8007128:	4b6d      	ldr	r3, [pc, #436]	; (80072e0 <_dtoa_r+0x8b8>)
 800712a:	f7f9 fa89 	bl	8000640 <__aeabi_dmul>
 800712e:	2200      	movs	r2, #0
 8007130:	2300      	movs	r3, #0
 8007132:	4680      	mov	r8, r0
 8007134:	4689      	mov	r9, r1
 8007136:	f7f9 fceb 	bl	8000b10 <__aeabi_dcmpeq>
 800713a:	2800      	cmp	r0, #0
 800713c:	d09b      	beq.n	8007076 <_dtoa_r+0x64e>
 800713e:	e7cd      	b.n	80070dc <_dtoa_r+0x6b4>
 8007140:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007142:	2a00      	cmp	r2, #0
 8007144:	f000 80c4 	beq.w	80072d0 <_dtoa_r+0x8a8>
 8007148:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800714a:	2a01      	cmp	r2, #1
 800714c:	f300 80a8 	bgt.w	80072a0 <_dtoa_r+0x878>
 8007150:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007152:	2a00      	cmp	r2, #0
 8007154:	f000 80a0 	beq.w	8007298 <_dtoa_r+0x870>
 8007158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800715c:	464f      	mov	r7, r9
 800715e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007162:	2101      	movs	r1, #1
 8007164:	441a      	add	r2, r3
 8007166:	4628      	mov	r0, r5
 8007168:	4499      	add	r9, r3
 800716a:	9209      	str	r2, [sp, #36]	; 0x24
 800716c:	f000 fc32 	bl	80079d4 <__i2b>
 8007170:	4606      	mov	r6, r0
 8007172:	b15f      	cbz	r7, 800718c <_dtoa_r+0x764>
 8007174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd08      	ble.n	800718c <_dtoa_r+0x764>
 800717a:	42bb      	cmp	r3, r7
 800717c:	bfa8      	it	ge
 800717e:	463b      	movge	r3, r7
 8007180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007182:	eba9 0903 	sub.w	r9, r9, r3
 8007186:	1aff      	subs	r7, r7, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	9309      	str	r3, [sp, #36]	; 0x24
 800718c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718e:	b1f3      	cbz	r3, 80071ce <_dtoa_r+0x7a6>
 8007190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80a0 	beq.w	80072d8 <_dtoa_r+0x8b0>
 8007198:	2c00      	cmp	r4, #0
 800719a:	dd10      	ble.n	80071be <_dtoa_r+0x796>
 800719c:	4631      	mov	r1, r6
 800719e:	4622      	mov	r2, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 fcd5 	bl	8007b50 <__pow5mult>
 80071a6:	4652      	mov	r2, sl
 80071a8:	4601      	mov	r1, r0
 80071aa:	4606      	mov	r6, r0
 80071ac:	4628      	mov	r0, r5
 80071ae:	f000 fc27 	bl	8007a00 <__multiply>
 80071b2:	4680      	mov	r8, r0
 80071b4:	4651      	mov	r1, sl
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 fb56 	bl	8007868 <_Bfree>
 80071bc:	46c2      	mov	sl, r8
 80071be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c0:	1b1a      	subs	r2, r3, r4
 80071c2:	d004      	beq.n	80071ce <_dtoa_r+0x7a6>
 80071c4:	4651      	mov	r1, sl
 80071c6:	4628      	mov	r0, r5
 80071c8:	f000 fcc2 	bl	8007b50 <__pow5mult>
 80071cc:	4682      	mov	sl, r0
 80071ce:	2101      	movs	r1, #1
 80071d0:	4628      	mov	r0, r5
 80071d2:	f000 fbff 	bl	80079d4 <__i2b>
 80071d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d8:	4604      	mov	r4, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f340 8082 	ble.w	80072e4 <_dtoa_r+0x8bc>
 80071e0:	461a      	mov	r2, r3
 80071e2:	4601      	mov	r1, r0
 80071e4:	4628      	mov	r0, r5
 80071e6:	f000 fcb3 	bl	8007b50 <__pow5mult>
 80071ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071ec:	4604      	mov	r4, r0
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	dd7b      	ble.n	80072ea <_dtoa_r+0x8c2>
 80071f2:	f04f 0800 	mov.w	r8, #0
 80071f6:	6923      	ldr	r3, [r4, #16]
 80071f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071fc:	6918      	ldr	r0, [r3, #16]
 80071fe:	f000 fb9b 	bl	8007938 <__hi0bits>
 8007202:	f1c0 0020 	rsb	r0, r0, #32
 8007206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007208:	4418      	add	r0, r3
 800720a:	f010 001f 	ands.w	r0, r0, #31
 800720e:	f000 8092 	beq.w	8007336 <_dtoa_r+0x90e>
 8007212:	f1c0 0320 	rsb	r3, r0, #32
 8007216:	2b04      	cmp	r3, #4
 8007218:	f340 8085 	ble.w	8007326 <_dtoa_r+0x8fe>
 800721c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721e:	f1c0 001c 	rsb	r0, r0, #28
 8007222:	4403      	add	r3, r0
 8007224:	4481      	add	r9, r0
 8007226:	4407      	add	r7, r0
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	f1b9 0f00 	cmp.w	r9, #0
 800722e:	dd05      	ble.n	800723c <_dtoa_r+0x814>
 8007230:	4651      	mov	r1, sl
 8007232:	464a      	mov	r2, r9
 8007234:	4628      	mov	r0, r5
 8007236:	f000 fce5 	bl	8007c04 <__lshift>
 800723a:	4682      	mov	sl, r0
 800723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	dd05      	ble.n	800724e <_dtoa_r+0x826>
 8007242:	4621      	mov	r1, r4
 8007244:	461a      	mov	r2, r3
 8007246:	4628      	mov	r0, r5
 8007248:	f000 fcdc 	bl	8007c04 <__lshift>
 800724c:	4604      	mov	r4, r0
 800724e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d072      	beq.n	800733a <_dtoa_r+0x912>
 8007254:	4621      	mov	r1, r4
 8007256:	4650      	mov	r0, sl
 8007258:	f000 fd40 	bl	8007cdc <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	da6c      	bge.n	800733a <_dtoa_r+0x912>
 8007260:	2300      	movs	r3, #0
 8007262:	4651      	mov	r1, sl
 8007264:	220a      	movs	r2, #10
 8007266:	4628      	mov	r0, r5
 8007268:	f000 fb20 	bl	80078ac <__multadd>
 800726c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726e:	4682      	mov	sl, r0
 8007270:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 81ac 	beq.w	80075d2 <_dtoa_r+0xbaa>
 800727a:	2300      	movs	r3, #0
 800727c:	4631      	mov	r1, r6
 800727e:	220a      	movs	r2, #10
 8007280:	4628      	mov	r0, r5
 8007282:	f000 fb13 	bl	80078ac <__multadd>
 8007286:	9b06      	ldr	r3, [sp, #24]
 8007288:	4606      	mov	r6, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	f300 8093 	bgt.w	80073b6 <_dtoa_r+0x98e>
 8007290:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007292:	2b02      	cmp	r3, #2
 8007294:	dc59      	bgt.n	800734a <_dtoa_r+0x922>
 8007296:	e08e      	b.n	80073b6 <_dtoa_r+0x98e>
 8007298:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800729a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800729e:	e75d      	b.n	800715c <_dtoa_r+0x734>
 80072a0:	9b08      	ldr	r3, [sp, #32]
 80072a2:	1e5c      	subs	r4, r3, #1
 80072a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	bfbf      	itttt	lt
 80072aa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072ac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80072ae:	1ae3      	sublt	r3, r4, r3
 80072b0:	18d2      	addlt	r2, r2, r3
 80072b2:	bfa8      	it	ge
 80072b4:	1b1c      	subge	r4, r3, r4
 80072b6:	9b08      	ldr	r3, [sp, #32]
 80072b8:	bfbe      	ittt	lt
 80072ba:	940a      	strlt	r4, [sp, #40]	; 0x28
 80072bc:	920e      	strlt	r2, [sp, #56]	; 0x38
 80072be:	2400      	movlt	r4, #0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	bfb5      	itete	lt
 80072c4:	eba9 0703 	sublt.w	r7, r9, r3
 80072c8:	464f      	movge	r7, r9
 80072ca:	2300      	movlt	r3, #0
 80072cc:	9b08      	ldrge	r3, [sp, #32]
 80072ce:	e747      	b.n	8007160 <_dtoa_r+0x738>
 80072d0:	464f      	mov	r7, r9
 80072d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80072d6:	e74c      	b.n	8007172 <_dtoa_r+0x74a>
 80072d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072da:	e773      	b.n	80071c4 <_dtoa_r+0x79c>
 80072dc:	3fe00000 	.word	0x3fe00000
 80072e0:	40240000 	.word	0x40240000
 80072e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	dc18      	bgt.n	800731c <_dtoa_r+0x8f4>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	b9b3      	cbnz	r3, 800731c <_dtoa_r+0x8f4>
 80072ee:	9b05      	ldr	r3, [sp, #20]
 80072f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f4:	b993      	cbnz	r3, 800731c <_dtoa_r+0x8f4>
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072fc:	0d1b      	lsrs	r3, r3, #20
 80072fe:	051b      	lsls	r3, r3, #20
 8007300:	b17b      	cbz	r3, 8007322 <_dtoa_r+0x8fa>
 8007302:	f04f 0801 	mov.w	r8, #1
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	f109 0901 	add.w	r9, r9, #1
 800730c:	3301      	adds	r3, #1
 800730e:	9309      	str	r3, [sp, #36]	; 0x24
 8007310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007312:	2b00      	cmp	r3, #0
 8007314:	f47f af6f 	bne.w	80071f6 <_dtoa_r+0x7ce>
 8007318:	2001      	movs	r0, #1
 800731a:	e774      	b.n	8007206 <_dtoa_r+0x7de>
 800731c:	f04f 0800 	mov.w	r8, #0
 8007320:	e7f6      	b.n	8007310 <_dtoa_r+0x8e8>
 8007322:	4698      	mov	r8, r3
 8007324:	e7f4      	b.n	8007310 <_dtoa_r+0x8e8>
 8007326:	d080      	beq.n	800722a <_dtoa_r+0x802>
 8007328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800732a:	331c      	adds	r3, #28
 800732c:	441a      	add	r2, r3
 800732e:	4499      	add	r9, r3
 8007330:	441f      	add	r7, r3
 8007332:	9209      	str	r2, [sp, #36]	; 0x24
 8007334:	e779      	b.n	800722a <_dtoa_r+0x802>
 8007336:	4603      	mov	r3, r0
 8007338:	e7f6      	b.n	8007328 <_dtoa_r+0x900>
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dc34      	bgt.n	80073aa <_dtoa_r+0x982>
 8007340:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007342:	2b02      	cmp	r3, #2
 8007344:	dd31      	ble.n	80073aa <_dtoa_r+0x982>
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	9306      	str	r3, [sp, #24]
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	b963      	cbnz	r3, 8007368 <_dtoa_r+0x940>
 800734e:	4621      	mov	r1, r4
 8007350:	2205      	movs	r2, #5
 8007352:	4628      	mov	r0, r5
 8007354:	f000 faaa 	bl	80078ac <__multadd>
 8007358:	4601      	mov	r1, r0
 800735a:	4604      	mov	r4, r0
 800735c:	4650      	mov	r0, sl
 800735e:	f000 fcbd 	bl	8007cdc <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	f73f adbf 	bgt.w	8006ee6 <_dtoa_r+0x4be>
 8007368:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800736a:	9f03      	ldr	r7, [sp, #12]
 800736c:	ea6f 0b03 	mvn.w	fp, r3
 8007370:	f04f 0800 	mov.w	r8, #0
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 fa76 	bl	8007868 <_Bfree>
 800737c:	2e00      	cmp	r6, #0
 800737e:	f43f aead 	beq.w	80070dc <_dtoa_r+0x6b4>
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	d005      	beq.n	8007394 <_dtoa_r+0x96c>
 8007388:	45b0      	cmp	r8, r6
 800738a:	d003      	beq.n	8007394 <_dtoa_r+0x96c>
 800738c:	4641      	mov	r1, r8
 800738e:	4628      	mov	r0, r5
 8007390:	f000 fa6a 	bl	8007868 <_Bfree>
 8007394:	4631      	mov	r1, r6
 8007396:	4628      	mov	r0, r5
 8007398:	f000 fa66 	bl	8007868 <_Bfree>
 800739c:	e69e      	b.n	80070dc <_dtoa_r+0x6b4>
 800739e:	2400      	movs	r4, #0
 80073a0:	4626      	mov	r6, r4
 80073a2:	e7e1      	b.n	8007368 <_dtoa_r+0x940>
 80073a4:	46c3      	mov	fp, r8
 80073a6:	4626      	mov	r6, r4
 80073a8:	e59d      	b.n	8006ee6 <_dtoa_r+0x4be>
 80073aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80c8 	beq.w	8007542 <_dtoa_r+0xb1a>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	9306      	str	r3, [sp, #24]
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	dd05      	ble.n	80073c6 <_dtoa_r+0x99e>
 80073ba:	4631      	mov	r1, r6
 80073bc:	463a      	mov	r2, r7
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fc20 	bl	8007c04 <__lshift>
 80073c4:	4606      	mov	r6, r0
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	d05b      	beq.n	8007484 <_dtoa_r+0xa5c>
 80073cc:	4628      	mov	r0, r5
 80073ce:	6871      	ldr	r1, [r6, #4]
 80073d0:	f000 fa0a 	bl	80077e8 <_Balloc>
 80073d4:	4607      	mov	r7, r0
 80073d6:	b928      	cbnz	r0, 80073e4 <_dtoa_r+0x9bc>
 80073d8:	4602      	mov	r2, r0
 80073da:	f240 21ef 	movw	r1, #751	; 0x2ef
 80073de:	4b81      	ldr	r3, [pc, #516]	; (80075e4 <_dtoa_r+0xbbc>)
 80073e0:	f7ff bb36 	b.w	8006a50 <_dtoa_r+0x28>
 80073e4:	6932      	ldr	r2, [r6, #16]
 80073e6:	f106 010c 	add.w	r1, r6, #12
 80073ea:	3202      	adds	r2, #2
 80073ec:	0092      	lsls	r2, r2, #2
 80073ee:	300c      	adds	r0, #12
 80073f0:	f000 ff9e 	bl	8008330 <memcpy>
 80073f4:	2201      	movs	r2, #1
 80073f6:	4639      	mov	r1, r7
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 fc03 	bl	8007c04 <__lshift>
 80073fe:	46b0      	mov	r8, r6
 8007400:	4606      	mov	r6, r0
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	9a03      	ldr	r2, [sp, #12]
 8007406:	3301      	adds	r3, #1
 8007408:	9308      	str	r3, [sp, #32]
 800740a:	9b06      	ldr	r3, [sp, #24]
 800740c:	4413      	add	r3, r2
 800740e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007410:	9b04      	ldr	r3, [sp, #16]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	930a      	str	r3, [sp, #40]	; 0x28
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	4621      	mov	r1, r4
 800741c:	3b01      	subs	r3, #1
 800741e:	4650      	mov	r0, sl
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	f7ff fa78 	bl	8006916 <quorem>
 8007426:	4641      	mov	r1, r8
 8007428:	9006      	str	r0, [sp, #24]
 800742a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800742e:	4650      	mov	r0, sl
 8007430:	f000 fc54 	bl	8007cdc <__mcmp>
 8007434:	4632      	mov	r2, r6
 8007436:	9009      	str	r0, [sp, #36]	; 0x24
 8007438:	4621      	mov	r1, r4
 800743a:	4628      	mov	r0, r5
 800743c:	f000 fc6a 	bl	8007d14 <__mdiff>
 8007440:	68c2      	ldr	r2, [r0, #12]
 8007442:	4607      	mov	r7, r0
 8007444:	bb02      	cbnz	r2, 8007488 <_dtoa_r+0xa60>
 8007446:	4601      	mov	r1, r0
 8007448:	4650      	mov	r0, sl
 800744a:	f000 fc47 	bl	8007cdc <__mcmp>
 800744e:	4602      	mov	r2, r0
 8007450:	4639      	mov	r1, r7
 8007452:	4628      	mov	r0, r5
 8007454:	920c      	str	r2, [sp, #48]	; 0x30
 8007456:	f000 fa07 	bl	8007868 <_Bfree>
 800745a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800745c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800745e:	9f08      	ldr	r7, [sp, #32]
 8007460:	ea43 0102 	orr.w	r1, r3, r2
 8007464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007466:	4319      	orrs	r1, r3
 8007468:	d110      	bne.n	800748c <_dtoa_r+0xa64>
 800746a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800746e:	d029      	beq.n	80074c4 <_dtoa_r+0xa9c>
 8007470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007472:	2b00      	cmp	r3, #0
 8007474:	dd02      	ble.n	800747c <_dtoa_r+0xa54>
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800747c:	9b04      	ldr	r3, [sp, #16]
 800747e:	f883 9000 	strb.w	r9, [r3]
 8007482:	e777      	b.n	8007374 <_dtoa_r+0x94c>
 8007484:	4630      	mov	r0, r6
 8007486:	e7ba      	b.n	80073fe <_dtoa_r+0x9d6>
 8007488:	2201      	movs	r2, #1
 800748a:	e7e1      	b.n	8007450 <_dtoa_r+0xa28>
 800748c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800748e:	2b00      	cmp	r3, #0
 8007490:	db04      	blt.n	800749c <_dtoa_r+0xa74>
 8007492:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007494:	430b      	orrs	r3, r1
 8007496:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007498:	430b      	orrs	r3, r1
 800749a:	d120      	bne.n	80074de <_dtoa_r+0xab6>
 800749c:	2a00      	cmp	r2, #0
 800749e:	dded      	ble.n	800747c <_dtoa_r+0xa54>
 80074a0:	4651      	mov	r1, sl
 80074a2:	2201      	movs	r2, #1
 80074a4:	4628      	mov	r0, r5
 80074a6:	f000 fbad 	bl	8007c04 <__lshift>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4682      	mov	sl, r0
 80074ae:	f000 fc15 	bl	8007cdc <__mcmp>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	dc03      	bgt.n	80074be <_dtoa_r+0xa96>
 80074b6:	d1e1      	bne.n	800747c <_dtoa_r+0xa54>
 80074b8:	f019 0f01 	tst.w	r9, #1
 80074bc:	d0de      	beq.n	800747c <_dtoa_r+0xa54>
 80074be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074c2:	d1d8      	bne.n	8007476 <_dtoa_r+0xa4e>
 80074c4:	2339      	movs	r3, #57	; 0x39
 80074c6:	9a04      	ldr	r2, [sp, #16]
 80074c8:	7013      	strb	r3, [r2, #0]
 80074ca:	463b      	mov	r3, r7
 80074cc:	461f      	mov	r7, r3
 80074ce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	2a39      	cmp	r2, #57	; 0x39
 80074d6:	d06b      	beq.n	80075b0 <_dtoa_r+0xb88>
 80074d8:	3201      	adds	r2, #1
 80074da:	701a      	strb	r2, [r3, #0]
 80074dc:	e74a      	b.n	8007374 <_dtoa_r+0x94c>
 80074de:	2a00      	cmp	r2, #0
 80074e0:	dd07      	ble.n	80074f2 <_dtoa_r+0xaca>
 80074e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074e6:	d0ed      	beq.n	80074c4 <_dtoa_r+0xa9c>
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	f109 0301 	add.w	r3, r9, #1
 80074ee:	7013      	strb	r3, [r2, #0]
 80074f0:	e740      	b.n	8007374 <_dtoa_r+0x94c>
 80074f2:	9b08      	ldr	r3, [sp, #32]
 80074f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074f6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d042      	beq.n	8007584 <_dtoa_r+0xb5c>
 80074fe:	4651      	mov	r1, sl
 8007500:	2300      	movs	r3, #0
 8007502:	220a      	movs	r2, #10
 8007504:	4628      	mov	r0, r5
 8007506:	f000 f9d1 	bl	80078ac <__multadd>
 800750a:	45b0      	cmp	r8, r6
 800750c:	4682      	mov	sl, r0
 800750e:	f04f 0300 	mov.w	r3, #0
 8007512:	f04f 020a 	mov.w	r2, #10
 8007516:	4641      	mov	r1, r8
 8007518:	4628      	mov	r0, r5
 800751a:	d107      	bne.n	800752c <_dtoa_r+0xb04>
 800751c:	f000 f9c6 	bl	80078ac <__multadd>
 8007520:	4680      	mov	r8, r0
 8007522:	4606      	mov	r6, r0
 8007524:	9b08      	ldr	r3, [sp, #32]
 8007526:	3301      	adds	r3, #1
 8007528:	9308      	str	r3, [sp, #32]
 800752a:	e775      	b.n	8007418 <_dtoa_r+0x9f0>
 800752c:	f000 f9be 	bl	80078ac <__multadd>
 8007530:	4631      	mov	r1, r6
 8007532:	4680      	mov	r8, r0
 8007534:	2300      	movs	r3, #0
 8007536:	220a      	movs	r2, #10
 8007538:	4628      	mov	r0, r5
 800753a:	f000 f9b7 	bl	80078ac <__multadd>
 800753e:	4606      	mov	r6, r0
 8007540:	e7f0      	b.n	8007524 <_dtoa_r+0xafc>
 8007542:	9b08      	ldr	r3, [sp, #32]
 8007544:	9306      	str	r3, [sp, #24]
 8007546:	9f03      	ldr	r7, [sp, #12]
 8007548:	4621      	mov	r1, r4
 800754a:	4650      	mov	r0, sl
 800754c:	f7ff f9e3 	bl	8006916 <quorem>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007556:	f807 9b01 	strb.w	r9, [r7], #1
 800755a:	1afa      	subs	r2, r7, r3
 800755c:	9b06      	ldr	r3, [sp, #24]
 800755e:	4293      	cmp	r3, r2
 8007560:	dd07      	ble.n	8007572 <_dtoa_r+0xb4a>
 8007562:	4651      	mov	r1, sl
 8007564:	2300      	movs	r3, #0
 8007566:	220a      	movs	r2, #10
 8007568:	4628      	mov	r0, r5
 800756a:	f000 f99f 	bl	80078ac <__multadd>
 800756e:	4682      	mov	sl, r0
 8007570:	e7ea      	b.n	8007548 <_dtoa_r+0xb20>
 8007572:	9b06      	ldr	r3, [sp, #24]
 8007574:	f04f 0800 	mov.w	r8, #0
 8007578:	2b00      	cmp	r3, #0
 800757a:	bfcc      	ite	gt
 800757c:	461f      	movgt	r7, r3
 800757e:	2701      	movle	r7, #1
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	441f      	add	r7, r3
 8007584:	4651      	mov	r1, sl
 8007586:	2201      	movs	r2, #1
 8007588:	4628      	mov	r0, r5
 800758a:	f000 fb3b 	bl	8007c04 <__lshift>
 800758e:	4621      	mov	r1, r4
 8007590:	4682      	mov	sl, r0
 8007592:	f000 fba3 	bl	8007cdc <__mcmp>
 8007596:	2800      	cmp	r0, #0
 8007598:	dc97      	bgt.n	80074ca <_dtoa_r+0xaa2>
 800759a:	d102      	bne.n	80075a2 <_dtoa_r+0xb7a>
 800759c:	f019 0f01 	tst.w	r9, #1
 80075a0:	d193      	bne.n	80074ca <_dtoa_r+0xaa2>
 80075a2:	463b      	mov	r3, r7
 80075a4:	461f      	mov	r7, r3
 80075a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075aa:	2a30      	cmp	r2, #48	; 0x30
 80075ac:	d0fa      	beq.n	80075a4 <_dtoa_r+0xb7c>
 80075ae:	e6e1      	b.n	8007374 <_dtoa_r+0x94c>
 80075b0:	9a03      	ldr	r2, [sp, #12]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d18a      	bne.n	80074cc <_dtoa_r+0xaa4>
 80075b6:	2331      	movs	r3, #49	; 0x31
 80075b8:	f10b 0b01 	add.w	fp, fp, #1
 80075bc:	e797      	b.n	80074ee <_dtoa_r+0xac6>
 80075be:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <_dtoa_r+0xbc0>)
 80075c0:	f7ff ba9f 	b.w	8006b02 <_dtoa_r+0xda>
 80075c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f47f aa77 	bne.w	8006aba <_dtoa_r+0x92>
 80075cc:	4b07      	ldr	r3, [pc, #28]	; (80075ec <_dtoa_r+0xbc4>)
 80075ce:	f7ff ba98 	b.w	8006b02 <_dtoa_r+0xda>
 80075d2:	9b06      	ldr	r3, [sp, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dcb6      	bgt.n	8007546 <_dtoa_r+0xb1e>
 80075d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075da:	2b02      	cmp	r3, #2
 80075dc:	f73f aeb5 	bgt.w	800734a <_dtoa_r+0x922>
 80075e0:	e7b1      	b.n	8007546 <_dtoa_r+0xb1e>
 80075e2:	bf00      	nop
 80075e4:	0800986f 	.word	0x0800986f
 80075e8:	080097cf 	.word	0x080097cf
 80075ec:	080097f3 	.word	0x080097f3

080075f0 <_free_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4605      	mov	r5, r0
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d040      	beq.n	800767a <_free_r+0x8a>
 80075f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075fc:	1f0c      	subs	r4, r1, #4
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bfb8      	it	lt
 8007602:	18e4      	addlt	r4, r4, r3
 8007604:	f000 f8e4 	bl	80077d0 <__malloc_lock>
 8007608:	4a1c      	ldr	r2, [pc, #112]	; (800767c <_free_r+0x8c>)
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	b933      	cbnz	r3, 800761c <_free_r+0x2c>
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	4628      	mov	r0, r5
 8007614:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007618:	f000 b8e0 	b.w	80077dc <__malloc_unlock>
 800761c:	42a3      	cmp	r3, r4
 800761e:	d908      	bls.n	8007632 <_free_r+0x42>
 8007620:	6820      	ldr	r0, [r4, #0]
 8007622:	1821      	adds	r1, r4, r0
 8007624:	428b      	cmp	r3, r1
 8007626:	bf01      	itttt	eq
 8007628:	6819      	ldreq	r1, [r3, #0]
 800762a:	685b      	ldreq	r3, [r3, #4]
 800762c:	1809      	addeq	r1, r1, r0
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	e7ed      	b.n	800760e <_free_r+0x1e>
 8007632:	461a      	mov	r2, r3
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b10b      	cbz	r3, 800763c <_free_r+0x4c>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d9fa      	bls.n	8007632 <_free_r+0x42>
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	1850      	adds	r0, r2, r1
 8007640:	42a0      	cmp	r0, r4
 8007642:	d10b      	bne.n	800765c <_free_r+0x6c>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	4401      	add	r1, r0
 8007648:	1850      	adds	r0, r2, r1
 800764a:	4283      	cmp	r3, r0
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	d1e0      	bne.n	8007612 <_free_r+0x22>
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4408      	add	r0, r1
 8007656:	6010      	str	r0, [r2, #0]
 8007658:	6053      	str	r3, [r2, #4]
 800765a:	e7da      	b.n	8007612 <_free_r+0x22>
 800765c:	d902      	bls.n	8007664 <_free_r+0x74>
 800765e:	230c      	movs	r3, #12
 8007660:	602b      	str	r3, [r5, #0]
 8007662:	e7d6      	b.n	8007612 <_free_r+0x22>
 8007664:	6820      	ldr	r0, [r4, #0]
 8007666:	1821      	adds	r1, r4, r0
 8007668:	428b      	cmp	r3, r1
 800766a:	bf01      	itttt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	1809      	addeq	r1, r1, r0
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6054      	str	r4, [r2, #4]
 8007678:	e7cb      	b.n	8007612 <_free_r+0x22>
 800767a:	bd38      	pop	{r3, r4, r5, pc}
 800767c:	20000944 	.word	0x20000944

08007680 <malloc>:
 8007680:	4b02      	ldr	r3, [pc, #8]	; (800768c <malloc+0xc>)
 8007682:	4601      	mov	r1, r0
 8007684:	6818      	ldr	r0, [r3, #0]
 8007686:	f000 b823 	b.w	80076d0 <_malloc_r>
 800768a:	bf00      	nop
 800768c:	20000074 	.word	0x20000074

08007690 <sbrk_aligned>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4e0e      	ldr	r6, [pc, #56]	; (80076cc <sbrk_aligned+0x3c>)
 8007694:	460c      	mov	r4, r1
 8007696:	6831      	ldr	r1, [r6, #0]
 8007698:	4605      	mov	r5, r0
 800769a:	b911      	cbnz	r1, 80076a2 <sbrk_aligned+0x12>
 800769c:	f000 fe38 	bl	8008310 <_sbrk_r>
 80076a0:	6030      	str	r0, [r6, #0]
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 fe33 	bl	8008310 <_sbrk_r>
 80076aa:	1c43      	adds	r3, r0, #1
 80076ac:	d00a      	beq.n	80076c4 <sbrk_aligned+0x34>
 80076ae:	1cc4      	adds	r4, r0, #3
 80076b0:	f024 0403 	bic.w	r4, r4, #3
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	d007      	beq.n	80076c8 <sbrk_aligned+0x38>
 80076b8:	1a21      	subs	r1, r4, r0
 80076ba:	4628      	mov	r0, r5
 80076bc:	f000 fe28 	bl	8008310 <_sbrk_r>
 80076c0:	3001      	adds	r0, #1
 80076c2:	d101      	bne.n	80076c8 <sbrk_aligned+0x38>
 80076c4:	f04f 34ff 	mov.w	r4, #4294967295
 80076c8:	4620      	mov	r0, r4
 80076ca:	bd70      	pop	{r4, r5, r6, pc}
 80076cc:	20000948 	.word	0x20000948

080076d0 <_malloc_r>:
 80076d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d4:	1ccd      	adds	r5, r1, #3
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	4607      	mov	r7, r0
 80076e6:	db01      	blt.n	80076ec <_malloc_r+0x1c>
 80076e8:	42a9      	cmp	r1, r5
 80076ea:	d905      	bls.n	80076f8 <_malloc_r+0x28>
 80076ec:	230c      	movs	r3, #12
 80076ee:	2600      	movs	r6, #0
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4630      	mov	r0, r6
 80076f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80077cc <_malloc_r+0xfc>
 80076fc:	f000 f868 	bl	80077d0 <__malloc_lock>
 8007700:	f8d8 3000 	ldr.w	r3, [r8]
 8007704:	461c      	mov	r4, r3
 8007706:	bb5c      	cbnz	r4, 8007760 <_malloc_r+0x90>
 8007708:	4629      	mov	r1, r5
 800770a:	4638      	mov	r0, r7
 800770c:	f7ff ffc0 	bl	8007690 <sbrk_aligned>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	4604      	mov	r4, r0
 8007714:	d155      	bne.n	80077c2 <_malloc_r+0xf2>
 8007716:	f8d8 4000 	ldr.w	r4, [r8]
 800771a:	4626      	mov	r6, r4
 800771c:	2e00      	cmp	r6, #0
 800771e:	d145      	bne.n	80077ac <_malloc_r+0xdc>
 8007720:	2c00      	cmp	r4, #0
 8007722:	d048      	beq.n	80077b6 <_malloc_r+0xe6>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	4631      	mov	r1, r6
 8007728:	4638      	mov	r0, r7
 800772a:	eb04 0903 	add.w	r9, r4, r3
 800772e:	f000 fdef 	bl	8008310 <_sbrk_r>
 8007732:	4581      	cmp	r9, r0
 8007734:	d13f      	bne.n	80077b6 <_malloc_r+0xe6>
 8007736:	6821      	ldr	r1, [r4, #0]
 8007738:	4638      	mov	r0, r7
 800773a:	1a6d      	subs	r5, r5, r1
 800773c:	4629      	mov	r1, r5
 800773e:	f7ff ffa7 	bl	8007690 <sbrk_aligned>
 8007742:	3001      	adds	r0, #1
 8007744:	d037      	beq.n	80077b6 <_malloc_r+0xe6>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	442b      	add	r3, r5
 800774a:	6023      	str	r3, [r4, #0]
 800774c:	f8d8 3000 	ldr.w	r3, [r8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d038      	beq.n	80077c6 <_malloc_r+0xf6>
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	42a2      	cmp	r2, r4
 8007758:	d12b      	bne.n	80077b2 <_malloc_r+0xe2>
 800775a:	2200      	movs	r2, #0
 800775c:	605a      	str	r2, [r3, #4]
 800775e:	e00f      	b.n	8007780 <_malloc_r+0xb0>
 8007760:	6822      	ldr	r2, [r4, #0]
 8007762:	1b52      	subs	r2, r2, r5
 8007764:	d41f      	bmi.n	80077a6 <_malloc_r+0xd6>
 8007766:	2a0b      	cmp	r2, #11
 8007768:	d917      	bls.n	800779a <_malloc_r+0xca>
 800776a:	1961      	adds	r1, r4, r5
 800776c:	42a3      	cmp	r3, r4
 800776e:	6025      	str	r5, [r4, #0]
 8007770:	bf18      	it	ne
 8007772:	6059      	strne	r1, [r3, #4]
 8007774:	6863      	ldr	r3, [r4, #4]
 8007776:	bf08      	it	eq
 8007778:	f8c8 1000 	streq.w	r1, [r8]
 800777c:	5162      	str	r2, [r4, r5]
 800777e:	604b      	str	r3, [r1, #4]
 8007780:	4638      	mov	r0, r7
 8007782:	f104 060b 	add.w	r6, r4, #11
 8007786:	f000 f829 	bl	80077dc <__malloc_unlock>
 800778a:	f026 0607 	bic.w	r6, r6, #7
 800778e:	1d23      	adds	r3, r4, #4
 8007790:	1af2      	subs	r2, r6, r3
 8007792:	d0ae      	beq.n	80076f2 <_malloc_r+0x22>
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	50a3      	str	r3, [r4, r2]
 8007798:	e7ab      	b.n	80076f2 <_malloc_r+0x22>
 800779a:	42a3      	cmp	r3, r4
 800779c:	6862      	ldr	r2, [r4, #4]
 800779e:	d1dd      	bne.n	800775c <_malloc_r+0x8c>
 80077a0:	f8c8 2000 	str.w	r2, [r8]
 80077a4:	e7ec      	b.n	8007780 <_malloc_r+0xb0>
 80077a6:	4623      	mov	r3, r4
 80077a8:	6864      	ldr	r4, [r4, #4]
 80077aa:	e7ac      	b.n	8007706 <_malloc_r+0x36>
 80077ac:	4634      	mov	r4, r6
 80077ae:	6876      	ldr	r6, [r6, #4]
 80077b0:	e7b4      	b.n	800771c <_malloc_r+0x4c>
 80077b2:	4613      	mov	r3, r2
 80077b4:	e7cc      	b.n	8007750 <_malloc_r+0x80>
 80077b6:	230c      	movs	r3, #12
 80077b8:	4638      	mov	r0, r7
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	f000 f80e 	bl	80077dc <__malloc_unlock>
 80077c0:	e797      	b.n	80076f2 <_malloc_r+0x22>
 80077c2:	6025      	str	r5, [r4, #0]
 80077c4:	e7dc      	b.n	8007780 <_malloc_r+0xb0>
 80077c6:	605b      	str	r3, [r3, #4]
 80077c8:	deff      	udf	#255	; 0xff
 80077ca:	bf00      	nop
 80077cc:	20000944 	.word	0x20000944

080077d0 <__malloc_lock>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__malloc_lock+0x8>)
 80077d2:	f7ff b890 	b.w	80068f6 <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	20000940 	.word	0x20000940

080077dc <__malloc_unlock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_unlock+0x8>)
 80077de:	f7ff b88b 	b.w	80068f8 <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000940 	.word	0x20000940

080077e8 <_Balloc>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	69c6      	ldr	r6, [r0, #28]
 80077ec:	4604      	mov	r4, r0
 80077ee:	460d      	mov	r5, r1
 80077f0:	b976      	cbnz	r6, 8007810 <_Balloc+0x28>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f7ff ff44 	bl	8007680 <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	61e0      	str	r0, [r4, #28]
 80077fc:	b920      	cbnz	r0, 8007808 <_Balloc+0x20>
 80077fe:	216b      	movs	r1, #107	; 0x6b
 8007800:	4b17      	ldr	r3, [pc, #92]	; (8007860 <_Balloc+0x78>)
 8007802:	4818      	ldr	r0, [pc, #96]	; (8007864 <_Balloc+0x7c>)
 8007804:	f000 fda2 	bl	800834c <__assert_func>
 8007808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800780c:	6006      	str	r6, [r0, #0]
 800780e:	60c6      	str	r6, [r0, #12]
 8007810:	69e6      	ldr	r6, [r4, #28]
 8007812:	68f3      	ldr	r3, [r6, #12]
 8007814:	b183      	cbz	r3, 8007838 <_Balloc+0x50>
 8007816:	69e3      	ldr	r3, [r4, #28]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800781e:	b9b8      	cbnz	r0, 8007850 <_Balloc+0x68>
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f605 	lsl.w	r6, r1, r5
 8007826:	1d72      	adds	r2, r6, #5
 8007828:	4620      	mov	r0, r4
 800782a:	0092      	lsls	r2, r2, #2
 800782c:	f000 fdac 	bl	8008388 <_calloc_r>
 8007830:	b160      	cbz	r0, 800784c <_Balloc+0x64>
 8007832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007836:	e00e      	b.n	8007856 <_Balloc+0x6e>
 8007838:	2221      	movs	r2, #33	; 0x21
 800783a:	2104      	movs	r1, #4
 800783c:	4620      	mov	r0, r4
 800783e:	f000 fda3 	bl	8008388 <_calloc_r>
 8007842:	69e3      	ldr	r3, [r4, #28]
 8007844:	60f0      	str	r0, [r6, #12]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e4      	bne.n	8007816 <_Balloc+0x2e>
 800784c:	2000      	movs	r0, #0
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	6802      	ldr	r2, [r0, #0]
 8007852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007856:	2300      	movs	r3, #0
 8007858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800785c:	e7f7      	b.n	800784e <_Balloc+0x66>
 800785e:	bf00      	nop
 8007860:	08009800 	.word	0x08009800
 8007864:	08009880 	.word	0x08009880

08007868 <_Bfree>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	69c6      	ldr	r6, [r0, #28]
 800786c:	4605      	mov	r5, r0
 800786e:	460c      	mov	r4, r1
 8007870:	b976      	cbnz	r6, 8007890 <_Bfree+0x28>
 8007872:	2010      	movs	r0, #16
 8007874:	f7ff ff04 	bl	8007680 <malloc>
 8007878:	4602      	mov	r2, r0
 800787a:	61e8      	str	r0, [r5, #28]
 800787c:	b920      	cbnz	r0, 8007888 <_Bfree+0x20>
 800787e:	218f      	movs	r1, #143	; 0x8f
 8007880:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <_Bfree+0x3c>)
 8007882:	4809      	ldr	r0, [pc, #36]	; (80078a8 <_Bfree+0x40>)
 8007884:	f000 fd62 	bl	800834c <__assert_func>
 8007888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800788c:	6006      	str	r6, [r0, #0]
 800788e:	60c6      	str	r6, [r0, #12]
 8007890:	b13c      	cbz	r4, 80078a2 <_Bfree+0x3a>
 8007892:	69eb      	ldr	r3, [r5, #28]
 8007894:	6862      	ldr	r2, [r4, #4]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800789c:	6021      	str	r1, [r4, #0]
 800789e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	08009800 	.word	0x08009800
 80078a8:	08009880 	.word	0x08009880

080078ac <__multadd>:
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	461e      	mov	r6, r3
 80078b6:	2000      	movs	r0, #0
 80078b8:	690d      	ldr	r5, [r1, #16]
 80078ba:	f101 0c14 	add.w	ip, r1, #20
 80078be:	f8dc 3000 	ldr.w	r3, [ip]
 80078c2:	3001      	adds	r0, #1
 80078c4:	b299      	uxth	r1, r3
 80078c6:	fb02 6101 	mla	r1, r2, r1, r6
 80078ca:	0c1e      	lsrs	r6, r3, #16
 80078cc:	0c0b      	lsrs	r3, r1, #16
 80078ce:	fb02 3306 	mla	r3, r2, r6, r3
 80078d2:	b289      	uxth	r1, r1
 80078d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078d8:	4285      	cmp	r5, r0
 80078da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078de:	f84c 1b04 	str.w	r1, [ip], #4
 80078e2:	dcec      	bgt.n	80078be <__multadd+0x12>
 80078e4:	b30e      	cbz	r6, 800792a <__multadd+0x7e>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dc19      	bgt.n	8007920 <__multadd+0x74>
 80078ec:	6861      	ldr	r1, [r4, #4]
 80078ee:	4638      	mov	r0, r7
 80078f0:	3101      	adds	r1, #1
 80078f2:	f7ff ff79 	bl	80077e8 <_Balloc>
 80078f6:	4680      	mov	r8, r0
 80078f8:	b928      	cbnz	r0, 8007906 <__multadd+0x5a>
 80078fa:	4602      	mov	r2, r0
 80078fc:	21ba      	movs	r1, #186	; 0xba
 80078fe:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <__multadd+0x84>)
 8007900:	480c      	ldr	r0, [pc, #48]	; (8007934 <__multadd+0x88>)
 8007902:	f000 fd23 	bl	800834c <__assert_func>
 8007906:	6922      	ldr	r2, [r4, #16]
 8007908:	f104 010c 	add.w	r1, r4, #12
 800790c:	3202      	adds	r2, #2
 800790e:	0092      	lsls	r2, r2, #2
 8007910:	300c      	adds	r0, #12
 8007912:	f000 fd0d 	bl	8008330 <memcpy>
 8007916:	4621      	mov	r1, r4
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa5 	bl	8007868 <_Bfree>
 800791e:	4644      	mov	r4, r8
 8007920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007924:	3501      	adds	r5, #1
 8007926:	615e      	str	r6, [r3, #20]
 8007928:	6125      	str	r5, [r4, #16]
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	0800986f 	.word	0x0800986f
 8007934:	08009880 	.word	0x08009880

08007938 <__hi0bits>:
 8007938:	0c02      	lsrs	r2, r0, #16
 800793a:	0412      	lsls	r2, r2, #16
 800793c:	4603      	mov	r3, r0
 800793e:	b9ca      	cbnz	r2, 8007974 <__hi0bits+0x3c>
 8007940:	0403      	lsls	r3, r0, #16
 8007942:	2010      	movs	r0, #16
 8007944:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007948:	bf04      	itt	eq
 800794a:	021b      	lsleq	r3, r3, #8
 800794c:	3008      	addeq	r0, #8
 800794e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007952:	bf04      	itt	eq
 8007954:	011b      	lsleq	r3, r3, #4
 8007956:	3004      	addeq	r0, #4
 8007958:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800795c:	bf04      	itt	eq
 800795e:	009b      	lsleq	r3, r3, #2
 8007960:	3002      	addeq	r0, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	db05      	blt.n	8007972 <__hi0bits+0x3a>
 8007966:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800796a:	f100 0001 	add.w	r0, r0, #1
 800796e:	bf08      	it	eq
 8007970:	2020      	moveq	r0, #32
 8007972:	4770      	bx	lr
 8007974:	2000      	movs	r0, #0
 8007976:	e7e5      	b.n	8007944 <__hi0bits+0xc>

08007978 <__lo0bits>:
 8007978:	6803      	ldr	r3, [r0, #0]
 800797a:	4602      	mov	r2, r0
 800797c:	f013 0007 	ands.w	r0, r3, #7
 8007980:	d00b      	beq.n	800799a <__lo0bits+0x22>
 8007982:	07d9      	lsls	r1, r3, #31
 8007984:	d421      	bmi.n	80079ca <__lo0bits+0x52>
 8007986:	0798      	lsls	r0, r3, #30
 8007988:	bf49      	itett	mi
 800798a:	085b      	lsrmi	r3, r3, #1
 800798c:	089b      	lsrpl	r3, r3, #2
 800798e:	2001      	movmi	r0, #1
 8007990:	6013      	strmi	r3, [r2, #0]
 8007992:	bf5c      	itt	pl
 8007994:	2002      	movpl	r0, #2
 8007996:	6013      	strpl	r3, [r2, #0]
 8007998:	4770      	bx	lr
 800799a:	b299      	uxth	r1, r3
 800799c:	b909      	cbnz	r1, 80079a2 <__lo0bits+0x2a>
 800799e:	2010      	movs	r0, #16
 80079a0:	0c1b      	lsrs	r3, r3, #16
 80079a2:	b2d9      	uxtb	r1, r3
 80079a4:	b909      	cbnz	r1, 80079aa <__lo0bits+0x32>
 80079a6:	3008      	adds	r0, #8
 80079a8:	0a1b      	lsrs	r3, r3, #8
 80079aa:	0719      	lsls	r1, r3, #28
 80079ac:	bf04      	itt	eq
 80079ae:	091b      	lsreq	r3, r3, #4
 80079b0:	3004      	addeq	r0, #4
 80079b2:	0799      	lsls	r1, r3, #30
 80079b4:	bf04      	itt	eq
 80079b6:	089b      	lsreq	r3, r3, #2
 80079b8:	3002      	addeq	r0, #2
 80079ba:	07d9      	lsls	r1, r3, #31
 80079bc:	d403      	bmi.n	80079c6 <__lo0bits+0x4e>
 80079be:	085b      	lsrs	r3, r3, #1
 80079c0:	f100 0001 	add.w	r0, r0, #1
 80079c4:	d003      	beq.n	80079ce <__lo0bits+0x56>
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	4770      	bx	lr
 80079ca:	2000      	movs	r0, #0
 80079cc:	4770      	bx	lr
 80079ce:	2020      	movs	r0, #32
 80079d0:	4770      	bx	lr
	...

080079d4 <__i2b>:
 80079d4:	b510      	push	{r4, lr}
 80079d6:	460c      	mov	r4, r1
 80079d8:	2101      	movs	r1, #1
 80079da:	f7ff ff05 	bl	80077e8 <_Balloc>
 80079de:	4602      	mov	r2, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__i2b+0x1a>
 80079e2:	f240 1145 	movw	r1, #325	; 0x145
 80079e6:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <__i2b+0x24>)
 80079e8:	4804      	ldr	r0, [pc, #16]	; (80079fc <__i2b+0x28>)
 80079ea:	f000 fcaf 	bl	800834c <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	6144      	str	r4, [r0, #20]
 80079f2:	6103      	str	r3, [r0, #16]
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	bf00      	nop
 80079f8:	0800986f 	.word	0x0800986f
 80079fc:	08009880 	.word	0x08009880

08007a00 <__multiply>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4691      	mov	r9, r2
 8007a06:	690a      	ldr	r2, [r1, #16]
 8007a08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	bfbe      	ittt	lt
 8007a12:	460b      	movlt	r3, r1
 8007a14:	464c      	movlt	r4, r9
 8007a16:	4699      	movlt	r9, r3
 8007a18:	6927      	ldr	r7, [r4, #16]
 8007a1a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	6861      	ldr	r1, [r4, #4]
 8007a22:	eb07 060a 	add.w	r6, r7, sl
 8007a26:	42b3      	cmp	r3, r6
 8007a28:	b085      	sub	sp, #20
 8007a2a:	bfb8      	it	lt
 8007a2c:	3101      	addlt	r1, #1
 8007a2e:	f7ff fedb 	bl	80077e8 <_Balloc>
 8007a32:	b930      	cbnz	r0, 8007a42 <__multiply+0x42>
 8007a34:	4602      	mov	r2, r0
 8007a36:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007a3a:	4b43      	ldr	r3, [pc, #268]	; (8007b48 <__multiply+0x148>)
 8007a3c:	4843      	ldr	r0, [pc, #268]	; (8007b4c <__multiply+0x14c>)
 8007a3e:	f000 fc85 	bl	800834c <__assert_func>
 8007a42:	f100 0514 	add.w	r5, r0, #20
 8007a46:	462b      	mov	r3, r5
 8007a48:	2200      	movs	r2, #0
 8007a4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a4e:	4543      	cmp	r3, r8
 8007a50:	d321      	bcc.n	8007a96 <__multiply+0x96>
 8007a52:	f104 0314 	add.w	r3, r4, #20
 8007a56:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007a5a:	f109 0314 	add.w	r3, r9, #20
 8007a5e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007a62:	9202      	str	r2, [sp, #8]
 8007a64:	1b3a      	subs	r2, r7, r4
 8007a66:	3a15      	subs	r2, #21
 8007a68:	f022 0203 	bic.w	r2, r2, #3
 8007a6c:	3204      	adds	r2, #4
 8007a6e:	f104 0115 	add.w	r1, r4, #21
 8007a72:	428f      	cmp	r7, r1
 8007a74:	bf38      	it	cc
 8007a76:	2204      	movcc	r2, #4
 8007a78:	9201      	str	r2, [sp, #4]
 8007a7a:	9a02      	ldr	r2, [sp, #8]
 8007a7c:	9303      	str	r3, [sp, #12]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d80c      	bhi.n	8007a9c <__multiply+0x9c>
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	dd03      	ble.n	8007a8e <__multiply+0x8e>
 8007a86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d05a      	beq.n	8007b44 <__multiply+0x144>
 8007a8e:	6106      	str	r6, [r0, #16]
 8007a90:	b005      	add	sp, #20
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	f843 2b04 	str.w	r2, [r3], #4
 8007a9a:	e7d8      	b.n	8007a4e <__multiply+0x4e>
 8007a9c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	d023      	beq.n	8007aee <__multiply+0xee>
 8007aa6:	46a9      	mov	r9, r5
 8007aa8:	f04f 0c00 	mov.w	ip, #0
 8007aac:	f104 0e14 	add.w	lr, r4, #20
 8007ab0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ab4:	f8d9 1000 	ldr.w	r1, [r9]
 8007ab8:	fa1f fb82 	uxth.w	fp, r2
 8007abc:	b289      	uxth	r1, r1
 8007abe:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ac2:	4461      	add	r1, ip
 8007ac4:	f8d9 c000 	ldr.w	ip, [r9]
 8007ac8:	0c12      	lsrs	r2, r2, #16
 8007aca:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007ace:	fb0a c202 	mla	r2, sl, r2, ip
 8007ad2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007ad6:	b289      	uxth	r1, r1
 8007ad8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007adc:	4577      	cmp	r7, lr
 8007ade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ae2:	f849 1b04 	str.w	r1, [r9], #4
 8007ae6:	d8e3      	bhi.n	8007ab0 <__multiply+0xb0>
 8007ae8:	9a01      	ldr	r2, [sp, #4]
 8007aea:	f845 c002 	str.w	ip, [r5, r2]
 8007aee:	9a03      	ldr	r2, [sp, #12]
 8007af0:	3304      	adds	r3, #4
 8007af2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007af6:	f1b9 0f00 	cmp.w	r9, #0
 8007afa:	d021      	beq.n	8007b40 <__multiply+0x140>
 8007afc:	46ae      	mov	lr, r5
 8007afe:	f04f 0a00 	mov.w	sl, #0
 8007b02:	6829      	ldr	r1, [r5, #0]
 8007b04:	f104 0c14 	add.w	ip, r4, #20
 8007b08:	f8bc b000 	ldrh.w	fp, [ip]
 8007b0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007b10:	b289      	uxth	r1, r1
 8007b12:	fb09 220b 	mla	r2, r9, fp, r2
 8007b16:	4452      	add	r2, sl
 8007b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b1c:	f84e 1b04 	str.w	r1, [lr], #4
 8007b20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007b24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b28:	f8be 1000 	ldrh.w	r1, [lr]
 8007b2c:	4567      	cmp	r7, ip
 8007b2e:	fb09 110a 	mla	r1, r9, sl, r1
 8007b32:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007b36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007b3a:	d8e5      	bhi.n	8007b08 <__multiply+0x108>
 8007b3c:	9a01      	ldr	r2, [sp, #4]
 8007b3e:	50a9      	str	r1, [r5, r2]
 8007b40:	3504      	adds	r5, #4
 8007b42:	e79a      	b.n	8007a7a <__multiply+0x7a>
 8007b44:	3e01      	subs	r6, #1
 8007b46:	e79c      	b.n	8007a82 <__multiply+0x82>
 8007b48:	0800986f 	.word	0x0800986f
 8007b4c:	08009880 	.word	0x08009880

08007b50 <__pow5mult>:
 8007b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b54:	4615      	mov	r5, r2
 8007b56:	f012 0203 	ands.w	r2, r2, #3
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460f      	mov	r7, r1
 8007b5e:	d007      	beq.n	8007b70 <__pow5mult+0x20>
 8007b60:	4c25      	ldr	r4, [pc, #148]	; (8007bf8 <__pow5mult+0xa8>)
 8007b62:	3a01      	subs	r2, #1
 8007b64:	2300      	movs	r3, #0
 8007b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b6a:	f7ff fe9f 	bl	80078ac <__multadd>
 8007b6e:	4607      	mov	r7, r0
 8007b70:	10ad      	asrs	r5, r5, #2
 8007b72:	d03d      	beq.n	8007bf0 <__pow5mult+0xa0>
 8007b74:	69f4      	ldr	r4, [r6, #28]
 8007b76:	b97c      	cbnz	r4, 8007b98 <__pow5mult+0x48>
 8007b78:	2010      	movs	r0, #16
 8007b7a:	f7ff fd81 	bl	8007680 <malloc>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	61f0      	str	r0, [r6, #28]
 8007b82:	b928      	cbnz	r0, 8007b90 <__pow5mult+0x40>
 8007b84:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b88:	4b1c      	ldr	r3, [pc, #112]	; (8007bfc <__pow5mult+0xac>)
 8007b8a:	481d      	ldr	r0, [pc, #116]	; (8007c00 <__pow5mult+0xb0>)
 8007b8c:	f000 fbde 	bl	800834c <__assert_func>
 8007b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b94:	6004      	str	r4, [r0, #0]
 8007b96:	60c4      	str	r4, [r0, #12]
 8007b98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba0:	b94c      	cbnz	r4, 8007bb6 <__pow5mult+0x66>
 8007ba2:	f240 2171 	movw	r1, #625	; 0x271
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f7ff ff14 	bl	80079d4 <__i2b>
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb4:	6003      	str	r3, [r0, #0]
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	07eb      	lsls	r3, r5, #31
 8007bbc:	d50a      	bpl.n	8007bd4 <__pow5mult+0x84>
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f7ff ff1c 	bl	8007a00 <__multiply>
 8007bc8:	4680      	mov	r8, r0
 8007bca:	4639      	mov	r1, r7
 8007bcc:	4630      	mov	r0, r6
 8007bce:	f7ff fe4b 	bl	8007868 <_Bfree>
 8007bd2:	4647      	mov	r7, r8
 8007bd4:	106d      	asrs	r5, r5, #1
 8007bd6:	d00b      	beq.n	8007bf0 <__pow5mult+0xa0>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	b938      	cbnz	r0, 8007bec <__pow5mult+0x9c>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4621      	mov	r1, r4
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff ff0d 	bl	8007a00 <__multiply>
 8007be6:	6020      	str	r0, [r4, #0]
 8007be8:	f8c0 9000 	str.w	r9, [r0]
 8007bec:	4604      	mov	r4, r0
 8007bee:	e7e4      	b.n	8007bba <__pow5mult+0x6a>
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bf6:	bf00      	nop
 8007bf8:	080099d0 	.word	0x080099d0
 8007bfc:	08009800 	.word	0x08009800
 8007c00:	08009880 	.word	0x08009880

08007c04 <__lshift>:
 8007c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c08:	460c      	mov	r4, r1
 8007c0a:	4607      	mov	r7, r0
 8007c0c:	4691      	mov	r9, r2
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	6849      	ldr	r1, [r1, #4]
 8007c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c1c:	f108 0601 	add.w	r6, r8, #1
 8007c20:	42b3      	cmp	r3, r6
 8007c22:	db0b      	blt.n	8007c3c <__lshift+0x38>
 8007c24:	4638      	mov	r0, r7
 8007c26:	f7ff fddf 	bl	80077e8 <_Balloc>
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	b948      	cbnz	r0, 8007c42 <__lshift+0x3e>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007c34:	4b27      	ldr	r3, [pc, #156]	; (8007cd4 <__lshift+0xd0>)
 8007c36:	4828      	ldr	r0, [pc, #160]	; (8007cd8 <__lshift+0xd4>)
 8007c38:	f000 fb88 	bl	800834c <__assert_func>
 8007c3c:	3101      	adds	r1, #1
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	e7ee      	b.n	8007c20 <__lshift+0x1c>
 8007c42:	2300      	movs	r3, #0
 8007c44:	f100 0114 	add.w	r1, r0, #20
 8007c48:	f100 0210 	add.w	r2, r0, #16
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	4553      	cmp	r3, sl
 8007c50:	db33      	blt.n	8007cba <__lshift+0xb6>
 8007c52:	6920      	ldr	r0, [r4, #16]
 8007c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c58:	f104 0314 	add.w	r3, r4, #20
 8007c5c:	f019 091f 	ands.w	r9, r9, #31
 8007c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c68:	d02b      	beq.n	8007cc2 <__lshift+0xbe>
 8007c6a:	468a      	mov	sl, r1
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8007c72:	6818      	ldr	r0, [r3, #0]
 8007c74:	fa00 f009 	lsl.w	r0, r0, r9
 8007c78:	4310      	orrs	r0, r2
 8007c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c82:	459c      	cmp	ip, r3
 8007c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c88:	d8f3      	bhi.n	8007c72 <__lshift+0x6e>
 8007c8a:	ebac 0304 	sub.w	r3, ip, r4
 8007c8e:	3b15      	subs	r3, #21
 8007c90:	f023 0303 	bic.w	r3, r3, #3
 8007c94:	3304      	adds	r3, #4
 8007c96:	f104 0015 	add.w	r0, r4, #21
 8007c9a:	4584      	cmp	ip, r0
 8007c9c:	bf38      	it	cc
 8007c9e:	2304      	movcc	r3, #4
 8007ca0:	50ca      	str	r2, [r1, r3]
 8007ca2:	b10a      	cbz	r2, 8007ca8 <__lshift+0xa4>
 8007ca4:	f108 0602 	add.w	r6, r8, #2
 8007ca8:	3e01      	subs	r6, #1
 8007caa:	4638      	mov	r0, r7
 8007cac:	4621      	mov	r1, r4
 8007cae:	612e      	str	r6, [r5, #16]
 8007cb0:	f7ff fdda 	bl	8007868 <_Bfree>
 8007cb4:	4628      	mov	r0, r5
 8007cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	e7c5      	b.n	8007c4e <__lshift+0x4a>
 8007cc2:	3904      	subs	r1, #4
 8007cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc8:	459c      	cmp	ip, r3
 8007cca:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cce:	d8f9      	bhi.n	8007cc4 <__lshift+0xc0>
 8007cd0:	e7ea      	b.n	8007ca8 <__lshift+0xa4>
 8007cd2:	bf00      	nop
 8007cd4:	0800986f 	.word	0x0800986f
 8007cd8:	08009880 	.word	0x08009880

08007cdc <__mcmp>:
 8007cdc:	4603      	mov	r3, r0
 8007cde:	690a      	ldr	r2, [r1, #16]
 8007ce0:	6900      	ldr	r0, [r0, #16]
 8007ce2:	b530      	push	{r4, r5, lr}
 8007ce4:	1a80      	subs	r0, r0, r2
 8007ce6:	d10d      	bne.n	8007d04 <__mcmp+0x28>
 8007ce8:	3314      	adds	r3, #20
 8007cea:	3114      	adds	r1, #20
 8007cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cfc:	4295      	cmp	r5, r2
 8007cfe:	d002      	beq.n	8007d06 <__mcmp+0x2a>
 8007d00:	d304      	bcc.n	8007d0c <__mcmp+0x30>
 8007d02:	2001      	movs	r0, #1
 8007d04:	bd30      	pop	{r4, r5, pc}
 8007d06:	42a3      	cmp	r3, r4
 8007d08:	d3f4      	bcc.n	8007cf4 <__mcmp+0x18>
 8007d0a:	e7fb      	b.n	8007d04 <__mcmp+0x28>
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e7f8      	b.n	8007d04 <__mcmp+0x28>
	...

08007d14 <__mdiff>:
 8007d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	460d      	mov	r5, r1
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4614      	mov	r4, r2
 8007d22:	f7ff ffdb 	bl	8007cdc <__mcmp>
 8007d26:	1e06      	subs	r6, r0, #0
 8007d28:	d111      	bne.n	8007d4e <__mdiff+0x3a>
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4638      	mov	r0, r7
 8007d2e:	f7ff fd5b 	bl	80077e8 <_Balloc>
 8007d32:	4602      	mov	r2, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <__mdiff+0x2e>
 8007d36:	f240 2137 	movw	r1, #567	; 0x237
 8007d3a:	4b3a      	ldr	r3, [pc, #232]	; (8007e24 <__mdiff+0x110>)
 8007d3c:	483a      	ldr	r0, [pc, #232]	; (8007e28 <__mdiff+0x114>)
 8007d3e:	f000 fb05 	bl	800834c <__assert_func>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d48:	4610      	mov	r0, r2
 8007d4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4e:	bfa4      	itt	ge
 8007d50:	4623      	movge	r3, r4
 8007d52:	462c      	movge	r4, r5
 8007d54:	4638      	mov	r0, r7
 8007d56:	6861      	ldr	r1, [r4, #4]
 8007d58:	bfa6      	itte	ge
 8007d5a:	461d      	movge	r5, r3
 8007d5c:	2600      	movge	r6, #0
 8007d5e:	2601      	movlt	r6, #1
 8007d60:	f7ff fd42 	bl	80077e8 <_Balloc>
 8007d64:	4602      	mov	r2, r0
 8007d66:	b918      	cbnz	r0, 8007d70 <__mdiff+0x5c>
 8007d68:	f240 2145 	movw	r1, #581	; 0x245
 8007d6c:	4b2d      	ldr	r3, [pc, #180]	; (8007e24 <__mdiff+0x110>)
 8007d6e:	e7e5      	b.n	8007d3c <__mdiff+0x28>
 8007d70:	f102 0814 	add.w	r8, r2, #20
 8007d74:	46c2      	mov	sl, r8
 8007d76:	f04f 0c00 	mov.w	ip, #0
 8007d7a:	6927      	ldr	r7, [r4, #16]
 8007d7c:	60c6      	str	r6, [r0, #12]
 8007d7e:	692e      	ldr	r6, [r5, #16]
 8007d80:	f104 0014 	add.w	r0, r4, #20
 8007d84:	f105 0914 	add.w	r9, r5, #20
 8007d88:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d90:	3410      	adds	r4, #16
 8007d92:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d96:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d9a:	fa1f f18b 	uxth.w	r1, fp
 8007d9e:	4461      	add	r1, ip
 8007da0:	fa1f fc83 	uxth.w	ip, r3
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	eba1 010c 	sub.w	r1, r1, ip
 8007daa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007dae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007db2:	b289      	uxth	r1, r1
 8007db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007db8:	454e      	cmp	r6, r9
 8007dba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007dbe:	f84a 1b04 	str.w	r1, [sl], #4
 8007dc2:	d8e6      	bhi.n	8007d92 <__mdiff+0x7e>
 8007dc4:	1b73      	subs	r3, r6, r5
 8007dc6:	3b15      	subs	r3, #21
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	3515      	adds	r5, #21
 8007dce:	3304      	adds	r3, #4
 8007dd0:	42ae      	cmp	r6, r5
 8007dd2:	bf38      	it	cc
 8007dd4:	2304      	movcc	r3, #4
 8007dd6:	4418      	add	r0, r3
 8007dd8:	4443      	add	r3, r8
 8007dda:	461e      	mov	r6, r3
 8007ddc:	4605      	mov	r5, r0
 8007dde:	4575      	cmp	r5, lr
 8007de0:	d30e      	bcc.n	8007e00 <__mdiff+0xec>
 8007de2:	f10e 0103 	add.w	r1, lr, #3
 8007de6:	1a09      	subs	r1, r1, r0
 8007de8:	f021 0103 	bic.w	r1, r1, #3
 8007dec:	3803      	subs	r0, #3
 8007dee:	4586      	cmp	lr, r0
 8007df0:	bf38      	it	cc
 8007df2:	2100      	movcc	r1, #0
 8007df4:	440b      	add	r3, r1
 8007df6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007dfa:	b189      	cbz	r1, 8007e20 <__mdiff+0x10c>
 8007dfc:	6117      	str	r7, [r2, #16]
 8007dfe:	e7a3      	b.n	8007d48 <__mdiff+0x34>
 8007e00:	f855 8b04 	ldr.w	r8, [r5], #4
 8007e04:	fa1f f188 	uxth.w	r1, r8
 8007e08:	4461      	add	r1, ip
 8007e0a:	140c      	asrs	r4, r1, #16
 8007e0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007e10:	b289      	uxth	r1, r1
 8007e12:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007e16:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007e1a:	f846 1b04 	str.w	r1, [r6], #4
 8007e1e:	e7de      	b.n	8007dde <__mdiff+0xca>
 8007e20:	3f01      	subs	r7, #1
 8007e22:	e7e8      	b.n	8007df6 <__mdiff+0xe2>
 8007e24:	0800986f 	.word	0x0800986f
 8007e28:	08009880 	.word	0x08009880

08007e2c <__d2b>:
 8007e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e2e:	2101      	movs	r1, #1
 8007e30:	4617      	mov	r7, r2
 8007e32:	461c      	mov	r4, r3
 8007e34:	9e08      	ldr	r6, [sp, #32]
 8007e36:	f7ff fcd7 	bl	80077e8 <_Balloc>
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	b930      	cbnz	r0, 8007e4c <__d2b+0x20>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	f240 310f 	movw	r1, #783	; 0x30f
 8007e44:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <__d2b+0xa4>)
 8007e46:	4823      	ldr	r0, [pc, #140]	; (8007ed4 <__d2b+0xa8>)
 8007e48:	f000 fa80 	bl	800834c <__assert_func>
 8007e4c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007e50:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007e54:	bb24      	cbnz	r4, 8007ea0 <__d2b+0x74>
 8007e56:	2f00      	cmp	r7, #0
 8007e58:	9301      	str	r3, [sp, #4]
 8007e5a:	d026      	beq.n	8007eaa <__d2b+0x7e>
 8007e5c:	4668      	mov	r0, sp
 8007e5e:	9700      	str	r7, [sp, #0]
 8007e60:	f7ff fd8a 	bl	8007978 <__lo0bits>
 8007e64:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007e68:	b1e8      	cbz	r0, 8007ea6 <__d2b+0x7a>
 8007e6a:	f1c0 0320 	rsb	r3, r0, #32
 8007e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e72:	430b      	orrs	r3, r1
 8007e74:	40c2      	lsrs	r2, r0
 8007e76:	616b      	str	r3, [r5, #20]
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf14      	ite	ne
 8007e80:	2102      	movne	r1, #2
 8007e82:	2101      	moveq	r1, #1
 8007e84:	61ab      	str	r3, [r5, #24]
 8007e86:	6129      	str	r1, [r5, #16]
 8007e88:	b1bc      	cbz	r4, 8007eba <__d2b+0x8e>
 8007e8a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e8e:	4404      	add	r4, r0
 8007e90:	6034      	str	r4, [r6, #0]
 8007e92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e98:	6018      	str	r0, [r3, #0]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	b003      	add	sp, #12
 8007e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea4:	e7d7      	b.n	8007e56 <__d2b+0x2a>
 8007ea6:	6169      	str	r1, [r5, #20]
 8007ea8:	e7e7      	b.n	8007e7a <__d2b+0x4e>
 8007eaa:	a801      	add	r0, sp, #4
 8007eac:	f7ff fd64 	bl	8007978 <__lo0bits>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	616b      	str	r3, [r5, #20]
 8007eb6:	3020      	adds	r0, #32
 8007eb8:	e7e5      	b.n	8007e86 <__d2b+0x5a>
 8007eba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ebe:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007ec2:	6030      	str	r0, [r6, #0]
 8007ec4:	6918      	ldr	r0, [r3, #16]
 8007ec6:	f7ff fd37 	bl	8007938 <__hi0bits>
 8007eca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007ece:	e7e2      	b.n	8007e96 <__d2b+0x6a>
 8007ed0:	0800986f 	.word	0x0800986f
 8007ed4:	08009880 	.word	0x08009880

08007ed8 <__ssputs_r>:
 8007ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007edc:	461f      	mov	r7, r3
 8007ede:	688e      	ldr	r6, [r1, #8]
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	42be      	cmp	r6, r7
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	4690      	mov	r8, r2
 8007ee8:	680b      	ldr	r3, [r1, #0]
 8007eea:	d82c      	bhi.n	8007f46 <__ssputs_r+0x6e>
 8007eec:	898a      	ldrh	r2, [r1, #12]
 8007eee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ef2:	d026      	beq.n	8007f42 <__ssputs_r+0x6a>
 8007ef4:	6965      	ldr	r5, [r4, #20]
 8007ef6:	6909      	ldr	r1, [r1, #16]
 8007ef8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007efc:	eba3 0901 	sub.w	r9, r3, r1
 8007f00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f04:	1c7b      	adds	r3, r7, #1
 8007f06:	444b      	add	r3, r9
 8007f08:	106d      	asrs	r5, r5, #1
 8007f0a:	429d      	cmp	r5, r3
 8007f0c:	bf38      	it	cc
 8007f0e:	461d      	movcc	r5, r3
 8007f10:	0553      	lsls	r3, r2, #21
 8007f12:	d527      	bpl.n	8007f64 <__ssputs_r+0x8c>
 8007f14:	4629      	mov	r1, r5
 8007f16:	f7ff fbdb 	bl	80076d0 <_malloc_r>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	b360      	cbz	r0, 8007f78 <__ssputs_r+0xa0>
 8007f1e:	464a      	mov	r2, r9
 8007f20:	6921      	ldr	r1, [r4, #16]
 8007f22:	f000 fa05 	bl	8008330 <memcpy>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	6126      	str	r6, [r4, #16]
 8007f34:	444e      	add	r6, r9
 8007f36:	6026      	str	r6, [r4, #0]
 8007f38:	463e      	mov	r6, r7
 8007f3a:	6165      	str	r5, [r4, #20]
 8007f3c:	eba5 0509 	sub.w	r5, r5, r9
 8007f40:	60a5      	str	r5, [r4, #8]
 8007f42:	42be      	cmp	r6, r7
 8007f44:	d900      	bls.n	8007f48 <__ssputs_r+0x70>
 8007f46:	463e      	mov	r6, r7
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	f000 f9c5 	bl	80082dc <memmove>
 8007f52:	2000      	movs	r0, #0
 8007f54:	68a3      	ldr	r3, [r4, #8]
 8007f56:	1b9b      	subs	r3, r3, r6
 8007f58:	60a3      	str	r3, [r4, #8]
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	4433      	add	r3, r6
 8007f5e:	6023      	str	r3, [r4, #0]
 8007f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f64:	462a      	mov	r2, r5
 8007f66:	f000 fa35 	bl	80083d4 <_realloc_r>
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1e0      	bne.n	8007f32 <__ssputs_r+0x5a>
 8007f70:	4650      	mov	r0, sl
 8007f72:	6921      	ldr	r1, [r4, #16]
 8007f74:	f7ff fb3c 	bl	80075f0 <_free_r>
 8007f78:	230c      	movs	r3, #12
 8007f7a:	f8ca 3000 	str.w	r3, [sl]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	f04f 30ff 	mov.w	r0, #4294967295
 8007f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	e7e9      	b.n	8007f60 <__ssputs_r+0x88>

08007f8c <_svfiprintf_r>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	4698      	mov	r8, r3
 8007f92:	898b      	ldrh	r3, [r1, #12]
 8007f94:	4607      	mov	r7, r0
 8007f96:	061b      	lsls	r3, r3, #24
 8007f98:	460d      	mov	r5, r1
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	b09d      	sub	sp, #116	; 0x74
 8007f9e:	d50e      	bpl.n	8007fbe <_svfiprintf_r+0x32>
 8007fa0:	690b      	ldr	r3, [r1, #16]
 8007fa2:	b963      	cbnz	r3, 8007fbe <_svfiprintf_r+0x32>
 8007fa4:	2140      	movs	r1, #64	; 0x40
 8007fa6:	f7ff fb93 	bl	80076d0 <_malloc_r>
 8007faa:	6028      	str	r0, [r5, #0]
 8007fac:	6128      	str	r0, [r5, #16]
 8007fae:	b920      	cbnz	r0, 8007fba <_svfiprintf_r+0x2e>
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fb8:	e0d0      	b.n	800815c <_svfiprintf_r+0x1d0>
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	616b      	str	r3, [r5, #20]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc8:	2330      	movs	r3, #48	; 0x30
 8007fca:	f04f 0901 	mov.w	r9, #1
 8007fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fd2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008174 <_svfiprintf_r+0x1e8>
 8007fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fda:	4623      	mov	r3, r4
 8007fdc:	469a      	mov	sl, r3
 8007fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe2:	b10a      	cbz	r2, 8007fe8 <_svfiprintf_r+0x5c>
 8007fe4:	2a25      	cmp	r2, #37	; 0x25
 8007fe6:	d1f9      	bne.n	8007fdc <_svfiprintf_r+0x50>
 8007fe8:	ebba 0b04 	subs.w	fp, sl, r4
 8007fec:	d00b      	beq.n	8008006 <_svfiprintf_r+0x7a>
 8007fee:	465b      	mov	r3, fp
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	f7ff ff6f 	bl	8007ed8 <__ssputs_r>
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f000 80a9 	beq.w	8008152 <_svfiprintf_r+0x1c6>
 8008000:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008002:	445a      	add	r2, fp
 8008004:	9209      	str	r2, [sp, #36]	; 0x24
 8008006:	f89a 3000 	ldrb.w	r3, [sl]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 80a1 	beq.w	8008152 <_svfiprintf_r+0x1c6>
 8008010:	2300      	movs	r3, #0
 8008012:	f04f 32ff 	mov.w	r2, #4294967295
 8008016:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800801a:	f10a 0a01 	add.w	sl, sl, #1
 800801e:	9304      	str	r3, [sp, #16]
 8008020:	9307      	str	r3, [sp, #28]
 8008022:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008026:	931a      	str	r3, [sp, #104]	; 0x68
 8008028:	4654      	mov	r4, sl
 800802a:	2205      	movs	r2, #5
 800802c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008030:	4850      	ldr	r0, [pc, #320]	; (8008174 <_svfiprintf_r+0x1e8>)
 8008032:	f7fe fc62 	bl	80068fa <memchr>
 8008036:	9a04      	ldr	r2, [sp, #16]
 8008038:	b9d8      	cbnz	r0, 8008072 <_svfiprintf_r+0xe6>
 800803a:	06d0      	lsls	r0, r2, #27
 800803c:	bf44      	itt	mi
 800803e:	2320      	movmi	r3, #32
 8008040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008044:	0711      	lsls	r1, r2, #28
 8008046:	bf44      	itt	mi
 8008048:	232b      	movmi	r3, #43	; 0x2b
 800804a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800804e:	f89a 3000 	ldrb.w	r3, [sl]
 8008052:	2b2a      	cmp	r3, #42	; 0x2a
 8008054:	d015      	beq.n	8008082 <_svfiprintf_r+0xf6>
 8008056:	4654      	mov	r4, sl
 8008058:	2000      	movs	r0, #0
 800805a:	f04f 0c0a 	mov.w	ip, #10
 800805e:	9a07      	ldr	r2, [sp, #28]
 8008060:	4621      	mov	r1, r4
 8008062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008066:	3b30      	subs	r3, #48	; 0x30
 8008068:	2b09      	cmp	r3, #9
 800806a:	d94d      	bls.n	8008108 <_svfiprintf_r+0x17c>
 800806c:	b1b0      	cbz	r0, 800809c <_svfiprintf_r+0x110>
 800806e:	9207      	str	r2, [sp, #28]
 8008070:	e014      	b.n	800809c <_svfiprintf_r+0x110>
 8008072:	eba0 0308 	sub.w	r3, r0, r8
 8008076:	fa09 f303 	lsl.w	r3, r9, r3
 800807a:	4313      	orrs	r3, r2
 800807c:	46a2      	mov	sl, r4
 800807e:	9304      	str	r3, [sp, #16]
 8008080:	e7d2      	b.n	8008028 <_svfiprintf_r+0x9c>
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	1d19      	adds	r1, r3, #4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	9103      	str	r1, [sp, #12]
 800808a:	2b00      	cmp	r3, #0
 800808c:	bfbb      	ittet	lt
 800808e:	425b      	neglt	r3, r3
 8008090:	f042 0202 	orrlt.w	r2, r2, #2
 8008094:	9307      	strge	r3, [sp, #28]
 8008096:	9307      	strlt	r3, [sp, #28]
 8008098:	bfb8      	it	lt
 800809a:	9204      	strlt	r2, [sp, #16]
 800809c:	7823      	ldrb	r3, [r4, #0]
 800809e:	2b2e      	cmp	r3, #46	; 0x2e
 80080a0:	d10c      	bne.n	80080bc <_svfiprintf_r+0x130>
 80080a2:	7863      	ldrb	r3, [r4, #1]
 80080a4:	2b2a      	cmp	r3, #42	; 0x2a
 80080a6:	d134      	bne.n	8008112 <_svfiprintf_r+0x186>
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	3402      	adds	r4, #2
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	9203      	str	r2, [sp, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	bfb8      	it	lt
 80080b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80080ba:	9305      	str	r3, [sp, #20]
 80080bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008178 <_svfiprintf_r+0x1ec>
 80080c0:	2203      	movs	r2, #3
 80080c2:	4650      	mov	r0, sl
 80080c4:	7821      	ldrb	r1, [r4, #0]
 80080c6:	f7fe fc18 	bl	80068fa <memchr>
 80080ca:	b138      	cbz	r0, 80080dc <_svfiprintf_r+0x150>
 80080cc:	2240      	movs	r2, #64	; 0x40
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	eba0 000a 	sub.w	r0, r0, sl
 80080d4:	4082      	lsls	r2, r0
 80080d6:	4313      	orrs	r3, r2
 80080d8:	3401      	adds	r4, #1
 80080da:	9304      	str	r3, [sp, #16]
 80080dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e0:	2206      	movs	r2, #6
 80080e2:	4826      	ldr	r0, [pc, #152]	; (800817c <_svfiprintf_r+0x1f0>)
 80080e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080e8:	f7fe fc07 	bl	80068fa <memchr>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d038      	beq.n	8008162 <_svfiprintf_r+0x1d6>
 80080f0:	4b23      	ldr	r3, [pc, #140]	; (8008180 <_svfiprintf_r+0x1f4>)
 80080f2:	bb1b      	cbnz	r3, 800813c <_svfiprintf_r+0x1b0>
 80080f4:	9b03      	ldr	r3, [sp, #12]
 80080f6:	3307      	adds	r3, #7
 80080f8:	f023 0307 	bic.w	r3, r3, #7
 80080fc:	3308      	adds	r3, #8
 80080fe:	9303      	str	r3, [sp, #12]
 8008100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008102:	4433      	add	r3, r6
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	e768      	b.n	8007fda <_svfiprintf_r+0x4e>
 8008108:	460c      	mov	r4, r1
 800810a:	2001      	movs	r0, #1
 800810c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008110:	e7a6      	b.n	8008060 <_svfiprintf_r+0xd4>
 8008112:	2300      	movs	r3, #0
 8008114:	f04f 0c0a 	mov.w	ip, #10
 8008118:	4619      	mov	r1, r3
 800811a:	3401      	adds	r4, #1
 800811c:	9305      	str	r3, [sp, #20]
 800811e:	4620      	mov	r0, r4
 8008120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008124:	3a30      	subs	r2, #48	; 0x30
 8008126:	2a09      	cmp	r2, #9
 8008128:	d903      	bls.n	8008132 <_svfiprintf_r+0x1a6>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0c6      	beq.n	80080bc <_svfiprintf_r+0x130>
 800812e:	9105      	str	r1, [sp, #20]
 8008130:	e7c4      	b.n	80080bc <_svfiprintf_r+0x130>
 8008132:	4604      	mov	r4, r0
 8008134:	2301      	movs	r3, #1
 8008136:	fb0c 2101 	mla	r1, ip, r1, r2
 800813a:	e7f0      	b.n	800811e <_svfiprintf_r+0x192>
 800813c:	ab03      	add	r3, sp, #12
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	462a      	mov	r2, r5
 8008142:	4638      	mov	r0, r7
 8008144:	4b0f      	ldr	r3, [pc, #60]	; (8008184 <_svfiprintf_r+0x1f8>)
 8008146:	a904      	add	r1, sp, #16
 8008148:	f7fd fe70 	bl	8005e2c <_printf_float>
 800814c:	1c42      	adds	r2, r0, #1
 800814e:	4606      	mov	r6, r0
 8008150:	d1d6      	bne.n	8008100 <_svfiprintf_r+0x174>
 8008152:	89ab      	ldrh	r3, [r5, #12]
 8008154:	065b      	lsls	r3, r3, #25
 8008156:	f53f af2d 	bmi.w	8007fb4 <_svfiprintf_r+0x28>
 800815a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800815c:	b01d      	add	sp, #116	; 0x74
 800815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008162:	ab03      	add	r3, sp, #12
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	462a      	mov	r2, r5
 8008168:	4638      	mov	r0, r7
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <_svfiprintf_r+0x1f8>)
 800816c:	a904      	add	r1, sp, #16
 800816e:	f7fe f8fd 	bl	800636c <_printf_i>
 8008172:	e7eb      	b.n	800814c <_svfiprintf_r+0x1c0>
 8008174:	080099dc 	.word	0x080099dc
 8008178:	080099e2 	.word	0x080099e2
 800817c:	080099e6 	.word	0x080099e6
 8008180:	08005e2d 	.word	0x08005e2d
 8008184:	08007ed9 	.word	0x08007ed9

08008188 <__sflush_r>:
 8008188:	898a      	ldrh	r2, [r1, #12]
 800818a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818c:	4605      	mov	r5, r0
 800818e:	0710      	lsls	r0, r2, #28
 8008190:	460c      	mov	r4, r1
 8008192:	d457      	bmi.n	8008244 <__sflush_r+0xbc>
 8008194:	684b      	ldr	r3, [r1, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dc04      	bgt.n	80081a4 <__sflush_r+0x1c>
 800819a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800819c:	2b00      	cmp	r3, #0
 800819e:	dc01      	bgt.n	80081a4 <__sflush_r+0x1c>
 80081a0:	2000      	movs	r0, #0
 80081a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	d0fa      	beq.n	80081a0 <__sflush_r+0x18>
 80081aa:	2300      	movs	r3, #0
 80081ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80081b0:	682f      	ldr	r7, [r5, #0]
 80081b2:	6a21      	ldr	r1, [r4, #32]
 80081b4:	602b      	str	r3, [r5, #0]
 80081b6:	d032      	beq.n	800821e <__sflush_r+0x96>
 80081b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80081ba:	89a3      	ldrh	r3, [r4, #12]
 80081bc:	075a      	lsls	r2, r3, #29
 80081be:	d505      	bpl.n	80081cc <__sflush_r+0x44>
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	1ac0      	subs	r0, r0, r3
 80081c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081c6:	b10b      	cbz	r3, 80081cc <__sflush_r+0x44>
 80081c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80081ca:	1ac0      	subs	r0, r0, r3
 80081cc:	2300      	movs	r3, #0
 80081ce:	4602      	mov	r2, r0
 80081d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081d2:	4628      	mov	r0, r5
 80081d4:	6a21      	ldr	r1, [r4, #32]
 80081d6:	47b0      	blx	r6
 80081d8:	1c43      	adds	r3, r0, #1
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	d106      	bne.n	80081ec <__sflush_r+0x64>
 80081de:	6829      	ldr	r1, [r5, #0]
 80081e0:	291d      	cmp	r1, #29
 80081e2:	d82b      	bhi.n	800823c <__sflush_r+0xb4>
 80081e4:	4a28      	ldr	r2, [pc, #160]	; (8008288 <__sflush_r+0x100>)
 80081e6:	410a      	asrs	r2, r1
 80081e8:	07d6      	lsls	r6, r2, #31
 80081ea:	d427      	bmi.n	800823c <__sflush_r+0xb4>
 80081ec:	2200      	movs	r2, #0
 80081ee:	6062      	str	r2, [r4, #4]
 80081f0:	6922      	ldr	r2, [r4, #16]
 80081f2:	04d9      	lsls	r1, r3, #19
 80081f4:	6022      	str	r2, [r4, #0]
 80081f6:	d504      	bpl.n	8008202 <__sflush_r+0x7a>
 80081f8:	1c42      	adds	r2, r0, #1
 80081fa:	d101      	bne.n	8008200 <__sflush_r+0x78>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b903      	cbnz	r3, 8008202 <__sflush_r+0x7a>
 8008200:	6560      	str	r0, [r4, #84]	; 0x54
 8008202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008204:	602f      	str	r7, [r5, #0]
 8008206:	2900      	cmp	r1, #0
 8008208:	d0ca      	beq.n	80081a0 <__sflush_r+0x18>
 800820a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800820e:	4299      	cmp	r1, r3
 8008210:	d002      	beq.n	8008218 <__sflush_r+0x90>
 8008212:	4628      	mov	r0, r5
 8008214:	f7ff f9ec 	bl	80075f0 <_free_r>
 8008218:	2000      	movs	r0, #0
 800821a:	6360      	str	r0, [r4, #52]	; 0x34
 800821c:	e7c1      	b.n	80081a2 <__sflush_r+0x1a>
 800821e:	2301      	movs	r3, #1
 8008220:	4628      	mov	r0, r5
 8008222:	47b0      	blx	r6
 8008224:	1c41      	adds	r1, r0, #1
 8008226:	d1c8      	bne.n	80081ba <__sflush_r+0x32>
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0c5      	beq.n	80081ba <__sflush_r+0x32>
 800822e:	2b1d      	cmp	r3, #29
 8008230:	d001      	beq.n	8008236 <__sflush_r+0xae>
 8008232:	2b16      	cmp	r3, #22
 8008234:	d101      	bne.n	800823a <__sflush_r+0xb2>
 8008236:	602f      	str	r7, [r5, #0]
 8008238:	e7b2      	b.n	80081a0 <__sflush_r+0x18>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	e7ae      	b.n	80081a2 <__sflush_r+0x1a>
 8008244:	690f      	ldr	r7, [r1, #16]
 8008246:	2f00      	cmp	r7, #0
 8008248:	d0aa      	beq.n	80081a0 <__sflush_r+0x18>
 800824a:	0793      	lsls	r3, r2, #30
 800824c:	bf18      	it	ne
 800824e:	2300      	movne	r3, #0
 8008250:	680e      	ldr	r6, [r1, #0]
 8008252:	bf08      	it	eq
 8008254:	694b      	ldreq	r3, [r1, #20]
 8008256:	1bf6      	subs	r6, r6, r7
 8008258:	600f      	str	r7, [r1, #0]
 800825a:	608b      	str	r3, [r1, #8]
 800825c:	2e00      	cmp	r6, #0
 800825e:	dd9f      	ble.n	80081a0 <__sflush_r+0x18>
 8008260:	4633      	mov	r3, r6
 8008262:	463a      	mov	r2, r7
 8008264:	4628      	mov	r0, r5
 8008266:	6a21      	ldr	r1, [r4, #32]
 8008268:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800826c:	47e0      	blx	ip
 800826e:	2800      	cmp	r0, #0
 8008270:	dc06      	bgt.n	8008280 <__sflush_r+0xf8>
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	f04f 30ff 	mov.w	r0, #4294967295
 8008278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	e790      	b.n	80081a2 <__sflush_r+0x1a>
 8008280:	4407      	add	r7, r0
 8008282:	1a36      	subs	r6, r6, r0
 8008284:	e7ea      	b.n	800825c <__sflush_r+0xd4>
 8008286:	bf00      	nop
 8008288:	dfbffffe 	.word	0xdfbffffe

0800828c <_fflush_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	690b      	ldr	r3, [r1, #16]
 8008290:	4605      	mov	r5, r0
 8008292:	460c      	mov	r4, r1
 8008294:	b913      	cbnz	r3, 800829c <_fflush_r+0x10>
 8008296:	2500      	movs	r5, #0
 8008298:	4628      	mov	r0, r5
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	b118      	cbz	r0, 80082a6 <_fflush_r+0x1a>
 800829e:	6a03      	ldr	r3, [r0, #32]
 80082a0:	b90b      	cbnz	r3, 80082a6 <_fflush_r+0x1a>
 80082a2:	f7fe fa11 	bl	80066c8 <__sinit>
 80082a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0f3      	beq.n	8008296 <_fflush_r+0xa>
 80082ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80082b0:	07d0      	lsls	r0, r2, #31
 80082b2:	d404      	bmi.n	80082be <_fflush_r+0x32>
 80082b4:	0599      	lsls	r1, r3, #22
 80082b6:	d402      	bmi.n	80082be <_fflush_r+0x32>
 80082b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082ba:	f7fe fb1c 	bl	80068f6 <__retarget_lock_acquire_recursive>
 80082be:	4628      	mov	r0, r5
 80082c0:	4621      	mov	r1, r4
 80082c2:	f7ff ff61 	bl	8008188 <__sflush_r>
 80082c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082c8:	4605      	mov	r5, r0
 80082ca:	07da      	lsls	r2, r3, #31
 80082cc:	d4e4      	bmi.n	8008298 <_fflush_r+0xc>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	059b      	lsls	r3, r3, #22
 80082d2:	d4e1      	bmi.n	8008298 <_fflush_r+0xc>
 80082d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082d6:	f7fe fb0f 	bl	80068f8 <__retarget_lock_release_recursive>
 80082da:	e7dd      	b.n	8008298 <_fflush_r+0xc>

080082dc <memmove>:
 80082dc:	4288      	cmp	r0, r1
 80082de:	b510      	push	{r4, lr}
 80082e0:	eb01 0402 	add.w	r4, r1, r2
 80082e4:	d902      	bls.n	80082ec <memmove+0x10>
 80082e6:	4284      	cmp	r4, r0
 80082e8:	4623      	mov	r3, r4
 80082ea:	d807      	bhi.n	80082fc <memmove+0x20>
 80082ec:	1e43      	subs	r3, r0, #1
 80082ee:	42a1      	cmp	r1, r4
 80082f0:	d008      	beq.n	8008304 <memmove+0x28>
 80082f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082fa:	e7f8      	b.n	80082ee <memmove+0x12>
 80082fc:	4601      	mov	r1, r0
 80082fe:	4402      	add	r2, r0
 8008300:	428a      	cmp	r2, r1
 8008302:	d100      	bne.n	8008306 <memmove+0x2a>
 8008304:	bd10      	pop	{r4, pc}
 8008306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800830a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800830e:	e7f7      	b.n	8008300 <memmove+0x24>

08008310 <_sbrk_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	2300      	movs	r3, #0
 8008314:	4d05      	ldr	r5, [pc, #20]	; (800832c <_sbrk_r+0x1c>)
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7fa fe5a 	bl	8002fd4 <_sbrk>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_sbrk_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_sbrk_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	2000093c 	.word	0x2000093c

08008330 <memcpy>:
 8008330:	440a      	add	r2, r1
 8008332:	4291      	cmp	r1, r2
 8008334:	f100 33ff 	add.w	r3, r0, #4294967295
 8008338:	d100      	bne.n	800833c <memcpy+0xc>
 800833a:	4770      	bx	lr
 800833c:	b510      	push	{r4, lr}
 800833e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008342:	4291      	cmp	r1, r2
 8008344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008348:	d1f9      	bne.n	800833e <memcpy+0xe>
 800834a:	bd10      	pop	{r4, pc}

0800834c <__assert_func>:
 800834c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800834e:	4614      	mov	r4, r2
 8008350:	461a      	mov	r2, r3
 8008352:	4b09      	ldr	r3, [pc, #36]	; (8008378 <__assert_func+0x2c>)
 8008354:	4605      	mov	r5, r0
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68d8      	ldr	r0, [r3, #12]
 800835a:	b14c      	cbz	r4, 8008370 <__assert_func+0x24>
 800835c:	4b07      	ldr	r3, [pc, #28]	; (800837c <__assert_func+0x30>)
 800835e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008362:	9100      	str	r1, [sp, #0]
 8008364:	462b      	mov	r3, r5
 8008366:	4906      	ldr	r1, [pc, #24]	; (8008380 <__assert_func+0x34>)
 8008368:	f000 f870 	bl	800844c <fiprintf>
 800836c:	f000 f880 	bl	8008470 <abort>
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <__assert_func+0x38>)
 8008372:	461c      	mov	r4, r3
 8008374:	e7f3      	b.n	800835e <__assert_func+0x12>
 8008376:	bf00      	nop
 8008378:	20000074 	.word	0x20000074
 800837c:	080099f7 	.word	0x080099f7
 8008380:	08009a04 	.word	0x08009a04
 8008384:	08009a32 	.word	0x08009a32

08008388 <_calloc_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	fba1 5402 	umull	r5, r4, r1, r2
 800838e:	b934      	cbnz	r4, 800839e <_calloc_r+0x16>
 8008390:	4629      	mov	r1, r5
 8008392:	f7ff f99d 	bl	80076d0 <_malloc_r>
 8008396:	4606      	mov	r6, r0
 8008398:	b928      	cbnz	r0, 80083a6 <_calloc_r+0x1e>
 800839a:	4630      	mov	r0, r6
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	220c      	movs	r2, #12
 80083a0:	2600      	movs	r6, #0
 80083a2:	6002      	str	r2, [r0, #0]
 80083a4:	e7f9      	b.n	800839a <_calloc_r+0x12>
 80083a6:	462a      	mov	r2, r5
 80083a8:	4621      	mov	r1, r4
 80083aa:	f7fe fa26 	bl	80067fa <memset>
 80083ae:	e7f4      	b.n	800839a <_calloc_r+0x12>

080083b0 <__ascii_mbtowc>:
 80083b0:	b082      	sub	sp, #8
 80083b2:	b901      	cbnz	r1, 80083b6 <__ascii_mbtowc+0x6>
 80083b4:	a901      	add	r1, sp, #4
 80083b6:	b142      	cbz	r2, 80083ca <__ascii_mbtowc+0x1a>
 80083b8:	b14b      	cbz	r3, 80083ce <__ascii_mbtowc+0x1e>
 80083ba:	7813      	ldrb	r3, [r2, #0]
 80083bc:	600b      	str	r3, [r1, #0]
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	1e10      	subs	r0, r2, #0
 80083c2:	bf18      	it	ne
 80083c4:	2001      	movne	r0, #1
 80083c6:	b002      	add	sp, #8
 80083c8:	4770      	bx	lr
 80083ca:	4610      	mov	r0, r2
 80083cc:	e7fb      	b.n	80083c6 <__ascii_mbtowc+0x16>
 80083ce:	f06f 0001 	mvn.w	r0, #1
 80083d2:	e7f8      	b.n	80083c6 <__ascii_mbtowc+0x16>

080083d4 <_realloc_r>:
 80083d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083d8:	4680      	mov	r8, r0
 80083da:	4614      	mov	r4, r2
 80083dc:	460e      	mov	r6, r1
 80083de:	b921      	cbnz	r1, 80083ea <_realloc_r+0x16>
 80083e0:	4611      	mov	r1, r2
 80083e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083e6:	f7ff b973 	b.w	80076d0 <_malloc_r>
 80083ea:	b92a      	cbnz	r2, 80083f8 <_realloc_r+0x24>
 80083ec:	f7ff f900 	bl	80075f0 <_free_r>
 80083f0:	4625      	mov	r5, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083f8:	f000 f841 	bl	800847e <_malloc_usable_size_r>
 80083fc:	4284      	cmp	r4, r0
 80083fe:	4607      	mov	r7, r0
 8008400:	d802      	bhi.n	8008408 <_realloc_r+0x34>
 8008402:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008406:	d812      	bhi.n	800842e <_realloc_r+0x5a>
 8008408:	4621      	mov	r1, r4
 800840a:	4640      	mov	r0, r8
 800840c:	f7ff f960 	bl	80076d0 <_malloc_r>
 8008410:	4605      	mov	r5, r0
 8008412:	2800      	cmp	r0, #0
 8008414:	d0ed      	beq.n	80083f2 <_realloc_r+0x1e>
 8008416:	42bc      	cmp	r4, r7
 8008418:	4622      	mov	r2, r4
 800841a:	4631      	mov	r1, r6
 800841c:	bf28      	it	cs
 800841e:	463a      	movcs	r2, r7
 8008420:	f7ff ff86 	bl	8008330 <memcpy>
 8008424:	4631      	mov	r1, r6
 8008426:	4640      	mov	r0, r8
 8008428:	f7ff f8e2 	bl	80075f0 <_free_r>
 800842c:	e7e1      	b.n	80083f2 <_realloc_r+0x1e>
 800842e:	4635      	mov	r5, r6
 8008430:	e7df      	b.n	80083f2 <_realloc_r+0x1e>

08008432 <__ascii_wctomb>:
 8008432:	4603      	mov	r3, r0
 8008434:	4608      	mov	r0, r1
 8008436:	b141      	cbz	r1, 800844a <__ascii_wctomb+0x18>
 8008438:	2aff      	cmp	r2, #255	; 0xff
 800843a:	d904      	bls.n	8008446 <__ascii_wctomb+0x14>
 800843c:	228a      	movs	r2, #138	; 0x8a
 800843e:	f04f 30ff 	mov.w	r0, #4294967295
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	4770      	bx	lr
 8008446:	2001      	movs	r0, #1
 8008448:	700a      	strb	r2, [r1, #0]
 800844a:	4770      	bx	lr

0800844c <fiprintf>:
 800844c:	b40e      	push	{r1, r2, r3}
 800844e:	b503      	push	{r0, r1, lr}
 8008450:	4601      	mov	r1, r0
 8008452:	ab03      	add	r3, sp, #12
 8008454:	4805      	ldr	r0, [pc, #20]	; (800846c <fiprintf+0x20>)
 8008456:	f853 2b04 	ldr.w	r2, [r3], #4
 800845a:	6800      	ldr	r0, [r0, #0]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f000 f83d 	bl	80084dc <_vfiprintf_r>
 8008462:	b002      	add	sp, #8
 8008464:	f85d eb04 	ldr.w	lr, [sp], #4
 8008468:	b003      	add	sp, #12
 800846a:	4770      	bx	lr
 800846c:	20000074 	.word	0x20000074

08008470 <abort>:
 8008470:	2006      	movs	r0, #6
 8008472:	b508      	push	{r3, lr}
 8008474:	f000 fa0a 	bl	800888c <raise>
 8008478:	2001      	movs	r0, #1
 800847a:	f7fa fd54 	bl	8002f26 <_exit>

0800847e <_malloc_usable_size_r>:
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	1f18      	subs	r0, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	bfbc      	itt	lt
 8008488:	580b      	ldrlt	r3, [r1, r0]
 800848a:	18c0      	addlt	r0, r0, r3
 800848c:	4770      	bx	lr

0800848e <__sfputc_r>:
 800848e:	6893      	ldr	r3, [r2, #8]
 8008490:	b410      	push	{r4}
 8008492:	3b01      	subs	r3, #1
 8008494:	2b00      	cmp	r3, #0
 8008496:	6093      	str	r3, [r2, #8]
 8008498:	da07      	bge.n	80084aa <__sfputc_r+0x1c>
 800849a:	6994      	ldr	r4, [r2, #24]
 800849c:	42a3      	cmp	r3, r4
 800849e:	db01      	blt.n	80084a4 <__sfputc_r+0x16>
 80084a0:	290a      	cmp	r1, #10
 80084a2:	d102      	bne.n	80084aa <__sfputc_r+0x1c>
 80084a4:	bc10      	pop	{r4}
 80084a6:	f000 b933 	b.w	8008710 <__swbuf_r>
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	1c58      	adds	r0, r3, #1
 80084ae:	6010      	str	r0, [r2, #0]
 80084b0:	7019      	strb	r1, [r3, #0]
 80084b2:	4608      	mov	r0, r1
 80084b4:	bc10      	pop	{r4}
 80084b6:	4770      	bx	lr

080084b8 <__sfputs_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	4614      	mov	r4, r2
 80084c0:	18d5      	adds	r5, r2, r3
 80084c2:	42ac      	cmp	r4, r5
 80084c4:	d101      	bne.n	80084ca <__sfputs_r+0x12>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e007      	b.n	80084da <__sfputs_r+0x22>
 80084ca:	463a      	mov	r2, r7
 80084cc:	4630      	mov	r0, r6
 80084ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d2:	f7ff ffdc 	bl	800848e <__sfputc_r>
 80084d6:	1c43      	adds	r3, r0, #1
 80084d8:	d1f3      	bne.n	80084c2 <__sfputs_r+0xa>
 80084da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084dc <_vfiprintf_r>:
 80084dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e0:	460d      	mov	r5, r1
 80084e2:	4614      	mov	r4, r2
 80084e4:	4698      	mov	r8, r3
 80084e6:	4606      	mov	r6, r0
 80084e8:	b09d      	sub	sp, #116	; 0x74
 80084ea:	b118      	cbz	r0, 80084f4 <_vfiprintf_r+0x18>
 80084ec:	6a03      	ldr	r3, [r0, #32]
 80084ee:	b90b      	cbnz	r3, 80084f4 <_vfiprintf_r+0x18>
 80084f0:	f7fe f8ea 	bl	80066c8 <__sinit>
 80084f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f6:	07d9      	lsls	r1, r3, #31
 80084f8:	d405      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 80084fa:	89ab      	ldrh	r3, [r5, #12]
 80084fc:	059a      	lsls	r2, r3, #22
 80084fe:	d402      	bmi.n	8008506 <_vfiprintf_r+0x2a>
 8008500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008502:	f7fe f9f8 	bl	80068f6 <__retarget_lock_acquire_recursive>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	071b      	lsls	r3, r3, #28
 800850a:	d501      	bpl.n	8008510 <_vfiprintf_r+0x34>
 800850c:	692b      	ldr	r3, [r5, #16]
 800850e:	b99b      	cbnz	r3, 8008538 <_vfiprintf_r+0x5c>
 8008510:	4629      	mov	r1, r5
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f93a 	bl	800878c <__swsetup_r>
 8008518:	b170      	cbz	r0, 8008538 <_vfiprintf_r+0x5c>
 800851a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800851c:	07dc      	lsls	r4, r3, #31
 800851e:	d504      	bpl.n	800852a <_vfiprintf_r+0x4e>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	b01d      	add	sp, #116	; 0x74
 8008526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852a:	89ab      	ldrh	r3, [r5, #12]
 800852c:	0598      	lsls	r0, r3, #22
 800852e:	d4f7      	bmi.n	8008520 <_vfiprintf_r+0x44>
 8008530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008532:	f7fe f9e1 	bl	80068f8 <__retarget_lock_release_recursive>
 8008536:	e7f3      	b.n	8008520 <_vfiprintf_r+0x44>
 8008538:	2300      	movs	r3, #0
 800853a:	9309      	str	r3, [sp, #36]	; 0x24
 800853c:	2320      	movs	r3, #32
 800853e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008542:	2330      	movs	r3, #48	; 0x30
 8008544:	f04f 0901 	mov.w	r9, #1
 8008548:	f8cd 800c 	str.w	r8, [sp, #12]
 800854c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80086fc <_vfiprintf_r+0x220>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	4623      	mov	r3, r4
 8008556:	469a      	mov	sl, r3
 8008558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855c:	b10a      	cbz	r2, 8008562 <_vfiprintf_r+0x86>
 800855e:	2a25      	cmp	r2, #37	; 0x25
 8008560:	d1f9      	bne.n	8008556 <_vfiprintf_r+0x7a>
 8008562:	ebba 0b04 	subs.w	fp, sl, r4
 8008566:	d00b      	beq.n	8008580 <_vfiprintf_r+0xa4>
 8008568:	465b      	mov	r3, fp
 800856a:	4622      	mov	r2, r4
 800856c:	4629      	mov	r1, r5
 800856e:	4630      	mov	r0, r6
 8008570:	f7ff ffa2 	bl	80084b8 <__sfputs_r>
 8008574:	3001      	adds	r0, #1
 8008576:	f000 80a9 	beq.w	80086cc <_vfiprintf_r+0x1f0>
 800857a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800857c:	445a      	add	r2, fp
 800857e:	9209      	str	r2, [sp, #36]	; 0x24
 8008580:	f89a 3000 	ldrb.w	r3, [sl]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 80a1 	beq.w	80086cc <_vfiprintf_r+0x1f0>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	f10a 0a01 	add.w	sl, sl, #1
 8008598:	9304      	str	r3, [sp, #16]
 800859a:	9307      	str	r3, [sp, #28]
 800859c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a0:	931a      	str	r3, [sp, #104]	; 0x68
 80085a2:	4654      	mov	r4, sl
 80085a4:	2205      	movs	r2, #5
 80085a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085aa:	4854      	ldr	r0, [pc, #336]	; (80086fc <_vfiprintf_r+0x220>)
 80085ac:	f7fe f9a5 	bl	80068fa <memchr>
 80085b0:	9a04      	ldr	r2, [sp, #16]
 80085b2:	b9d8      	cbnz	r0, 80085ec <_vfiprintf_r+0x110>
 80085b4:	06d1      	lsls	r1, r2, #27
 80085b6:	bf44      	itt	mi
 80085b8:	2320      	movmi	r3, #32
 80085ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085be:	0713      	lsls	r3, r2, #28
 80085c0:	bf44      	itt	mi
 80085c2:	232b      	movmi	r3, #43	; 0x2b
 80085c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c8:	f89a 3000 	ldrb.w	r3, [sl]
 80085cc:	2b2a      	cmp	r3, #42	; 0x2a
 80085ce:	d015      	beq.n	80085fc <_vfiprintf_r+0x120>
 80085d0:	4654      	mov	r4, sl
 80085d2:	2000      	movs	r0, #0
 80085d4:	f04f 0c0a 	mov.w	ip, #10
 80085d8:	9a07      	ldr	r2, [sp, #28]
 80085da:	4621      	mov	r1, r4
 80085dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e0:	3b30      	subs	r3, #48	; 0x30
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d94d      	bls.n	8008682 <_vfiprintf_r+0x1a6>
 80085e6:	b1b0      	cbz	r0, 8008616 <_vfiprintf_r+0x13a>
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	e014      	b.n	8008616 <_vfiprintf_r+0x13a>
 80085ec:	eba0 0308 	sub.w	r3, r0, r8
 80085f0:	fa09 f303 	lsl.w	r3, r9, r3
 80085f4:	4313      	orrs	r3, r2
 80085f6:	46a2      	mov	sl, r4
 80085f8:	9304      	str	r3, [sp, #16]
 80085fa:	e7d2      	b.n	80085a2 <_vfiprintf_r+0xc6>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	9103      	str	r1, [sp, #12]
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfbb      	ittet	lt
 8008608:	425b      	neglt	r3, r3
 800860a:	f042 0202 	orrlt.w	r2, r2, #2
 800860e:	9307      	strge	r3, [sp, #28]
 8008610:	9307      	strlt	r3, [sp, #28]
 8008612:	bfb8      	it	lt
 8008614:	9204      	strlt	r2, [sp, #16]
 8008616:	7823      	ldrb	r3, [r4, #0]
 8008618:	2b2e      	cmp	r3, #46	; 0x2e
 800861a:	d10c      	bne.n	8008636 <_vfiprintf_r+0x15a>
 800861c:	7863      	ldrb	r3, [r4, #1]
 800861e:	2b2a      	cmp	r3, #42	; 0x2a
 8008620:	d134      	bne.n	800868c <_vfiprintf_r+0x1b0>
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	3402      	adds	r4, #2
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	9203      	str	r2, [sp, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	bfb8      	it	lt
 8008630:	f04f 33ff 	movlt.w	r3, #4294967295
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008700 <_vfiprintf_r+0x224>
 800863a:	2203      	movs	r2, #3
 800863c:	4650      	mov	r0, sl
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	f7fe f95b 	bl	80068fa <memchr>
 8008644:	b138      	cbz	r0, 8008656 <_vfiprintf_r+0x17a>
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	9b04      	ldr	r3, [sp, #16]
 800864a:	eba0 000a 	sub.w	r0, r0, sl
 800864e:	4082      	lsls	r2, r0
 8008650:	4313      	orrs	r3, r2
 8008652:	3401      	adds	r4, #1
 8008654:	9304      	str	r3, [sp, #16]
 8008656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865a:	2206      	movs	r2, #6
 800865c:	4829      	ldr	r0, [pc, #164]	; (8008704 <_vfiprintf_r+0x228>)
 800865e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008662:	f7fe f94a 	bl	80068fa <memchr>
 8008666:	2800      	cmp	r0, #0
 8008668:	d03f      	beq.n	80086ea <_vfiprintf_r+0x20e>
 800866a:	4b27      	ldr	r3, [pc, #156]	; (8008708 <_vfiprintf_r+0x22c>)
 800866c:	bb1b      	cbnz	r3, 80086b6 <_vfiprintf_r+0x1da>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3307      	adds	r3, #7
 8008672:	f023 0307 	bic.w	r3, r3, #7
 8008676:	3308      	adds	r3, #8
 8008678:	9303      	str	r3, [sp, #12]
 800867a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800867c:	443b      	add	r3, r7
 800867e:	9309      	str	r3, [sp, #36]	; 0x24
 8008680:	e768      	b.n	8008554 <_vfiprintf_r+0x78>
 8008682:	460c      	mov	r4, r1
 8008684:	2001      	movs	r0, #1
 8008686:	fb0c 3202 	mla	r2, ip, r2, r3
 800868a:	e7a6      	b.n	80085da <_vfiprintf_r+0xfe>
 800868c:	2300      	movs	r3, #0
 800868e:	f04f 0c0a 	mov.w	ip, #10
 8008692:	4619      	mov	r1, r3
 8008694:	3401      	adds	r4, #1
 8008696:	9305      	str	r3, [sp, #20]
 8008698:	4620      	mov	r0, r4
 800869a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869e:	3a30      	subs	r2, #48	; 0x30
 80086a0:	2a09      	cmp	r2, #9
 80086a2:	d903      	bls.n	80086ac <_vfiprintf_r+0x1d0>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0c6      	beq.n	8008636 <_vfiprintf_r+0x15a>
 80086a8:	9105      	str	r1, [sp, #20]
 80086aa:	e7c4      	b.n	8008636 <_vfiprintf_r+0x15a>
 80086ac:	4604      	mov	r4, r0
 80086ae:	2301      	movs	r3, #1
 80086b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b4:	e7f0      	b.n	8008698 <_vfiprintf_r+0x1bc>
 80086b6:	ab03      	add	r3, sp, #12
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4630      	mov	r0, r6
 80086be:	4b13      	ldr	r3, [pc, #76]	; (800870c <_vfiprintf_r+0x230>)
 80086c0:	a904      	add	r1, sp, #16
 80086c2:	f7fd fbb3 	bl	8005e2c <_printf_float>
 80086c6:	4607      	mov	r7, r0
 80086c8:	1c78      	adds	r0, r7, #1
 80086ca:	d1d6      	bne.n	800867a <_vfiprintf_r+0x19e>
 80086cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ce:	07d9      	lsls	r1, r3, #31
 80086d0:	d405      	bmi.n	80086de <_vfiprintf_r+0x202>
 80086d2:	89ab      	ldrh	r3, [r5, #12]
 80086d4:	059a      	lsls	r2, r3, #22
 80086d6:	d402      	bmi.n	80086de <_vfiprintf_r+0x202>
 80086d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086da:	f7fe f90d 	bl	80068f8 <__retarget_lock_release_recursive>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	065b      	lsls	r3, r3, #25
 80086e2:	f53f af1d 	bmi.w	8008520 <_vfiprintf_r+0x44>
 80086e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086e8:	e71c      	b.n	8008524 <_vfiprintf_r+0x48>
 80086ea:	ab03      	add	r3, sp, #12
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	462a      	mov	r2, r5
 80086f0:	4630      	mov	r0, r6
 80086f2:	4b06      	ldr	r3, [pc, #24]	; (800870c <_vfiprintf_r+0x230>)
 80086f4:	a904      	add	r1, sp, #16
 80086f6:	f7fd fe39 	bl	800636c <_printf_i>
 80086fa:	e7e4      	b.n	80086c6 <_vfiprintf_r+0x1ea>
 80086fc:	080099dc 	.word	0x080099dc
 8008700:	080099e2 	.word	0x080099e2
 8008704:	080099e6 	.word	0x080099e6
 8008708:	08005e2d 	.word	0x08005e2d
 800870c:	080084b9 	.word	0x080084b9

08008710 <__swbuf_r>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	460e      	mov	r6, r1
 8008714:	4614      	mov	r4, r2
 8008716:	4605      	mov	r5, r0
 8008718:	b118      	cbz	r0, 8008722 <__swbuf_r+0x12>
 800871a:	6a03      	ldr	r3, [r0, #32]
 800871c:	b90b      	cbnz	r3, 8008722 <__swbuf_r+0x12>
 800871e:	f7fd ffd3 	bl	80066c8 <__sinit>
 8008722:	69a3      	ldr	r3, [r4, #24]
 8008724:	60a3      	str	r3, [r4, #8]
 8008726:	89a3      	ldrh	r3, [r4, #12]
 8008728:	071a      	lsls	r2, r3, #28
 800872a:	d525      	bpl.n	8008778 <__swbuf_r+0x68>
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	b31b      	cbz	r3, 8008778 <__swbuf_r+0x68>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	6922      	ldr	r2, [r4, #16]
 8008734:	b2f6      	uxtb	r6, r6
 8008736:	1a98      	subs	r0, r3, r2
 8008738:	6963      	ldr	r3, [r4, #20]
 800873a:	4637      	mov	r7, r6
 800873c:	4283      	cmp	r3, r0
 800873e:	dc04      	bgt.n	800874a <__swbuf_r+0x3a>
 8008740:	4621      	mov	r1, r4
 8008742:	4628      	mov	r0, r5
 8008744:	f7ff fda2 	bl	800828c <_fflush_r>
 8008748:	b9e0      	cbnz	r0, 8008784 <__swbuf_r+0x74>
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	3b01      	subs	r3, #1
 800874e:	60a3      	str	r3, [r4, #8]
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	6022      	str	r2, [r4, #0]
 8008756:	701e      	strb	r6, [r3, #0]
 8008758:	6962      	ldr	r2, [r4, #20]
 800875a:	1c43      	adds	r3, r0, #1
 800875c:	429a      	cmp	r2, r3
 800875e:	d004      	beq.n	800876a <__swbuf_r+0x5a>
 8008760:	89a3      	ldrh	r3, [r4, #12]
 8008762:	07db      	lsls	r3, r3, #31
 8008764:	d506      	bpl.n	8008774 <__swbuf_r+0x64>
 8008766:	2e0a      	cmp	r6, #10
 8008768:	d104      	bne.n	8008774 <__swbuf_r+0x64>
 800876a:	4621      	mov	r1, r4
 800876c:	4628      	mov	r0, r5
 800876e:	f7ff fd8d 	bl	800828c <_fflush_r>
 8008772:	b938      	cbnz	r0, 8008784 <__swbuf_r+0x74>
 8008774:	4638      	mov	r0, r7
 8008776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f000 f806 	bl	800878c <__swsetup_r>
 8008780:	2800      	cmp	r0, #0
 8008782:	d0d5      	beq.n	8008730 <__swbuf_r+0x20>
 8008784:	f04f 37ff 	mov.w	r7, #4294967295
 8008788:	e7f4      	b.n	8008774 <__swbuf_r+0x64>
	...

0800878c <__swsetup_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	4b2a      	ldr	r3, [pc, #168]	; (8008838 <__swsetup_r+0xac>)
 8008790:	4605      	mov	r5, r0
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	460c      	mov	r4, r1
 8008796:	b118      	cbz	r0, 80087a0 <__swsetup_r+0x14>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <__swsetup_r+0x14>
 800879c:	f7fd ff94 	bl	80066c8 <__sinit>
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087a6:	0718      	lsls	r0, r3, #28
 80087a8:	d422      	bmi.n	80087f0 <__swsetup_r+0x64>
 80087aa:	06d9      	lsls	r1, r3, #27
 80087ac:	d407      	bmi.n	80087be <__swsetup_r+0x32>
 80087ae:	2309      	movs	r3, #9
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	e034      	b.n	8008828 <__swsetup_r+0x9c>
 80087be:	0758      	lsls	r0, r3, #29
 80087c0:	d512      	bpl.n	80087e8 <__swsetup_r+0x5c>
 80087c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087c4:	b141      	cbz	r1, 80087d8 <__swsetup_r+0x4c>
 80087c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ca:	4299      	cmp	r1, r3
 80087cc:	d002      	beq.n	80087d4 <__swsetup_r+0x48>
 80087ce:	4628      	mov	r0, r5
 80087d0:	f7fe ff0e 	bl	80075f0 <_free_r>
 80087d4:	2300      	movs	r3, #0
 80087d6:	6363      	str	r3, [r4, #52]	; 0x34
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80087de:	81a3      	strh	r3, [r4, #12]
 80087e0:	2300      	movs	r3, #0
 80087e2:	6063      	str	r3, [r4, #4]
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	89a3      	ldrh	r3, [r4, #12]
 80087ea:	f043 0308 	orr.w	r3, r3, #8
 80087ee:	81a3      	strh	r3, [r4, #12]
 80087f0:	6923      	ldr	r3, [r4, #16]
 80087f2:	b94b      	cbnz	r3, 8008808 <__swsetup_r+0x7c>
 80087f4:	89a3      	ldrh	r3, [r4, #12]
 80087f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80087fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fe:	d003      	beq.n	8008808 <__swsetup_r+0x7c>
 8008800:	4621      	mov	r1, r4
 8008802:	4628      	mov	r0, r5
 8008804:	f000 f883 	bl	800890e <__smakebuf_r>
 8008808:	89a0      	ldrh	r0, [r4, #12]
 800880a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800880e:	f010 0301 	ands.w	r3, r0, #1
 8008812:	d00a      	beq.n	800882a <__swsetup_r+0x9e>
 8008814:	2300      	movs	r3, #0
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	6963      	ldr	r3, [r4, #20]
 800881a:	425b      	negs	r3, r3
 800881c:	61a3      	str	r3, [r4, #24]
 800881e:	6923      	ldr	r3, [r4, #16]
 8008820:	b943      	cbnz	r3, 8008834 <__swsetup_r+0xa8>
 8008822:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008826:	d1c4      	bne.n	80087b2 <__swsetup_r+0x26>
 8008828:	bd38      	pop	{r3, r4, r5, pc}
 800882a:	0781      	lsls	r1, r0, #30
 800882c:	bf58      	it	pl
 800882e:	6963      	ldrpl	r3, [r4, #20]
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	e7f4      	b.n	800881e <__swsetup_r+0x92>
 8008834:	2000      	movs	r0, #0
 8008836:	e7f7      	b.n	8008828 <__swsetup_r+0x9c>
 8008838:	20000074 	.word	0x20000074

0800883c <_raise_r>:
 800883c:	291f      	cmp	r1, #31
 800883e:	b538      	push	{r3, r4, r5, lr}
 8008840:	4604      	mov	r4, r0
 8008842:	460d      	mov	r5, r1
 8008844:	d904      	bls.n	8008850 <_raise_r+0x14>
 8008846:	2316      	movs	r3, #22
 8008848:	6003      	str	r3, [r0, #0]
 800884a:	f04f 30ff 	mov.w	r0, #4294967295
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008852:	b112      	cbz	r2, 800885a <_raise_r+0x1e>
 8008854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008858:	b94b      	cbnz	r3, 800886e <_raise_r+0x32>
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f830 	bl	80088c0 <_getpid_r>
 8008860:	462a      	mov	r2, r5
 8008862:	4601      	mov	r1, r0
 8008864:	4620      	mov	r0, r4
 8008866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886a:	f000 b817 	b.w	800889c <_kill_r>
 800886e:	2b01      	cmp	r3, #1
 8008870:	d00a      	beq.n	8008888 <_raise_r+0x4c>
 8008872:	1c59      	adds	r1, r3, #1
 8008874:	d103      	bne.n	800887e <_raise_r+0x42>
 8008876:	2316      	movs	r3, #22
 8008878:	6003      	str	r3, [r0, #0]
 800887a:	2001      	movs	r0, #1
 800887c:	e7e7      	b.n	800884e <_raise_r+0x12>
 800887e:	2400      	movs	r4, #0
 8008880:	4628      	mov	r0, r5
 8008882:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008886:	4798      	blx	r3
 8008888:	2000      	movs	r0, #0
 800888a:	e7e0      	b.n	800884e <_raise_r+0x12>

0800888c <raise>:
 800888c:	4b02      	ldr	r3, [pc, #8]	; (8008898 <raise+0xc>)
 800888e:	4601      	mov	r1, r0
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	f7ff bfd3 	b.w	800883c <_raise_r>
 8008896:	bf00      	nop
 8008898:	20000074 	.word	0x20000074

0800889c <_kill_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	2300      	movs	r3, #0
 80088a0:	4d06      	ldr	r5, [pc, #24]	; (80088bc <_kill_r+0x20>)
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f7fa fb2c 	bl	8002f06 <_kill>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	d102      	bne.n	80088b8 <_kill_r+0x1c>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	b103      	cbz	r3, 80088b8 <_kill_r+0x1c>
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
 80088ba:	bf00      	nop
 80088bc:	2000093c 	.word	0x2000093c

080088c0 <_getpid_r>:
 80088c0:	f7fa bb1a 	b.w	8002ef8 <_getpid>

080088c4 <__swhatbuf_r>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	460c      	mov	r4, r1
 80088c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088cc:	4615      	mov	r5, r2
 80088ce:	2900      	cmp	r1, #0
 80088d0:	461e      	mov	r6, r3
 80088d2:	b096      	sub	sp, #88	; 0x58
 80088d4:	da0c      	bge.n	80088f0 <__swhatbuf_r+0x2c>
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	2100      	movs	r1, #0
 80088da:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088de:	bf0c      	ite	eq
 80088e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088e4:	2340      	movne	r3, #64	; 0x40
 80088e6:	2000      	movs	r0, #0
 80088e8:	6031      	str	r1, [r6, #0]
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	b016      	add	sp, #88	; 0x58
 80088ee:	bd70      	pop	{r4, r5, r6, pc}
 80088f0:	466a      	mov	r2, sp
 80088f2:	f000 f849 	bl	8008988 <_fstat_r>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	dbed      	blt.n	80088d6 <__swhatbuf_r+0x12>
 80088fa:	9901      	ldr	r1, [sp, #4]
 80088fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008900:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008904:	4259      	negs	r1, r3
 8008906:	4159      	adcs	r1, r3
 8008908:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890c:	e7eb      	b.n	80088e6 <__swhatbuf_r+0x22>

0800890e <__smakebuf_r>:
 800890e:	898b      	ldrh	r3, [r1, #12]
 8008910:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008912:	079d      	lsls	r5, r3, #30
 8008914:	4606      	mov	r6, r0
 8008916:	460c      	mov	r4, r1
 8008918:	d507      	bpl.n	800892a <__smakebuf_r+0x1c>
 800891a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	2301      	movs	r3, #1
 8008924:	6163      	str	r3, [r4, #20]
 8008926:	b002      	add	sp, #8
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	466a      	mov	r2, sp
 800892c:	ab01      	add	r3, sp, #4
 800892e:	f7ff ffc9 	bl	80088c4 <__swhatbuf_r>
 8008932:	9900      	ldr	r1, [sp, #0]
 8008934:	4605      	mov	r5, r0
 8008936:	4630      	mov	r0, r6
 8008938:	f7fe feca 	bl	80076d0 <_malloc_r>
 800893c:	b948      	cbnz	r0, 8008952 <__smakebuf_r+0x44>
 800893e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008942:	059a      	lsls	r2, r3, #22
 8008944:	d4ef      	bmi.n	8008926 <__smakebuf_r+0x18>
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	f043 0302 	orr.w	r3, r3, #2
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	e7e3      	b.n	800891a <__smakebuf_r+0xc>
 8008952:	89a3      	ldrh	r3, [r4, #12]
 8008954:	6020      	str	r0, [r4, #0]
 8008956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895a:	81a3      	strh	r3, [r4, #12]
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	6120      	str	r0, [r4, #16]
 8008960:	6163      	str	r3, [r4, #20]
 8008962:	9b01      	ldr	r3, [sp, #4]
 8008964:	b15b      	cbz	r3, 800897e <__smakebuf_r+0x70>
 8008966:	4630      	mov	r0, r6
 8008968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800896c:	f000 f81e 	bl	80089ac <_isatty_r>
 8008970:	b128      	cbz	r0, 800897e <__smakebuf_r+0x70>
 8008972:	89a3      	ldrh	r3, [r4, #12]
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	f043 0301 	orr.w	r3, r3, #1
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	89a3      	ldrh	r3, [r4, #12]
 8008980:	431d      	orrs	r5, r3
 8008982:	81a5      	strh	r5, [r4, #12]
 8008984:	e7cf      	b.n	8008926 <__smakebuf_r+0x18>
	...

08008988 <_fstat_r>:
 8008988:	b538      	push	{r3, r4, r5, lr}
 800898a:	2300      	movs	r3, #0
 800898c:	4d06      	ldr	r5, [pc, #24]	; (80089a8 <_fstat_r+0x20>)
 800898e:	4604      	mov	r4, r0
 8008990:	4608      	mov	r0, r1
 8008992:	4611      	mov	r1, r2
 8008994:	602b      	str	r3, [r5, #0]
 8008996:	f7fa faf8 	bl	8002f8a <_fstat>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d102      	bne.n	80089a4 <_fstat_r+0x1c>
 800899e:	682b      	ldr	r3, [r5, #0]
 80089a0:	b103      	cbz	r3, 80089a4 <_fstat_r+0x1c>
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	bd38      	pop	{r3, r4, r5, pc}
 80089a6:	bf00      	nop
 80089a8:	2000093c 	.word	0x2000093c

080089ac <_isatty_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	2300      	movs	r3, #0
 80089b0:	4d05      	ldr	r5, [pc, #20]	; (80089c8 <_isatty_r+0x1c>)
 80089b2:	4604      	mov	r4, r0
 80089b4:	4608      	mov	r0, r1
 80089b6:	602b      	str	r3, [r5, #0]
 80089b8:	f7fa faf6 	bl	8002fa8 <_isatty>
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d102      	bne.n	80089c6 <_isatty_r+0x1a>
 80089c0:	682b      	ldr	r3, [r5, #0]
 80089c2:	b103      	cbz	r3, 80089c6 <_isatty_r+0x1a>
 80089c4:	6023      	str	r3, [r4, #0]
 80089c6:	bd38      	pop	{r3, r4, r5, pc}
 80089c8:	2000093c 	.word	0x2000093c

080089cc <_init>:
 80089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ce:	bf00      	nop
 80089d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d2:	bc08      	pop	{r3}
 80089d4:	469e      	mov	lr, r3
 80089d6:	4770      	bx	lr

080089d8 <_fini>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr
